
Nucleo_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007050  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b0  080072b0  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080072b0  080072b0  000172b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072b8  080072b8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072bc  080072bc  000172bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080072c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004470  20000064  08007324  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044d4  08007324  000244d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017037  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003888  00000000  00000000  0003710e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0003a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eff  00000000  00000000  0003bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241b0  00000000  00000000  0003cbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001858b  00000000  00000000  00060daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9c43  00000000  00000000  0007933a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005218  00000000  00000000  00152f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00158198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007208 	.word	0x08007208

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08007208 	.word	0x08007208

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_DC_Motors_Forward>:
/************************************************************
 *Function Name : HAL_DC_Motors_Forward
 *Description 	: Rotate the DC Motors forward
 *
 ****************************************************/
void HAL_DC_Motors_Forward(void ){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	//----IN1 = H
	//----IN2 = L
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <HAL_DC_Motors_Forward+0x20>)
 8000518:	f002 f8d8 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <HAL_DC_Motors_Forward+0x20>)
 8000524:	f002 f8d2 	bl	80026cc <HAL_GPIO_WritePin>

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40020400 	.word	0x40020400

08000530 <HAL_DC_Motors_Backword>:
/**************************************************************
 *Function Name : HAL_DC_Motors_Backword
 *Description 	: Rotate the DC Motors forward
 *
 ****************************************************/
void HAL_DC_Motors_Backword(void ){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	//----IN1 = H
	//----IN2 = L
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <HAL_DC_Motors_Backword+0x20>)
 800053c:	f002 f8c6 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <HAL_DC_Motors_Backword+0x20>)
 8000548:	f002 f8c0 	bl	80026cc <HAL_GPIO_WritePin>

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40020400 	.word	0x40020400

08000554 <HAL_DC_Motors_Stop>:
void HAL_DC_Motors_Stop (void ){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <HAL_DC_Motors_Stop+0x20>)
 8000560:	f002 f8b4 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <HAL_DC_Motors_Stop+0x20>)
 800056c:	f002 f8ae 	bl	80026cc <HAL_GPIO_WritePin>

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40020400 	.word	0x40020400

08000578 <HAL_DC_Motor_Init>:
void HAL_DC_Motor_Init (void ){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Init(&HAL_DC_Motor_Timer);
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <HAL_DC_Motor_Init+0x10>)
 800057e:	f002 ffb3 	bl	80034e8 <HAL_TIM_PWM_Init>


}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000468 	.word	0x20000468

0800058c <HAL_DC_Motors_Set_Speed>:
void HAL_DC_Motors_Set_Speed (uint8_t Copy_DC_MotorSpeed_percentage){ // Percent
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]


	__HAL_TIM_SET_COMPARE(&HAL_DC_Motor_Timer,HAL_DC_Motor_Channel, Copy_DC_MotorSpeed_percentage);
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_DC_Motors_Set_Speed+0x20>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	635a      	str	r2, [r3, #52]	; 0x34



}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000468 	.word	0x20000468

080005b0 <HAL_ServoMotor_Init>:

void HAL_ServoMotor_Init (void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Init(&HAL_Servo_Motor_Timer);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <HAL_ServoMotor_Init+0x10>)
 80005b6:	f002 ff97 	bl	80034e8 <HAL_TIM_PWM_Init>

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000420 	.word	0x20000420

080005c4 <HAL_ServoMotor_Set_Angel>:

void HAL_ServoMotor_Set_Angel (int8_t Copy_ServoMotor_Angel){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]


	uint16_t  Campare_value;
	if (Copy_ServoMotor_Angel < 0 ){
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	da17      	bge.n	8000606 <HAL_ServoMotor_Set_Angel+0x42>

		Campare_value = ((((int32_t)50*Copy_ServoMotor_Angel)/9) + 1000);
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	2232      	movs	r2, #50	; 0x32
 80005dc:	fb02 f303 	mul.w	r3, r2, r3
 80005e0:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <HAL_ServoMotor_Set_Angel+0x9c>)
 80005e2:	fb82 1203 	smull	r1, r2, r2, r3
 80005e6:	1052      	asrs	r2, r2, #1
 80005e8:	17db      	asrs	r3, r3, #31
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005f2:	81fb      	strh	r3, [r7, #14]

		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, Campare_value);
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <HAL_ServoMotor_Set_Angel+0xa0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	89fa      	ldrh	r2, [r7, #14]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 80005fc:	2100      	movs	r1, #0
 80005fe:	4819      	ldr	r0, [pc, #100]	; (8000664 <HAL_ServoMotor_Set_Angel+0xa0>)
 8000600:	f002 ffcc 	bl	800359c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
	}



}
 8000604:	e028      	b.n	8000658 <HAL_ServoMotor_Set_Angel+0x94>
	else if (Copy_ServoMotor_Angel > 0){
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	dd17      	ble.n	800063e <HAL_ServoMotor_Set_Angel+0x7a>
		Campare_value = ((((int32_t)70*Copy_ServoMotor_Angel)/9) + 1000);
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	2246      	movs	r2, #70	; 0x46
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	4a11      	ldr	r2, [pc, #68]	; (8000660 <HAL_ServoMotor_Set_Angel+0x9c>)
 800061a:	fb82 1203 	smull	r1, r2, r2, r3
 800061e:	1052      	asrs	r2, r2, #1
 8000620:	17db      	asrs	r3, r3, #31
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	b29b      	uxth	r3, r3
 8000626:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800062a:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, Campare_value);
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <HAL_ServoMotor_Set_Angel+0xa0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	89fa      	ldrh	r2, [r7, #14]
 8000632:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 8000634:	2100      	movs	r1, #0
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <HAL_ServoMotor_Set_Angel+0xa0>)
 8000638:	f002 ffb0 	bl	800359c <HAL_TIM_PWM_Start>
}
 800063c:	e00c      	b.n	8000658 <HAL_ServoMotor_Set_Angel+0x94>
	else if (Copy_ServoMotor_Angel == 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d108      	bne.n	8000658 <HAL_ServoMotor_Set_Angel+0x94>
		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, 1000);
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <HAL_ServoMotor_Set_Angel+0xa0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 8000650:	2100      	movs	r1, #0
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <HAL_ServoMotor_Set_Angel+0xa0>)
 8000654:	f002 ffa2 	bl	800359c <HAL_TIM_PWM_Start>
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	38e38e39 	.word	0x38e38e39
 8000664:	20000420 	.word	0x20000420

08000668 <RC_SystemInit>:
static int8_t						servo_angle		= SERVO_INIT_ANGLE ;

/********************************* RTOS Tasks Implementation *************************************/

void RC_SystemInit (void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	flashing_smphr =  xSemaphoreCreateBinary() ;
 800066c:	2203      	movs	r2, #3
 800066e:	2100      	movs	r1, #0
 8000670:	2001      	movs	r0, #1
 8000672:	f004 fefd 	bl	8005470 <xQueueGenericCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a35      	ldr	r2, [pc, #212]	; (8000750 <RC_SystemInit+0xe8>)
 800067a:	6013      	str	r3, [r2, #0]
	horn_smphr     =  xSemaphoreCreateBinary() ;
 800067c:	2203      	movs	r2, #3
 800067e:	2100      	movs	r1, #0
 8000680:	2001      	movs	r0, #1
 8000682:	f004 fef5 	bl	8005470 <xQueueGenericCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a32      	ldr	r2, [pc, #200]	; (8000754 <RC_SystemInit+0xec>)
 800068a:	6013      	str	r3, [r2, #0]
	Gear_smphr     =  xSemaphoreCreateBinary() ;
 800068c:	2203      	movs	r2, #3
 800068e:	2100      	movs	r1, #0
 8000690:	2001      	movs	r0, #1
 8000692:	f004 feed 	bl	8005470 <xQueueGenericCreate>
 8000696:	4603      	mov	r3, r0
 8000698:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <RC_SystemInit+0xf0>)
 800069a:	6013      	str	r3, [r2, #0]
	speedInc_smphr =  xSemaphoreCreateBinary() ;
 800069c:	2203      	movs	r2, #3
 800069e:	2100      	movs	r1, #0
 80006a0:	2001      	movs	r0, #1
 80006a2:	f004 fee5 	bl	8005470 <xQueueGenericCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a2c      	ldr	r2, [pc, #176]	; (800075c <RC_SystemInit+0xf4>)
 80006aa:	6013      	str	r3, [r2, #0]
	brake_smphr    =  xSemaphoreCreateBinary() ;
 80006ac:	2203      	movs	r2, #3
 80006ae:	2100      	movs	r1, #0
 80006b0:	2001      	movs	r0, #1
 80006b2:	f004 fedd 	bl	8005470 <xQueueGenericCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a29      	ldr	r2, [pc, #164]	; (8000760 <RC_SystemInit+0xf8>)
 80006ba:	6013      	str	r3, [r2, #0]
	goRight_smphr  =  xSemaphoreCreateBinary() ;
 80006bc:	2203      	movs	r2, #3
 80006be:	2100      	movs	r1, #0
 80006c0:	2001      	movs	r0, #1
 80006c2:	f004 fed5 	bl	8005470 <xQueueGenericCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a26      	ldr	r2, [pc, #152]	; (8000764 <RC_SystemInit+0xfc>)
 80006ca:	6013      	str	r3, [r2, #0]
	goLeft_smphr   =  xSemaphoreCreateBinary() ;
 80006cc:	2203      	movs	r2, #3
 80006ce:	2100      	movs	r1, #0
 80006d0:	2001      	movs	r0, #1
 80006d2:	f004 fecd 	bl	8005470 <xQueueGenericCreate>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a23      	ldr	r2, [pc, #140]	; (8000768 <RC_SystemInit+0x100>)
 80006da:	6013      	str	r3, [r2, #0]

	HAL_DC_Motor_Init() ;
 80006dc:	f7ff ff4c 	bl	8000578 <HAL_DC_Motor_Init>
	HAL_DC_Motors_Stop() ;
 80006e0:	f7ff ff38 	bl	8000554 <HAL_DC_Motors_Stop>
	HAL_DC_Motors_Set_Speed(0) ;
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff ff51 	bl	800058c <HAL_DC_Motors_Set_Speed>
	HAL_ServoMotor_Init() ;
 80006ea:	f7ff ff61 	bl	80005b0 <HAL_ServoMotor_Init>
	HAL_ServoMotor_Set_Angel(0) ;
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ff68 	bl	80005c4 <HAL_ServoMotor_Set_Angel>

	HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	481c      	ldr	r0, [pc, #112]	; (800076c <RC_SystemInit+0x104>)
 80006fc:	f001 ffe6 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000706:	4819      	ldr	r0, [pc, #100]	; (800076c <RC_SystemInit+0x104>)
 8000708:	f001 ffe0 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <RC_SystemInit+0x104>)
 8000714:	f001 ffda 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING,GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071e:	4813      	ldr	r0, [pc, #76]	; (800076c <RC_SystemInit+0x104>)
 8000720:	f001 ffd4 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2102      	movs	r1, #2
 8000728:	4810      	ldr	r0, [pc, #64]	; (800076c <RC_SystemInit+0x104>)
 800072a:	f001 ffcf 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2101      	movs	r1, #1
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <RC_SystemInit+0x104>)
 8000734:	f001 ffca 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_PIN,GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2104      	movs	r1, #4
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <RC_SystemInit+0x104>)
 800073e:	f001 ffc5 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2102      	movs	r1, #2
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <RC_SystemInit+0x104>)
 8000748:	f001 ffc0 	bl	80026cc <HAL_GPIO_WritePin>

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000084 	.word	0x20000084
 8000754:	20000088 	.word	0x20000088
 8000758:	2000008c 	.word	0x2000008c
 800075c:	20000090 	.word	0x20000090
 8000760:	20000094 	.word	0x20000094
 8000764:	20000098 	.word	0x20000098
 8000768:	2000009c 	.word	0x2000009c
 800076c:	40020400 	.word	0x40020400

08000770 <T1_UartReceive>:


void T1_UartReceive (void* pvarg)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef l_retval = HAL_OK ;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
	uint8_t data ;

	while (1)
	{
		l_retval = HAL_UART_Receive(&huart4 ,&data,1,100 ) ;
 800077c:	f107 010e 	add.w	r1, r7, #14
 8000780:	2364      	movs	r3, #100	; 0x64
 8000782:	2201      	movs	r2, #1
 8000784:	4886      	ldr	r0, [pc, #536]	; (80009a0 <T1_UartReceive+0x230>)
 8000786:	f004 f910 	bl	80049aa <HAL_UART_Receive>
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]

		if (l_retval==HAL_OK)
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	2b00      	cmp	r3, #0
 8000792:	f040 8100 	bne.w	8000996 <T1_UartReceive+0x226>
		{
			switch (data)
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	3b45      	subs	r3, #69	; 0x45
 800079a:	2b2d      	cmp	r3, #45	; 0x2d
 800079c:	f200 80fb 	bhi.w	8000996 <T1_UartReceive+0x226>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <T1_UartReceive+0x38>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	08000861 	.word	0x08000861
 80007ac:	080008c7 	.word	0x080008c7
 80007b0:	08000903 	.word	0x08000903
 80007b4:	080008e5 	.word	0x080008e5
 80007b8:	08000997 	.word	0x08000997
 80007bc:	08000997 	.word	0x08000997
 80007c0:	08000997 	.word	0x08000997
 80007c4:	08000885 	.word	0x08000885
 80007c8:	08000997 	.word	0x08000997
 80007cc:	08000997 	.word	0x08000997
 80007d0:	08000997 	.word	0x08000997
 80007d4:	08000997 	.word	0x08000997
 80007d8:	08000997 	.word	0x08000997
 80007dc:	0800089b 	.word	0x0800089b
 80007e0:	0800093f 	.word	0x0800093f
 80007e4:	08000997 	.word	0x08000997
 80007e8:	08000997 	.word	0x08000997
 80007ec:	08000997 	.word	0x08000997
 80007f0:	080008b1 	.word	0x080008b1
 80007f4:	08000997 	.word	0x08000997
 80007f8:	08000997 	.word	0x08000997
 80007fc:	08000997 	.word	0x08000997
 8000800:	08000997 	.word	0x08000997
 8000804:	08000997 	.word	0x08000997
 8000808:	08000997 	.word	0x08000997
 800080c:	08000997 	.word	0x08000997
 8000810:	08000997 	.word	0x08000997
 8000814:	08000997 	.word	0x08000997
 8000818:	08000997 	.word	0x08000997
 800081c:	08000997 	.word	0x08000997
 8000820:	08000997 	.word	0x08000997
 8000824:	08000997 	.word	0x08000997
 8000828:	08000997 	.word	0x08000997
 800082c:	08000921 	.word	0x08000921
 8000830:	08000997 	.word	0x08000997
 8000834:	08000997 	.word	0x08000997
 8000838:	08000997 	.word	0x08000997
 800083c:	08000997 	.word	0x08000997
 8000840:	08000997 	.word	0x08000997
 8000844:	0800097b 	.word	0x0800097b
 8000848:	08000997 	.word	0x08000997
 800084c:	08000997 	.word	0x08000997
 8000850:	08000997 	.word	0x08000997
 8000854:	08000997 	.word	0x08000997
 8000858:	08000997 	.word	0x08000997
 800085c:	0800095d 	.word	0x0800095d
			{
				case MSG_START_ENGINE :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000860:	f107 010e 	add.w	r1, r7, #14
 8000864:	2332      	movs	r3, #50	; 0x32
 8000866:	2201      	movs	r2, #1
 8000868:	484d      	ldr	r0, [pc, #308]	; (80009a0 <T1_UartReceive+0x230>)
 800086a:	f004 f813 	bl	8004894 <HAL_UART_Transmit>
					engine_state ^= 0x01 ;
 800086e:	4b4d      	ldr	r3, [pc, #308]	; (80009a4 <T1_UartReceive+0x234>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f083 0301 	eor.w	r3, r3, #1
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b4a      	ldr	r3, [pc, #296]	; (80009a4 <T1_UartReceive+0x234>)
 800087c:	701a      	strb	r2, [r3, #0]
					Car_EngineFunc() ;
 800087e:	f000 fb1b 	bl	8000eb8 <Car_EngineFunc>
				break ;
 8000882:	e088      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_LEFT_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000884:	f107 010e 	add.w	r1, r7, #14
 8000888:	2332      	movs	r3, #50	; 0x32
 800088a:	2201      	movs	r2, #1
 800088c:	4844      	ldr	r0, [pc, #272]	; (80009a0 <T1_UartReceive+0x230>)
 800088e:	f004 f801 	bl	8004894 <HAL_UART_Transmit>
					transition = SIG_LEFT ;
 8000892:	4b45      	ldr	r3, [pc, #276]	; (80009a8 <T1_UartReceive+0x238>)
 8000894:	2202      	movs	r2, #2
 8000896:	701a      	strb	r2, [r3, #0]
				break ;
 8000898:	e07d      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_RIGHT_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 800089a:	f107 010e 	add.w	r1, r7, #14
 800089e:	2332      	movs	r3, #50	; 0x32
 80008a0:	2201      	movs	r2, #1
 80008a2:	483f      	ldr	r0, [pc, #252]	; (80009a0 <T1_UartReceive+0x230>)
 80008a4:	f003 fff6 	bl	8004894 <HAL_UART_Transmit>
					transition = SIG_RIGHT ;
 80008a8:	4b3f      	ldr	r3, [pc, #252]	; (80009a8 <T1_UartReceive+0x238>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
				break ;
 80008ae:	e072      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_WAITING_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80008b0:	f107 010e 	add.w	r1, r7, #14
 80008b4:	2332      	movs	r3, #50	; 0x32
 80008b6:	2201      	movs	r2, #1
 80008b8:	4839      	ldr	r0, [pc, #228]	; (80009a0 <T1_UartReceive+0x230>)
 80008ba:	f003 ffeb 	bl	8004894 <HAL_UART_Transmit>
					transition = SIG_W8 ;
 80008be:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <T1_UartReceive+0x238>)
 80008c0:	2203      	movs	r2, #3
 80008c2:	701a      	strb	r2, [r3, #0]
				break ;
 80008c4:	e067      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_FLASHING_LIGHT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80008c6:	f107 010e 	add.w	r1, r7, #14
 80008ca:	2332      	movs	r3, #50	; 0x32
 80008cc:	2201      	movs	r2, #1
 80008ce:	4834      	ldr	r0, [pc, #208]	; (80009a0 <T1_UartReceive+0x230>)
 80008d0:	f003 ffe0 	bl	8004894 <HAL_UART_Transmit>
					xSemaphoreGive(flashing_smphr) ;
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <T1_UartReceive+0x23c>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	2300      	movs	r3, #0
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	f004 fe21 	bl	8005524 <xQueueGenericSend>
				break ;
 80008e2:	e058      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_HORN_BEEPING :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80008e4:	f107 010e 	add.w	r1, r7, #14
 80008e8:	2332      	movs	r3, #50	; 0x32
 80008ea:	2201      	movs	r2, #1
 80008ec:	482c      	ldr	r0, [pc, #176]	; (80009a0 <T1_UartReceive+0x230>)
 80008ee:	f003 ffd1 	bl	8004894 <HAL_UART_Transmit>
					xSemaphoreGive(horn_smphr) ;
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <T1_UartReceive+0x240>)
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	f004 fe12 	bl	8005524 <xQueueGenericSend>
				break ;
 8000900:	e049      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_GEAR_CHANGE :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000902:	f107 010e 	add.w	r1, r7, #14
 8000906:	2332      	movs	r3, #50	; 0x32
 8000908:	2201      	movs	r2, #1
 800090a:	4825      	ldr	r0, [pc, #148]	; (80009a0 <T1_UartReceive+0x230>)
 800090c:	f003 ffc2 	bl	8004894 <HAL_UART_Transmit>
					xSemaphoreGive(Gear_smphr) ;
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <T1_UartReceive+0x244>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	f004 fe03 	bl	8005524 <xQueueGenericSend>
				break ;
 800091e:	e03a      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_GO_FWD :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000920:	f107 010e 	add.w	r1, r7, #14
 8000924:	2332      	movs	r3, #50	; 0x32
 8000926:	2201      	movs	r2, #1
 8000928:	481d      	ldr	r0, [pc, #116]	; (80009a0 <T1_UartReceive+0x230>)
 800092a:	f003 ffb3 	bl	8004894 <HAL_UART_Transmit>
					xSemaphoreGive(speedInc_smphr) ;
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <T1_UartReceive+0x248>)
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	f004 fdf4 	bl	8005524 <xQueueGenericSend>
				break ;
 800093c:	e02b      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_BRAKE_ASSIST :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 800093e:	f107 010e 	add.w	r1, r7, #14
 8000942:	2332      	movs	r3, #50	; 0x32
 8000944:	2201      	movs	r2, #1
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <T1_UartReceive+0x230>)
 8000948:	f003 ffa4 	bl	8004894 <HAL_UART_Transmit>
					xSemaphoreGive(brake_smphr) ;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <T1_UartReceive+0x24c>)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	2300      	movs	r3, #0
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	f004 fde5 	bl	8005524 <xQueueGenericSend>
				break ;
 800095a:	e01c      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_GO_RIGHT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 800095c:	f107 010e 	add.w	r1, r7, #14
 8000960:	2332      	movs	r3, #50	; 0x32
 8000962:	2201      	movs	r2, #1
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <T1_UartReceive+0x230>)
 8000966:	f003 ff95 	bl	8004894 <HAL_UART_Transmit>
					xSemaphoreGive(goRight_smphr) ;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <T1_UartReceive+0x250>)
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	2300      	movs	r3, #0
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	f004 fdd6 	bl	8005524 <xQueueGenericSend>
				break ;
 8000978:	e00d      	b.n	8000996 <T1_UartReceive+0x226>

				case MSG_GO_LEFT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 800097a:	f107 010e 	add.w	r1, r7, #14
 800097e:	2332      	movs	r3, #50	; 0x32
 8000980:	2201      	movs	r2, #1
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <T1_UartReceive+0x230>)
 8000984:	f003 ff86 	bl	8004894 <HAL_UART_Transmit>
					xSemaphoreGive(MSG_GO_LEFT) ;
 8000988:	2300      	movs	r3, #0
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	206c      	movs	r0, #108	; 0x6c
 8000990:	f004 fdc8 	bl	8005524 <xQueueGenericSend>
				break ;
 8000994:	bf00      	nop

			}

		}

		vTaskDelay(50);
 8000996:	2032      	movs	r0, #50	; 0x32
 8000998:	f005 fa7a 	bl	8005e90 <vTaskDelay>
		l_retval = HAL_UART_Receive(&huart4 ,&data,1,100 ) ;
 800099c:	e6ee      	b.n	800077c <T1_UartReceive+0xc>
 800099e:	bf00      	nop
 80009a0:	200004b0 	.word	0x200004b0
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000082 	.word	0x20000082
 80009ac:	20000084 	.word	0x20000084
 80009b0:	20000088 	.word	0x20000088
 80009b4:	2000008c 	.word	0x2000008c
 80009b8:	20000090 	.word	0x20000090
 80009bc:	20000094 	.word	0x20000094
 80009c0:	20000098 	.word	0x20000098

080009c4 <T2_SignalsAction>:
	}
}


void T2_SignalsAction (void* pvarg)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	while(1)
	{

		switch (Current_state)
 80009cc:	4ba3      	ldr	r3, [pc, #652]	; (8000c5c <T2_SignalsAction+0x298>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	f200 813d 	bhi.w	8000c52 <T2_SignalsAction+0x28e>
 80009d8:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <T2_SignalsAction+0x1c>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	080009f1 	.word	0x080009f1
 80009e4:	08000a79 	.word	0x08000a79
 80009e8:	08000af1 	.word	0x08000af1
 80009ec:	08000b69 	.word	0x08000b69
			{
				case STATE_NORMAL :
					switch (transition)
 80009f0:	4b9b      	ldr	r3, [pc, #620]	; (8000c60 <T2_SignalsAction+0x29c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	f200 8124 	bhi.w	8000c44 <T2_SignalsAction+0x280>
 80009fc:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <T2_SignalsAction+0x40>)
 80009fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a02:	bf00      	nop
 8000a04:	08000a71 	.word	0x08000a71
 8000a08:	08000a15 	.word	0x08000a15
 8000a0c:	08000a37 	.word	0x08000a37
 8000a10:	08000a59 	.word	0x08000a59
					{
						case SIG_RIGHT :
							if (ENGINE_ENABLE==engine_state)
 8000a14:	4b93      	ldr	r3, [pc, #588]	; (8000c64 <T2_SignalsAction+0x2a0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <T2_SignalsAction+0x60>
							{
								Car_RightSignalFunc() ;
 8000a1e:	f000 fa6b 	bl	8000ef8 <Car_RightSignalFunc>
 8000a22:	e001      	b.n	8000a28 <T2_SignalsAction+0x64>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8000a24:	f000 fab2 	bl	8000f8c <Car_IdleSignalFunc>
							}
							Current_state = STATE_RIGHT ;
 8000a28:	4b8c      	ldr	r3, [pc, #560]	; (8000c5c <T2_SignalsAction+0x298>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000a2e:	4b8c      	ldr	r3, [pc, #560]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
						break ;
 8000a34:	e01f      	b.n	8000a76 <T2_SignalsAction+0xb2>

						case SIG_LEFT :
							if (ENGINE_ENABLE==engine_state)
 8000a36:	4b8b      	ldr	r3, [pc, #556]	; (8000c64 <T2_SignalsAction+0x2a0>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <T2_SignalsAction+0x82>
							{
								Car_LeftSignalFunc() ;
 8000a40:	f000 fa6c 	bl	8000f1c <Car_LeftSignalFunc>
 8000a44:	e001      	b.n	8000a4a <T2_SignalsAction+0x86>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8000a46:	f000 faa1 	bl	8000f8c <Car_IdleSignalFunc>
							}

							Current_state = STATE_LEFT ;
 8000a4a:	4b84      	ldr	r3, [pc, #528]	; (8000c5c <T2_SignalsAction+0x298>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000a50:	4b83      	ldr	r3, [pc, #524]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
						break ;
 8000a56:	e00e      	b.n	8000a76 <T2_SignalsAction+0xb2>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 8000a58:	f000 fa72 	bl	8000f40 <Car_WaitSignalFunc>
							Previous_state = STATE_NORMAL ;
 8000a5c:	4b82      	ldr	r3, [pc, #520]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
							Current_state = STATE_WAIT ;
 8000a62:	4b7e      	ldr	r3, [pc, #504]	; (8000c5c <T2_SignalsAction+0x298>)
 8000a64:	2203      	movs	r2, #3
 8000a66:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000a68:	4b7d      	ldr	r3, [pc, #500]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
						break ;
 8000a6e:	e002      	b.n	8000a76 <T2_SignalsAction+0xb2>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8000a70:	f000 fa9e 	bl	8000fb0 <Car_NoneSignalFunc>
						break ;
 8000a74:	bf00      	nop
					}

					break ;
 8000a76:	e0e5      	b.n	8000c44 <T2_SignalsAction+0x280>

				case STATE_RIGHT :
					switch (transition)
 8000a78:	4b79      	ldr	r3, [pc, #484]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	f200 80e2 	bhi.w	8000c48 <T2_SignalsAction+0x284>
 8000a84:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <T2_SignalsAction+0xc8>)
 8000a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8a:	bf00      	nop
 8000a8c:	08000ae9 	.word	0x08000ae9
 8000a90:	08000a9d 	.word	0x08000a9d
 8000a94:	08000abf 	.word	0x08000abf
 8000a98:	08000ad1 	.word	0x08000ad1
					{
						case SIG_RIGHT :
							if (ENGINE_ENABLE==engine_state)
 8000a9c:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <T2_SignalsAction+0x2a0>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <T2_SignalsAction+0xe8>
							{
								Car_RightSignalFunc() ;
 8000aa6:	f000 fa27 	bl	8000ef8 <Car_RightSignalFunc>
 8000aaa:	e001      	b.n	8000ab0 <T2_SignalsAction+0xec>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8000aac:	f000 fa6e 	bl	8000f8c <Car_IdleSignalFunc>
							}
							Current_state = STATE_RIGHT ;
 8000ab0:	4b6a      	ldr	r3, [pc, #424]	; (8000c5c <T2_SignalsAction+0x298>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000ab6:	4b6a      	ldr	r3, [pc, #424]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
						break ;
 8000abc:	e017      	b.n	8000aee <T2_SignalsAction+0x12a>

						case SIG_LEFT :
							Car_IdleSignalFunc() ;
 8000abe:	f000 fa65 	bl	8000f8c <Car_IdleSignalFunc>
							Current_state   = 	STATE_NORMAL ;
 8000ac2:	4b66      	ldr	r3, [pc, #408]	; (8000c5c <T2_SignalsAction+0x298>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000ac8:	4b65      	ldr	r3, [pc, #404]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
						break ;
 8000ace:	e00e      	b.n	8000aee <T2_SignalsAction+0x12a>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 8000ad0:	f000 fa36 	bl	8000f40 <Car_WaitSignalFunc>
							Previous_state = STATE_RIGHT ;
 8000ad4:	4b64      	ldr	r3, [pc, #400]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
							Current_state   = 	STATE_WAIT ;
 8000ada:	4b60      	ldr	r3, [pc, #384]	; (8000c5c <T2_SignalsAction+0x298>)
 8000adc:	2203      	movs	r2, #3
 8000ade:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000ae0:	4b5f      	ldr	r3, [pc, #380]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
						break ;
 8000ae6:	e002      	b.n	8000aee <T2_SignalsAction+0x12a>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8000ae8:	f000 fa62 	bl	8000fb0 <Car_NoneSignalFunc>
						break ;
 8000aec:	bf00      	nop
					}
					break ;
 8000aee:	e0ab      	b.n	8000c48 <T2_SignalsAction+0x284>

				case STATE_LEFT :
					switch (transition)
 8000af0:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	f200 80a8 	bhi.w	8000c4c <T2_SignalsAction+0x288>
 8000afc:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <T2_SignalsAction+0x140>)
 8000afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b02:	bf00      	nop
 8000b04:	08000b61 	.word	0x08000b61
 8000b08:	08000b15 	.word	0x08000b15
 8000b0c:	08000b27 	.word	0x08000b27
 8000b10:	08000b49 	.word	0x08000b49
					{
						case SIG_RIGHT :
							Car_IdleSignalFunc() ;
 8000b14:	f000 fa3a 	bl	8000f8c <Car_IdleSignalFunc>
							Current_state   = 	STATE_NORMAL ;
 8000b18:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <T2_SignalsAction+0x298>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000b1e:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
						break ;
 8000b24:	e01f      	b.n	8000b66 <T2_SignalsAction+0x1a2>

						case SIG_LEFT :
							if (ENGINE_ENABLE==engine_state)
 8000b26:	4b4f      	ldr	r3, [pc, #316]	; (8000c64 <T2_SignalsAction+0x2a0>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <T2_SignalsAction+0x172>
							{
								Car_LeftSignalFunc() ;
 8000b30:	f000 f9f4 	bl	8000f1c <Car_LeftSignalFunc>
 8000b34:	e001      	b.n	8000b3a <T2_SignalsAction+0x176>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8000b36:	f000 fa29 	bl	8000f8c <Car_IdleSignalFunc>
							}
							Current_state = STATE_LEFT ;
 8000b3a:	4b48      	ldr	r3, [pc, #288]	; (8000c5c <T2_SignalsAction+0x298>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000b40:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
						break ;
 8000b46:	e00e      	b.n	8000b66 <T2_SignalsAction+0x1a2>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 8000b48:	f000 f9fa 	bl	8000f40 <Car_WaitSignalFunc>
							Previous_state = STATE_LEFT ;
 8000b4c:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	701a      	strb	r2, [r3, #0]
							Current_state   = 	STATE_WAIT ;
 8000b52:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <T2_SignalsAction+0x298>)
 8000b54:	2203      	movs	r2, #3
 8000b56:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000b58:	4b41      	ldr	r3, [pc, #260]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
						break ;
 8000b5e:	e002      	b.n	8000b66 <T2_SignalsAction+0x1a2>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8000b60:	f000 fa26 	bl	8000fb0 <Car_NoneSignalFunc>
						break ;
 8000b64:	bf00      	nop
					}
					break ;
 8000b66:	e071      	b.n	8000c4c <T2_SignalsAction+0x288>

				case STATE_WAIT :
					switch (transition)
 8000b68:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d86e      	bhi.n	8000c50 <T2_SignalsAction+0x28c>
 8000b72:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <T2_SignalsAction+0x1b4>)
 8000b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b78:	08000c3d 	.word	0x08000c3d
 8000b7c:	08000b89 	.word	0x08000b89
 8000b80:	08000baf 	.word	0x08000baf
 8000b84:	08000bd5 	.word	0x08000bd5
					{
						case SIG_RIGHT :
							if (STATE_LEFT==Previous_state)
 8000b88:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d103      	bne.n	8000b9a <T2_SignalsAction+0x1d6>
							{
								Previous_state = STATE_NORMAL ;
 8000b92:	4b35      	ldr	r3, [pc, #212]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e002      	b.n	8000ba0 <T2_SignalsAction+0x1dc>
							}
							else
							{
								Previous_state = STATE_RIGHT ;
 8000b9a:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
							}
							Current_state = STATE_WAIT ;
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <T2_SignalsAction+0x298>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
						break ;
 8000bac:	e049      	b.n	8000c42 <T2_SignalsAction+0x27e>

						case SIG_LEFT :
							if (STATE_RIGHT==Previous_state)
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d103      	bne.n	8000bc0 <T2_SignalsAction+0x1fc>
							{
								Previous_state = STATE_NORMAL ;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e002      	b.n	8000bc6 <T2_SignalsAction+0x202>
							}
							else
							{
								Previous_state = STATE_LEFT ;
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	701a      	strb	r2, [r3, #0]
							}

							Current_state = STATE_WAIT ;
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <T2_SignalsAction+0x298>)
 8000bc8:	2203      	movs	r2, #3
 8000bca:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
						break ;
 8000bd2:	e036      	b.n	8000c42 <T2_SignalsAction+0x27e>

						case SIG_W8 :
							if (STATE_NORMAL==Previous_state)
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <T2_SignalsAction+0x226>
							{
								Car_IdleSignalFunc() ;
 8000bde:	f000 f9d5 	bl	8000f8c <Car_IdleSignalFunc>
								Current_state = STATE_NORMAL ;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <T2_SignalsAction+0x298>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e024      	b.n	8000c34 <T2_SignalsAction+0x270>
							}
							else if (STATE_RIGHT==Previous_state)
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10d      	bne.n	8000c10 <T2_SignalsAction+0x24c>
							{
								if (ENGINE_ENABLE==engine_state)
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <T2_SignalsAction+0x2a0>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d102      	bne.n	8000c04 <T2_SignalsAction+0x240>
								{
									Car_RightSignalFunc() ;
 8000bfe:	f000 f97b 	bl	8000ef8 <Car_RightSignalFunc>
 8000c02:	e001      	b.n	8000c08 <T2_SignalsAction+0x244>
								}
								else
								{
									Car_IdleSignalFunc() ;
 8000c04:	f000 f9c2 	bl	8000f8c <Car_IdleSignalFunc>
								}
								Current_state = STATE_RIGHT ;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <T2_SignalsAction+0x298>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e011      	b.n	8000c34 <T2_SignalsAction+0x270>
							}
							else if (STATE_LEFT==Previous_state)
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <T2_SignalsAction+0x2a4>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d10c      	bne.n	8000c34 <T2_SignalsAction+0x270>
							{
								if (ENGINE_ENABLE==engine_state)
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <T2_SignalsAction+0x2a0>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <T2_SignalsAction+0x266>
								{
									Car_LeftSignalFunc() ;
 8000c24:	f000 f97a 	bl	8000f1c <Car_LeftSignalFunc>
 8000c28:	e001      	b.n	8000c2e <T2_SignalsAction+0x26a>
								}
								else
								{
									Car_IdleSignalFunc() ;
 8000c2a:	f000 f9af 	bl	8000f8c <Car_IdleSignalFunc>
								}
								Current_state = STATE_LEFT ;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <T2_SignalsAction+0x298>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	701a      	strb	r2, [r3, #0]
							}
							transition = SIG_NONE ;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <T2_SignalsAction+0x29c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
						break ;
 8000c3a:	e002      	b.n	8000c42 <T2_SignalsAction+0x27e>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8000c3c:	f000 f9b8 	bl	8000fb0 <Car_NoneSignalFunc>
						break ;
 8000c40:	bf00      	nop
					}
					break ;
 8000c42:	e005      	b.n	8000c50 <T2_SignalsAction+0x28c>
					break ;
 8000c44:	bf00      	nop
 8000c46:	e004      	b.n	8000c52 <T2_SignalsAction+0x28e>
					break ;
 8000c48:	bf00      	nop
 8000c4a:	e002      	b.n	8000c52 <T2_SignalsAction+0x28e>
					break ;
 8000c4c:	bf00      	nop
 8000c4e:	e000      	b.n	8000c52 <T2_SignalsAction+0x28e>
					break ;
 8000c50:	bf00      	nop
			}

		vTaskDelay(250);
 8000c52:	20fa      	movs	r0, #250	; 0xfa
 8000c54:	f005 f91c 	bl	8005e90 <vTaskDelay>
		switch (Current_state)
 8000c58:	e6b8      	b.n	80009cc <T2_SignalsAction+0x8>
 8000c5a:	bf00      	nop
 8000c5c:	20000080 	.word	0x20000080
 8000c60:	20000082 	.word	0x20000082
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000081 	.word	0x20000081

08000c6c <T3_WhiteFrontLightFlashing>:
	}

}

void T3_WhiteFrontLightFlashing (void* pvarg)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	flashing_t flash_state = FLASHING_DISABLE ;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
	while (1)
	{
		if (xSemaphoreTake(flashing_smphr,portMAX_DELAY))
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <T3_WhiteFrontLightFlashing+0x34>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fd4d 	bl	8005720 <xQueueSemaphoreTake>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <T3_WhiteFrontLightFlashing+0x28>
		{
			flash_state ^= 0x01 ;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f083 0301 	eor.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
		}

		Car_FlashingFunc(flash_state) ;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f9ca 	bl	8001030 <Car_FlashingFunc>
		if (xSemaphoreTake(flashing_smphr,portMAX_DELAY))
 8000c9c:	e7ec      	b.n	8000c78 <T3_WhiteFrontLightFlashing+0xc>
 8000c9e:	bf00      	nop
 8000ca0:	20000084 	.word	0x20000084

08000ca4 <T4_HornBeeping>:
	}
}

void T4_HornBeeping (void* pvarg)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	horn_t horn_status = HORN_DISABLE ;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
	while (1)
	{
		if (xSemaphoreTake(horn_smphr,portMAX_DELAY))
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <T4_HornBeeping+0x34>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 fd31 	bl	8005720 <xQueueSemaphoreTake>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <T4_HornBeeping+0x28>
		{
			horn_status ^= 0x01 ;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
		}

		Car_Horn_Func(horn_status) ;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fa04 	bl	80010dc <Car_Horn_Func>
		if (xSemaphoreTake(horn_smphr,portMAX_DELAY))
 8000cd4:	e7ec      	b.n	8000cb0 <T4_HornBeeping+0xc>
 8000cd6:	bf00      	nop
 8000cd8:	20000088 	.word	0x20000088

08000cdc <T5_ChangeGear>:

	}
}

void T5_ChangeGear (void *pvarg)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(Gear_smphr,portMAX_DELAY))
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <T5_ChangeGear+0x4c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 fd17 	bl	8005720 <xQueueSemaphoreTake>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f5      	beq.n	8000ce4 <T5_ChangeGear+0x8>
		{
			if  (ENGINE_ENABLE==engine_state)
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <T5_ChangeGear+0x50>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <T5_ChangeGear+0x8>
			{
				gear_current ++ ;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <T5_ChangeGear+0x54>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <T5_ChangeGear+0x54>)
 8000d0c:	701a      	strb	r2, [r3, #0]

				if (GEAR_NONE==gear_current)
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <T5_ChangeGear+0x54>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d102      	bne.n	8000d1c <T5_ChangeGear+0x40>
				{
					gear_current = GEAR_N ;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <T5_ChangeGear+0x54>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
				}

				Car_Gear_Func (gear_current) ;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <T5_ChangeGear+0x54>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f9a3 	bl	800106c <Car_Gear_Func>
		if (xSemaphoreTake(Gear_smphr,portMAX_DELAY))
 8000d26:	e7dd      	b.n	8000ce4 <T5_ChangeGear+0x8>
 8000d28:	2000008c 	.word	0x2000008c
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	200000a0 	.word	0x200000a0

08000d34 <T6_IncSpeed>:

	}
}

void T6_IncSpeed (void *pvarg)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(speedInc_smphr,portMAX_DELAY))
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <T6_IncSpeed+0x60>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 fceb 	bl	8005720 <xQueueSemaphoreTake>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f5      	beq.n	8000d3c <T6_IncSpeed+0x8>
		{
			if  (ENGINE_ENABLE == engine_state)
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <T6_IncSpeed+0x64>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d118      	bne.n	8000d8c <T6_IncSpeed+0x58>
			{
				Motor_Speed+= 5 ;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <T6_IncSpeed+0x68>)
 8000d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	3305      	adds	r3, #5
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	b25a      	sxtb	r2, r3
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <T6_IncSpeed+0x68>)
 8000d6a:	701a      	strb	r2, [r3, #0]
				if (Motor_Speed>100)
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <T6_IncSpeed+0x68>)
 8000d6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d72:	2b64      	cmp	r3, #100	; 0x64
 8000d74:	dd02      	ble.n	8000d7c <T6_IncSpeed+0x48>
				{
					Motor_Speed = 100 ;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <T6_IncSpeed+0x68>)
 8000d78:	2264      	movs	r2, #100	; 0x64
 8000d7a:	701a      	strb	r2, [r3, #0]
				}
				HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <T6_IncSpeed+0x68>)
 8000d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fc01 	bl	800058c <HAL_DC_Motors_Set_Speed>
 8000d8a:	e7d7      	b.n	8000d3c <T6_IncSpeed+0x8>
			}
			else
			{
				Motor_Speed = SPEED_INIT_VALUE ;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <T6_IncSpeed+0x68>)
 8000d8e:	2237      	movs	r2, #55	; 0x37
 8000d90:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(speedInc_smphr,portMAX_DELAY))
 8000d92:	e7d3      	b.n	8000d3c <T6_IncSpeed+0x8>
 8000d94:	20000090 	.word	0x20000090
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000001 	.word	0x20000001

08000da0 <T7_BrakeWheel>:

	}
}

void T7_BrakeWheel (void *pvarg)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(brake_smphr,portMAX_DELAY))
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <T7_BrakeWheel+0x60>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 fcb5 	bl	8005720 <xQueueSemaphoreTake>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f5      	beq.n	8000da8 <T7_BrakeWheel+0x8>
		{
			if  (ENGINE_ENABLE==engine_state)
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <T7_BrakeWheel+0x64>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d118      	bne.n	8000df8 <T7_BrakeWheel+0x58>
			{
				Motor_Speed-= 5 ;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <T7_BrakeWheel+0x68>)
 8000dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	3b05      	subs	r3, #5
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <T7_BrakeWheel+0x68>)
 8000dd6:	701a      	strb	r2, [r3, #0]

				if (Motor_Speed<0)
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <T7_BrakeWheel+0x68>)
 8000dda:	f993 3000 	ldrsb.w	r3, [r3]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da02      	bge.n	8000de8 <T7_BrakeWheel+0x48>
				{
					Motor_Speed = 0 ;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <T7_BrakeWheel+0x68>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
				}

				HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <T7_BrakeWheel+0x68>)
 8000dea:	f993 3000 	ldrsb.w	r3, [r3]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fbcb 	bl	800058c <HAL_DC_Motors_Set_Speed>
 8000df6:	e7d7      	b.n	8000da8 <T7_BrakeWheel+0x8>
			}
			else
			{
				Motor_Speed = SPEED_INIT_VALUE ;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <T7_BrakeWheel+0x68>)
 8000dfa:	2237      	movs	r2, #55	; 0x37
 8000dfc:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(brake_smphr,portMAX_DELAY))
 8000dfe:	e7d3      	b.n	8000da8 <T7_BrakeWheel+0x8>
 8000e00:	20000094 	.word	0x20000094
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000001 	.word	0x20000001

08000e0c <T8_CarMoveRight>:

	}
}

void T8_CarMoveRight (void *pvarg)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(goRight_smphr,portMAX_DELAY))
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <T8_CarMoveRight+0x4c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fc7f 	bl	8005720 <xQueueSemaphoreTake>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f5      	beq.n	8000e14 <T8_CarMoveRight+0x8>
		{
			servo_angle += 9 ;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <T8_CarMoveRight+0x50>)
 8000e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3309      	adds	r3, #9
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	b25a      	sxtb	r2, r3
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <T8_CarMoveRight+0x50>)
 8000e38:	701a      	strb	r2, [r3, #0]

			if (servo_angle>45)
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <T8_CarMoveRight+0x50>)
 8000e3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e40:	2b2d      	cmp	r3, #45	; 0x2d
 8000e42:	dd02      	ble.n	8000e4a <T8_CarMoveRight+0x3e>
			{
				servo_angle = 45 ;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <T8_CarMoveRight+0x50>)
 8000e46:	222d      	movs	r2, #45	; 0x2d
 8000e48:	701a      	strb	r2, [r3, #0]
			}

			HAL_ServoMotor_Set_Angel(servo_angle) ;
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <T8_CarMoveRight+0x50>)
 8000e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fbb7 	bl	80005c4 <HAL_ServoMotor_Set_Angel>
		if (xSemaphoreTake(goRight_smphr,portMAX_DELAY))
 8000e56:	e7dd      	b.n	8000e14 <T8_CarMoveRight+0x8>
 8000e58:	20000098 	.word	0x20000098
 8000e5c:	200000a1 	.word	0x200000a1

08000e60 <T9_CarMoveLeft>:

		}
	}
}
void T9_CarMoveLeft (void *pvarg)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(goLeft_smphr,portMAX_DELAY))
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <T9_CarMoveLeft+0x50>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fc55 	bl	8005720 <xQueueSemaphoreTake>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f5      	beq.n	8000e68 <T9_CarMoveLeft+0x8>
		{
			servo_angle -= 9 ;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <T9_CarMoveLeft+0x54>)
 8000e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3b09      	subs	r3, #9
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <T9_CarMoveLeft+0x54>)
 8000e8c:	701a      	strb	r2, [r3, #0]

			if (servo_angle<-45)
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <T9_CarMoveLeft+0x54>)
 8000e90:	f993 3000 	ldrsb.w	r3, [r3]
 8000e94:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8000e98:	da02      	bge.n	8000ea0 <T9_CarMoveLeft+0x40>
			{
				servo_angle = -45 ;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <T9_CarMoveLeft+0x54>)
 8000e9c:	22d3      	movs	r2, #211	; 0xd3
 8000e9e:	701a      	strb	r2, [r3, #0]
			}

			HAL_ServoMotor_Set_Angel(servo_angle) ;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <T9_CarMoveLeft+0x54>)
 8000ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb8c 	bl	80005c4 <HAL_ServoMotor_Set_Angel>
		if (xSemaphoreTake(goLeft_smphr,portMAX_DELAY))
 8000eac:	e7dc      	b.n	8000e68 <T9_CarMoveLeft+0x8>
 8000eae:	bf00      	nop
 8000eb0:	2000009c 	.word	0x2000009c
 8000eb4:	200000a1 	.word	0x200000a1

08000eb8 <Car_EngineFunc>:
}


/*********************************** static function Implementation *********************************/
static void Car_EngineFunc(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	if (ENGINE_ENABLE==engine_state)
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <Car_EngineFunc+0x38>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <Car_EngineFunc+0x1c>
	{
		/* turn on engine indication led */
		HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <Car_EngineFunc+0x3c>)
 8000ece:	f001 fbfd 	bl	80026cc <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 8000ed2:	e00a      	b.n	8000eea <Car_EngineFunc+0x32>
	else if (ENGINE_DISABLE==engine_state)
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <Car_EngineFunc+0x38>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d105      	bne.n	8000eea <Car_EngineFunc+0x32>
		HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <Car_EngineFunc+0x3c>)
 8000ee6:	f001 fbf1 	bl	80026cc <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <Car_RightSignalFunc>:

static void Car_RightSignalFunc(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDS_YELLOW_RIGHT_SIDE) ;
 8000efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <Car_RightSignalFunc+0x20>)
 8000f02:	f001 fbfc 	bl	80026fe <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <Car_RightSignalFunc+0x20>)
 8000f0e:	f001 fbdd 	bl	80026cc <HAL_GPIO_WritePin>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020400 	.word	0x40020400

08000f1c <Car_LeftSignalFunc>:

static void Car_LeftSignalFunc(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDS_YELLOW_LEFT_SIDE) ;
 8000f20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <Car_LeftSignalFunc+0x20>)
 8000f26:	f001 fbea 	bl	80026fe <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <Car_LeftSignalFunc+0x20>)
 8000f32:	f001 fbcb 	bl	80026cc <HAL_GPIO_WritePin>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020400 	.word	0x40020400

08000f40 <Car_WaitSignalFunc>:

static void Car_WaitSignalFunc(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	if (0==sync_flag)
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <Car_WaitSignalFunc+0x44>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10e      	bne.n	8000f6c <Car_WaitSignalFunc+0x2c>
	{
		HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <Car_WaitSignalFunc+0x48>)
 8000f56:	f001 fbb9 	bl	80026cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <Car_WaitSignalFunc+0x48>)
 8000f62:	f001 fbb3 	bl	80026cc <HAL_GPIO_WritePin>
		sync_flag = 1 ;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <Car_WaitSignalFunc+0x44>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
	}
	/*Toggle Both Right and left signal leds */
	HAL_GPIO_TogglePin(LEDS_YELLOW_RIGHT_SIDE) ;
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <Car_WaitSignalFunc+0x48>)
 8000f72:	f001 fbc4 	bl	80026fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDS_YELLOW_LEFT_SIDE) ;
 8000f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7a:	4803      	ldr	r0, [pc, #12]	; (8000f88 <Car_WaitSignalFunc+0x48>)
 8000f7c:	f001 fbbf 	bl	80026fe <HAL_GPIO_TogglePin>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000083 	.word	0x20000083
 8000f88:	40020400 	.word	0x40020400

08000f8c <Car_IdleSignalFunc>:

static void Car_IdleSignalFunc(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	/*Turn off Right yellow signal leds*/
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <Car_IdleSignalFunc+0x20>)
 8000f98:	f001 fb98 	bl	80026cc <HAL_GPIO_WritePin>
	/*Turn on left yellow signal leds*/
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa2:	4802      	ldr	r0, [pc, #8]	; (8000fac <Car_IdleSignalFunc+0x20>)
 8000fa4:	f001 fb92 	bl	80026cc <HAL_GPIO_WritePin>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40020400 	.word	0x40020400

08000fb0 <Car_NoneSignalFunc>:

static void Car_NoneSignalFunc(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	switch (Current_state)
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <Car_NoneSignalFunc+0x74>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d82f      	bhi.n	800101e <Car_NoneSignalFunc+0x6e>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <Car_NoneSignalFunc+0x14>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000ffd 	.word	0x08000ffd
 8000fd0:	08001019 	.word	0x08001019
	{
		case STATE_NORMAL :
			Car_IdleSignalFunc() ;
 8000fd4:	f7ff ffda 	bl	8000f8c <Car_IdleSignalFunc>
			sync_flag = 0 ;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <Car_NoneSignalFunc+0x78>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
		break ;
 8000fde:	e01e      	b.n	800101e <Car_NoneSignalFunc+0x6e>

		case STATE_RIGHT :
			if (ENGINE_ENABLE==engine_state)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <Car_NoneSignalFunc+0x7c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <Car_NoneSignalFunc+0x40>
			{
				Car_RightSignalFunc() ;
 8000fea:	f7ff ff85 	bl	8000ef8 <Car_RightSignalFunc>
 8000fee:	e001      	b.n	8000ff4 <Car_NoneSignalFunc+0x44>
			}
			else
			{
				Car_IdleSignalFunc() ;
 8000ff0:	f7ff ffcc 	bl	8000f8c <Car_IdleSignalFunc>
			}
			sync_flag = 0 ;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <Car_NoneSignalFunc+0x78>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
		break ;
 8000ffa:	e010      	b.n	800101e <Car_NoneSignalFunc+0x6e>

		case SIG_LEFT :
			if (ENGINE_ENABLE==engine_state)
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Car_NoneSignalFunc+0x7c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <Car_NoneSignalFunc+0x5c>
			{
				Car_LeftSignalFunc() ;
 8001006:	f7ff ff89 	bl	8000f1c <Car_LeftSignalFunc>
 800100a:	e001      	b.n	8001010 <Car_NoneSignalFunc+0x60>
			}
			else
			{
				Car_IdleSignalFunc() ;
 800100c:	f7ff ffbe 	bl	8000f8c <Car_IdleSignalFunc>
			}
			sync_flag = 0 ;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <Car_NoneSignalFunc+0x78>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
		break ;
 8001016:	e002      	b.n	800101e <Car_NoneSignalFunc+0x6e>

		case SIG_W8 :
			Car_WaitSignalFunc() ;
 8001018:	f7ff ff92 	bl	8000f40 <Car_WaitSignalFunc>
		break ;
 800101c:	bf00      	nop
	}
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000080 	.word	0x20000080
 8001028:	20000083 	.word	0x20000083
 800102c:	20000000 	.word	0x20000000

08001030 <Car_FlashingFunc>:


static void Car_FlashingFunc (flashing_t state)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	if (FLASHING_DISABLE==state)
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d106      	bne.n	800104e <Car_FlashingFunc+0x1e>
	{
		HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING , GPIO_PIN_SET ) ;
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <Car_FlashingFunc+0x38>)
 8001048:	f001 fb40 	bl	80026cc <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 800104c:	e008      	b.n	8001060 <Car_FlashingFunc+0x30>
	else if(FLASHING_ENABLE==state)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <Car_FlashingFunc+0x30>
		HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING , GPIO_PIN_RESET ) ;
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <Car_FlashingFunc+0x38>)
 800105c:	f001 fb36 	bl	80026cc <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020400 	.word	0x40020400

0800106c <Car_Gear_Func>:


static void Car_Gear_Func (gear_t state)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	HAL_DC_Motors_Stop() ;
 8001076:	f7ff fa6d 	bl	8000554 <HAL_DC_Motors_Stop>
	Motor_Speed = SPEED_INIT_VALUE ;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <Car_Gear_Func+0x68>)
 800107c:	2237      	movs	r2, #55	; 0x37
 800107e:	701a      	strb	r2, [r3, #0]
	switch (state)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d016      	beq.n	80010b4 <Car_Gear_Func+0x48>
 8001086:	2b02      	cmp	r3, #2
 8001088:	dc1c      	bgt.n	80010c4 <Car_Gear_Func+0x58>
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <Car_Gear_Func+0x28>
 800108e:	2b01      	cmp	r3, #1
 8001090:	d008      	beq.n	80010a4 <Car_Gear_Func+0x38>
 8001092:	e017      	b.n	80010c4 <Car_Gear_Func+0x58>
	{
		case GEAR_N :
			HAL_DC_Motors_Stop() ;
 8001094:	f7ff fa5e 	bl	8000554 <HAL_DC_Motors_Stop>
			HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2102      	movs	r1, #2
 800109c:	480e      	ldr	r0, [pc, #56]	; (80010d8 <Car_Gear_Func+0x6c>)
 800109e:	f001 fb15 	bl	80026cc <HAL_GPIO_WritePin>
		break ;
 80010a2:	e012      	b.n	80010ca <Car_Gear_Func+0x5e>

		case GEAR_D :
			HAL_DC_Motors_Forward() ;
 80010a4:	f7ff fa32 	bl	800050c <HAL_DC_Motors_Forward>
			HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2102      	movs	r1, #2
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <Car_Gear_Func+0x6c>)
 80010ae:	f001 fb0d 	bl	80026cc <HAL_GPIO_WritePin>
		break ;
 80010b2:	e00a      	b.n	80010ca <Car_Gear_Func+0x5e>

		case GEAR_R :
			HAL_DC_Motors_Backword() ;
 80010b4:	f7ff fa3c 	bl	8000530 <HAL_DC_Motors_Backword>
			HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2102      	movs	r1, #2
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <Car_Gear_Func+0x6c>)
 80010be:	f001 fb05 	bl	80026cc <HAL_GPIO_WritePin>
		break ;
 80010c2:	e002      	b.n	80010ca <Car_Gear_Func+0x5e>

		default :
			HAL_DC_Motors_Stop() ;
 80010c4:	f7ff fa46 	bl	8000554 <HAL_DC_Motors_Stop>
		break ;
 80010c8:	bf00      	nop

	}
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000001 	.word	0x20000001
 80010d8:	40020400 	.word	0x40020400

080010dc <Car_Horn_Func>:


static void Car_Horn_Func (horn_t state)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	if (HORN_DISABLE==state)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <Car_Horn_Func+0x1c>
	{
		HAL_GPIO_WritePin(BUZZER_PIN , GPIO_PIN_SET ) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	2104      	movs	r1, #4
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <Car_Horn_Func+0x34>)
 80010f2:	f001 faeb 	bl	80026cc <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 80010f6:	e007      	b.n	8001108 <Car_Horn_Func+0x2c>
	else if(HORN_ENABLE==state)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d104      	bne.n	8001108 <Car_Horn_Func+0x2c>
		HAL_GPIO_WritePin(BUZZER_PIN , GPIO_PIN_RESET ) ;
 80010fe:	2200      	movs	r2, #0
 8001100:	2104      	movs	r1, #4
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <Car_Horn_Func+0x34>)
 8001104:	f001 fae2 	bl	80026cc <HAL_GPIO_WritePin>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40020400 	.word	0x40020400

08001114 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <vApplicationGetIdleTaskMemory+0x2c>)
 8001124:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <vApplicationGetIdleTaskMemory+0x30>)
 800112a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200000a8 	.word	0x200000a8
 8001144:	20000148 	.word	0x20000148

08001148 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_FREERTOS_Init+0x30>)
 8001150:	1d3c      	adds	r4, r7, #4
 8001152:	461d      	mov	r5, r3
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001158:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800115c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f004 f806 	bl	8005176 <osThreadCreate>
 800116a:	4603      	mov	r3, r0
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <MX_FREERTOS_Init+0x34>)
 800116e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	0800722c 	.word	0x0800722c
 800117c:	200000a4 	.word	0x200000a4

08001180 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f004 f840 	bl	800520e <osDelay>
 800118e:	e7fb      	b.n	8001188 <StartDefaultTask+0x8>

08001190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a40      	ldr	r2, [pc, #256]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <MX_GPIO_Init+0x158>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <MX_GPIO_Init+0x158>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a39      	ldr	r2, [pc, #228]	; (80012e8 <MX_GPIO_Init+0x158>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <MX_GPIO_Init+0x158>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <MX_GPIO_Init+0x158>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <MX_GPIO_Init+0x158>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <MX_GPIO_Init+0x158>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001232:	2200      	movs	r2, #0
 8001234:	211f      	movs	r1, #31
 8001236:	482d      	ldr	r0, [pc, #180]	; (80012ec <MX_GPIO_Init+0x15c>)
 8001238:	f001 fa48 	bl	80026cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	21a0      	movs	r1, #160	; 0xa0
 8001240:	482b      	ldr	r0, [pc, #172]	; (80012f0 <MX_GPIO_Init+0x160>)
 8001242:	f001 fa43 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001246:	2200      	movs	r2, #0
 8001248:	f24b 3107 	movw	r1, #45831	; 0xb307
 800124c:	4829      	ldr	r0, [pc, #164]	; (80012f4 <MX_GPIO_Init+0x164>)
 800124e:	f001 fa3d 	bl	80026cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001258:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4820      	ldr	r0, [pc, #128]	; (80012ec <MX_GPIO_Init+0x15c>)
 800126a:	f001 f89b 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800126e:	231f      	movs	r3, #31
 8001270:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4819      	ldr	r0, [pc, #100]	; (80012ec <MX_GPIO_Init+0x15c>)
 8001286:	f001 f88d 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_GPIO_Init+0x160>)
 80012a2:	f001 f87f 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80012a6:	f24b 3307 	movw	r3, #45831	; 0xb307
 80012aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_GPIO_Init+0x164>)
 80012c0:	f001 f870 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_GPIO_Init+0x164>)
 80012da:	f001 f863 	bl	80023a4 <HAL_GPIO_Init>

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 ff2d 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f899 	bl	8001438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f7ff ff43 	bl	8001190 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800130a:	f000 fd23 	bl	8001d54 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800130e:	f000 f9ed 	bl	80016ec <MX_TIM1_Init>
  MX_UART4_Init();
 8001312:	f000 fccb 	bl	8001cac <MX_UART4_Init>
  MX_TIM4_Init();
 8001316:	f000 fb35 	bl	8001984 <MX_TIM4_Init>
  MX_TIM2_Init();
 800131a:	f000 fa5f 	bl	80017dc <MX_TIM2_Init>
  MX_TIM3_Init();
 800131e:	f000 fabb 	bl	8001898 <MX_TIM3_Init>
  MX_UART5_Init();
 8001322:	f000 fced 	bl	8001d00 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001326:	f000 fd3f 	bl	8001da8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800132a:	f000 fd67 	bl	8001dfc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  RC_SystemInit() ;
 800132e:	f7ff f99b 	bl	8000668 <RC_SystemInit>
  xTaskCreate(&T1_UartReceive  				, "UART"     , 200 , NULL ,  9  , NULL   );
 8001332:	2300      	movs	r3, #0
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2309      	movs	r3, #9
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	22c8      	movs	r2, #200	; 0xc8
 800133e:	492c      	ldr	r1, [pc, #176]	; (80013f0 <main+0xf8>)
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <main+0xfc>)
 8001342:	f004 fc58 	bl	8005bf6 <xTaskCreate>
  xTaskCreate(&T2_SignalsAction				, "Signals"  , 200 , NULL ,  8  , NULL   );
 8001346:	2300      	movs	r3, #0
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2308      	movs	r3, #8
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	22c8      	movs	r2, #200	; 0xc8
 8001352:	4929      	ldr	r1, [pc, #164]	; (80013f8 <main+0x100>)
 8001354:	4829      	ldr	r0, [pc, #164]	; (80013fc <main+0x104>)
 8001356:	f004 fc4e 	bl	8005bf6 <xTaskCreate>
  xTaskCreate(&T3_WhiteFrontLightFlashing	, "flashing" , 200 , NULL ,  7  , NULL   );
 800135a:	2300      	movs	r3, #0
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2307      	movs	r3, #7
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	22c8      	movs	r2, #200	; 0xc8
 8001366:	4926      	ldr	r1, [pc, #152]	; (8001400 <main+0x108>)
 8001368:	4826      	ldr	r0, [pc, #152]	; (8001404 <main+0x10c>)
 800136a:	f004 fc44 	bl	8005bf6 <xTaskCreate>
  xTaskCreate(&T4_HornBeeping				, "Horn"	 , 200 , NULL ,  6  , NULL   ) ;
 800136e:	2300      	movs	r3, #0
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2306      	movs	r3, #6
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	22c8      	movs	r2, #200	; 0xc8
 800137a:	4923      	ldr	r1, [pc, #140]	; (8001408 <main+0x110>)
 800137c:	4823      	ldr	r0, [pc, #140]	; (800140c <main+0x114>)
 800137e:	f004 fc3a 	bl	8005bf6 <xTaskCreate>
  xTaskCreate(&T5_ChangeGear				, "Gear"	 , 200 , NULL ,  5  , NULL   ) ;
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	2305      	movs	r3, #5
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	22c8      	movs	r2, #200	; 0xc8
 800138e:	4920      	ldr	r1, [pc, #128]	; (8001410 <main+0x118>)
 8001390:	4820      	ldr	r0, [pc, #128]	; (8001414 <main+0x11c>)
 8001392:	f004 fc30 	bl	8005bf6 <xTaskCreate>
  xTaskCreate(&T6_IncSpeed				    , "Inc"	 	 , 200 , NULL ,  4  , NULL   ) ;
 8001396:	2300      	movs	r3, #0
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	2304      	movs	r3, #4
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	22c8      	movs	r2, #200	; 0xc8
 80013a2:	491d      	ldr	r1, [pc, #116]	; (8001418 <main+0x120>)
 80013a4:	481d      	ldr	r0, [pc, #116]	; (800141c <main+0x124>)
 80013a6:	f004 fc26 	bl	8005bf6 <xTaskCreate>
  xTaskCreate(&T7_BrakeWheel				, "brake"	 , 200 , NULL ,  3  , NULL   ) ;
 80013aa:	2300      	movs	r3, #0
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	2303      	movs	r3, #3
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	22c8      	movs	r2, #200	; 0xc8
 80013b6:	491a      	ldr	r1, [pc, #104]	; (8001420 <main+0x128>)
 80013b8:	481a      	ldr	r0, [pc, #104]	; (8001424 <main+0x12c>)
 80013ba:	f004 fc1c 	bl	8005bf6 <xTaskCreate>
  xTaskCreate(&T8_CarMoveRight				, "Right"	 , 200 , NULL ,  2  , NULL   ) ;
 80013be:	2300      	movs	r3, #0
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2302      	movs	r3, #2
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	22c8      	movs	r2, #200	; 0xc8
 80013ca:	4917      	ldr	r1, [pc, #92]	; (8001428 <main+0x130>)
 80013cc:	4817      	ldr	r0, [pc, #92]	; (800142c <main+0x134>)
 80013ce:	f004 fc12 	bl	8005bf6 <xTaskCreate>
  xTaskCreate(&T9_CarMoveLeft				, "left"	 , 200 , NULL ,  1  , NULL   ) ;
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	22c8      	movs	r2, #200	; 0xc8
 80013de:	4914      	ldr	r1, [pc, #80]	; (8001430 <main+0x138>)
 80013e0:	4814      	ldr	r0, [pc, #80]	; (8001434 <main+0x13c>)
 80013e2:	f004 fc08 	bl	8005bf6 <xTaskCreate>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80013e6:	f7ff feaf 	bl	8001148 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013ea:	f003 febd 	bl	8005168 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <main+0xf6>
 80013f0:	08007248 	.word	0x08007248
 80013f4:	08000771 	.word	0x08000771
 80013f8:	08007250 	.word	0x08007250
 80013fc:	080009c5 	.word	0x080009c5
 8001400:	08007258 	.word	0x08007258
 8001404:	08000c6d 	.word	0x08000c6d
 8001408:	08007264 	.word	0x08007264
 800140c:	08000ca5 	.word	0x08000ca5
 8001410:	0800726c 	.word	0x0800726c
 8001414:	08000cdd 	.word	0x08000cdd
 8001418:	08007274 	.word	0x08007274
 800141c:	08000d35 	.word	0x08000d35
 8001420:	08007278 	.word	0x08007278
 8001424:	08000da1 	.word	0x08000da1
 8001428:	08007280 	.word	0x08007280
 800142c:	08000e0d 	.word	0x08000e0d
 8001430:	08007288 	.word	0x08007288
 8001434:	08000e61 	.word	0x08000e61

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	; 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2234      	movs	r2, #52	; 0x34
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f005 fdf4 	bl	8007034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <SystemClock_Config+0xb4>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a21      	ldr	r2, [pc, #132]	; (80014ec <SystemClock_Config+0xb4>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <SystemClock_Config+0xb4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001478:	2300      	movs	r3, #0
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <SystemClock_Config+0xb8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001484:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <SystemClock_Config+0xb8>)
 8001486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <SystemClock_Config+0xb8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fcbe 	bl	8002e2c <HAL_RCC_OscConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014b6:	f000 f82f 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014be:	2301      	movs	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 f92d 	bl	8002734 <HAL_RCC_ClockConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80014e0:	f000 f81a 	bl	8001518 <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3750      	adds	r7, #80	; 0x50
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000

080014f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001506:	f000 fe4b 	bl	80021a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40002000 	.word	0x40002000

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_MspInit+0x54>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_MspInit+0x54>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x54>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_MspInit+0x54>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_MspInit+0x54>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_MspInit+0x54>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	210f      	movs	r1, #15
 8001566:	f06f 0001 	mvn.w	r0, #1
 800156a:	f000 fef1 	bl	8002350 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b33      	ldr	r3, [pc, #204]	; (8001660 <HAL_InitTick+0xe4>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a32      	ldr	r2, [pc, #200]	; (8001660 <HAL_InitTick+0xe4>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_InitTick+0xe4>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a8:	f107 0210 	add.w	r2, r7, #16
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 f9d8 	bl	8002968 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015c2:	f001 f9a9 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 80015c6:	6378      	str	r0, [r7, #52]	; 0x34
 80015c8:	e004      	b.n	80015d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015ca:	f001 f9a5 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 80015ce:	4603      	mov	r3, r0
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <HAL_InitTick+0xe8>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	3b01      	subs	r3, #1
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_InitTick+0xec>)
 80015e4:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_InitTick+0xf0>)
 80015e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_InitTick+0xec>)
 80015ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ee:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80015f0:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <HAL_InitTick+0xec>)
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_InitTick+0xec>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_InitTick+0xec>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_InitTick+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001608:	4817      	ldr	r0, [pc, #92]	; (8001668 <HAL_InitTick+0xec>)
 800160a:	f001 fead 	bl	8003368 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001614:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001618:	2b00      	cmp	r3, #0
 800161a:	d11b      	bne.n	8001654 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800161c:	4812      	ldr	r0, [pc, #72]	; (8001668 <HAL_InitTick+0xec>)
 800161e:	f001 fef3 	bl	8003408 <HAL_TIM_Base_Start_IT>
 8001622:	4603      	mov	r3, r0
 8001624:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001628:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800162c:	2b00      	cmp	r3, #0
 800162e:	d111      	bne.n	8001654 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001630:	202d      	movs	r0, #45	; 0x2d
 8001632:	f000 fea9 	bl	8002388 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d808      	bhi.n	800164e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	202d      	movs	r0, #45	; 0x2d
 8001642:	f000 fe85 	bl	8002350 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_InitTick+0xf4>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e002      	b.n	8001654 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001658:	4618      	mov	r0, r3
 800165a:	3738      	adds	r7, #56	; 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	431bde83 	.word	0x431bde83
 8001668:	20000348 	.word	0x20000348
 800166c:	40002000 	.word	0x40002000
 8001670:	20000008 	.word	0x20000008

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM1_CC_IRQHandler+0x10>)
 80016a6:	f002 f890 	bl	80037ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000390 	.word	0x20000390

080016b4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80016ba:	f002 f886 	bl	80037ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000348 	.word	0x20000348

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001708:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <MX_TIM1_Init+0xe8>)
 800170a:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <MX_TIM1_Init+0xec>)
 800170c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <MX_TIM1_Init+0xe8>)
 8001710:	2208      	movs	r2, #8
 8001712:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <MX_TIM1_Init+0xe8>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <MX_TIM1_Init+0xe8>)
 800171c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001720:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <MX_TIM1_Init+0xe8>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <MX_TIM1_Init+0xe8>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <MX_TIM1_Init+0xe8>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001734:	4827      	ldr	r0, [pc, #156]	; (80017d4 <MX_TIM1_Init+0xe8>)
 8001736:	f001 fff9 	bl	800372c <HAL_TIM_IC_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001740:	f7ff feea 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	4820      	ldr	r0, [pc, #128]	; (80017d4 <MX_TIM1_Init+0xe8>)
 8001754:	f002 ffbe 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800175e:	f7ff fedb 	bl	8001518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001766:	2301      	movs	r3, #1
 8001768:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	2200      	movs	r2, #0
 8001776:	4619      	mov	r1, r3
 8001778:	4816      	ldr	r0, [pc, #88]	; (80017d4 <MX_TIM1_Init+0xe8>)
 800177a:	f002 f916 	bl	80039aa <HAL_TIM_IC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001784:	f7ff fec8 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	2204      	movs	r2, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4811      	ldr	r0, [pc, #68]	; (80017d4 <MX_TIM1_Init+0xe8>)
 8001790:	f002 f90b 	bl	80039aa <HAL_TIM_IC_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800179a:	f7ff febd 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	2208      	movs	r2, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <MX_TIM1_Init+0xe8>)
 80017a6:	f002 f900 	bl	80039aa <HAL_TIM_IC_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80017b0:	f7ff feb2 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80017b4:	463b      	mov	r3, r7
 80017b6:	220c      	movs	r2, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <MX_TIM1_Init+0xe8>)
 80017bc:	f002 f8f5 	bl	80039aa <HAL_TIM_IC_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80017c6:	f7ff fea7 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000390 	.word	0x20000390
 80017d8:	40010000 	.word	0x40010000

080017dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017ec:	463b      	mov	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <MX_TIM2_Init+0xb8>)
 80017fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <MX_TIM2_Init+0xb8>)
 8001802:	2208      	movs	r2, #8
 8001804:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <MX_TIM2_Init+0xb8>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65434;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_TIM2_Init+0xb8>)
 800180e:	f64f 729a 	movw	r2, #65434	; 0xff9a
 8001812:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_TIM2_Init+0xb8>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_TIM2_Init+0xb8>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001820:	481c      	ldr	r0, [pc, #112]	; (8001894 <MX_TIM2_Init+0xb8>)
 8001822:	f001 ff83 	bl	800372c <HAL_TIM_IC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800182c:	f7ff fe74 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	4815      	ldr	r0, [pc, #84]	; (8001894 <MX_TIM2_Init+0xb8>)
 8001840:	f002 ff48 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800184a:	f7ff fe65 	bl	8001518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001852:	2301      	movs	r3, #1
 8001854:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <MX_TIM2_Init+0xb8>)
 8001866:	f002 f8a0 	bl	80039aa <HAL_TIM_IC_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001870:	f7ff fe52 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	2204      	movs	r2, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_TIM2_Init+0xb8>)
 800187c:	f002 f895 	bl	80039aa <HAL_TIM_IC_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001886:	f7ff fe47 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200003d8 	.word	0x200003d8

08001898 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	; 0x38
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 0320 	add.w	r3, r7, #32
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <MX_TIM3_Init+0xe4>)
 80018ca:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <MX_TIM3_Init+0xe8>)
 80018cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <MX_TIM3_Init+0xe4>)
 80018d0:	2208      	movs	r2, #8
 80018d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <MX_TIM3_Init+0xe4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <MX_TIM3_Init+0xe4>)
 80018dc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <MX_TIM3_Init+0xe4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <MX_TIM3_Init+0xe4>)
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ee:	4823      	ldr	r0, [pc, #140]	; (800197c <MX_TIM3_Init+0xe4>)
 80018f0:	f001 fd3a 	bl	8003368 <HAL_TIM_Base_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018fa:	f7ff fe0d 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001908:	4619      	mov	r1, r3
 800190a:	481c      	ldr	r0, [pc, #112]	; (800197c <MX_TIM3_Init+0xe4>)
 800190c:	f002 f9ac 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001916:	f7ff fdff 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800191a:	4818      	ldr	r0, [pc, #96]	; (800197c <MX_TIM3_Init+0xe4>)
 800191c:	f001 fde4 	bl	80034e8 <HAL_TIM_PWM_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001926:	f7ff fdf7 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001932:	f107 0320 	add.w	r3, r7, #32
 8001936:	4619      	mov	r1, r3
 8001938:	4810      	ldr	r0, [pc, #64]	; (800197c <MX_TIM3_Init+0xe4>)
 800193a:	f002 fecb 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001944:	f7ff fde8 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001948:	2360      	movs	r3, #96	; 0x60
 800194a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	4807      	ldr	r0, [pc, #28]	; (800197c <MX_TIM3_Init+0xe4>)
 8001960:	f002 f8c0 	bl	8003ae4 <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800196a:	f7ff fdd5 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800196e:	4803      	ldr	r0, [pc, #12]	; (800197c <MX_TIM3_Init+0xe4>)
 8001970:	f000 f93a 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001974:	bf00      	nop
 8001976:	3738      	adds	r7, #56	; 0x38
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000420 	.word	0x20000420
 8001980:	40000400 	.word	0x40000400

08001984 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	; 0x38
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	f107 0320 	add.w	r3, r7, #32
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	615a      	str	r2, [r3, #20]
 80019b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019b4:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <MX_TIM4_Init+0xe4>)
 80019b6:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <MX_TIM4_Init+0xe8>)
 80019b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <MX_TIM4_Init+0xe4>)
 80019bc:	2204      	movs	r2, #4
 80019be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <MX_TIM4_Init+0xe4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <MX_TIM4_Init+0xe4>)
 80019c8:	2264      	movs	r2, #100	; 0x64
 80019ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <MX_TIM4_Init+0xe4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <MX_TIM4_Init+0xe4>)
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019d8:	4823      	ldr	r0, [pc, #140]	; (8001a68 <MX_TIM4_Init+0xe4>)
 80019da:	f001 fcc5 	bl	8003368 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80019e4:	f7ff fd98 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f2:	4619      	mov	r1, r3
 80019f4:	481c      	ldr	r0, [pc, #112]	; (8001a68 <MX_TIM4_Init+0xe4>)
 80019f6:	f002 f937 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001a00:	f7ff fd8a 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a04:	4818      	ldr	r0, [pc, #96]	; (8001a68 <MX_TIM4_Init+0xe4>)
 8001a06:	f001 fd6f 	bl	80034e8 <HAL_TIM_PWM_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001a10:	f7ff fd82 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4619      	mov	r1, r3
 8001a22:	4811      	ldr	r0, [pc, #68]	; (8001a68 <MX_TIM4_Init+0xe4>)
 8001a24:	f002 fe56 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001a2e:	f7ff fd73 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a32:	2360      	movs	r3, #96	; 0x60
 8001a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_TIM4_Init+0xe4>)
 8001a4a:	f002 f84b 	bl	8003ae4 <HAL_TIM_PWM_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001a54:	f7ff fd60 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_TIM4_Init+0xe4>)
 8001a5a:	f000 f8c5 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001a5e:	bf00      	nop
 8001a60:	3738      	adds	r7, #56	; 0x38
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000468 	.word	0x20000468
 8001a6c:	40000800 	.word	0x40000800

08001a70 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a37      	ldr	r2, [pc, #220]	; (8001b6c <HAL_TIM_IC_MspInit+0xfc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d135      	bne.n	8001afe <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a35      	ldr	r2, [pc, #212]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001aca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4823      	ldr	r0, [pc, #140]	; (8001b74 <HAL_TIM_IC_MspInit+0x104>)
 8001ae8:	f000 fc5c 	bl	80023a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2105      	movs	r1, #5
 8001af0:	201b      	movs	r0, #27
 8001af2:	f000 fc2d 	bl	8002350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001af6:	201b      	movs	r0, #27
 8001af8:	f000 fc46 	bl	8002388 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001afc:	e031      	b.n	8001b62 <HAL_TIM_IC_MspInit+0xf2>
  else if(tim_icHandle->Instance==TIM2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b06:	d12c      	bne.n	8001b62 <HAL_TIM_IC_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6413      	str	r3, [r2, #64]	; 0x40
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_TIM_IC_MspInit+0x100>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001b40:	f248 0302 	movw	r3, #32770	; 0x8002
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b52:	2301      	movs	r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_TIM_IC_MspInit+0x104>)
 8001b5e:	f000 fc21 	bl	80023a4 <HAL_GPIO_Init>
}
 8001b62:	bf00      	nop
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <HAL_TIM_Base_MspInit+0x64>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10e      	bne.n	8001ba8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_TIM_Base_MspInit+0x68>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <HAL_TIM_Base_MspInit+0x68>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_TIM_Base_MspInit+0x68>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ba6:	e012      	b.n	8001bce <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <HAL_TIM_Base_MspInit+0x6c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10d      	bne.n	8001bce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_TIM_Base_MspInit+0x68>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_TIM_Base_MspInit+0x68>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_TIM_Base_MspInit+0x68>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40000800 	.word	0x40000800

08001be8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11e      	bne.n	8001c48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c26:	2340      	movs	r3, #64	; 0x40
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c36:	2302      	movs	r3, #2
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4817      	ldr	r0, [pc, #92]	; (8001ca0 <HAL_TIM_MspPostInit+0xb8>)
 8001c42:	f000 fbaf 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c46:	e022      	b.n	8001c8e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <HAL_TIM_MspPostInit+0xbc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11d      	bne.n	8001c8e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c6e:	2340      	movs	r3, #64	; 0x40
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <HAL_TIM_MspPostInit+0xc0>)
 8001c8a:	f000 fb8b 	bl	80023a4 <HAL_GPIO_Init>
}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40000800 	.word	0x40000800
 8001ca8:	40020400 	.word	0x40020400

08001cac <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_UART4_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cbc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001ce4:	f002 fd86 	bl	80047f4 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001cee:	f7ff fc13 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200004b0 	.word	0x200004b0
 8001cfc:	40004c00 	.word	0x40004c00

08001d00 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <MX_UART5_Init+0x50>)
 8001d08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d26:	220c      	movs	r2, #12
 8001d28:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_UART5_Init+0x4c>)
 8001d38:	f002 fd5c 	bl	80047f4 <HAL_UART_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001d42:	f7ff fbe9 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200004f8 	.word	0x200004f8
 8001d50:	40005000 	.word	0x40005000

08001d54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <MX_USART2_UART_Init+0x50>)
 8001d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d8c:	f002 fd32 	bl	80047f4 <HAL_UART_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d96:	f7ff fbbf 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000540 	.word	0x20000540
 8001da4:	40004400 	.word	0x40004400

08001da8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <MX_USART3_UART_Init+0x50>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_USART3_UART_Init+0x4c>)
 8001de0:	f002 fd08 	bl	80047f4 <HAL_UART_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dea:	f7ff fb95 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000588 	.word	0x20000588
 8001df8:	40004800 	.word	0x40004800

08001dfc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <MX_USART6_UART_Init+0x50>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_USART6_UART_Init+0x4c>)
 8001e34:	f002 fcde 	bl	80047f4 <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e3e:	f7ff fb6b 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200005d0 	.word	0x200005d0
 8001e4c:	40011400 	.word	0x40011400

08001e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	; 0x50
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a9c      	ldr	r2, [pc, #624]	; (80020e0 <HAL_UART_MspInit+0x290>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12d      	bne.n	8001ece <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e76:	4b9b      	ldr	r3, [pc, #620]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a9a      	ldr	r2, [pc, #616]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b98      	ldr	r3, [pc, #608]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
 8001e92:	4b94      	ldr	r3, [pc, #592]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a93      	ldr	r2, [pc, #588]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b91      	ldr	r3, [pc, #580]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001eaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4888      	ldr	r0, [pc, #544]	; (80020e8 <HAL_UART_MspInit+0x298>)
 8001ec8:	f000 fa6c 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ecc:	e104      	b.n	80020d8 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==UART5)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a86      	ldr	r2, [pc, #536]	; (80020ec <HAL_UART_MspInit+0x29c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d14b      	bne.n	8001f70 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
 8001edc:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	4a80      	ldr	r2, [pc, #512]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee8:	4b7e      	ldr	r3, [pc, #504]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	4b7a      	ldr	r3, [pc, #488]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a79      	ldr	r2, [pc, #484]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b77      	ldr	r3, [pc, #476]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f14:	4b73      	ldr	r3, [pc, #460]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4a72      	ldr	r2, [pc, #456]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f20:	4b70      	ldr	r3, [pc, #448]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4867      	ldr	r0, [pc, #412]	; (80020e8 <HAL_UART_MspInit+0x298>)
 8001f4a:	f000 fa2b 	bl	80023a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f5e:	2308      	movs	r3, #8
 8001f60:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f66:	4619      	mov	r1, r3
 8001f68:	4861      	ldr	r0, [pc, #388]	; (80020f0 <HAL_UART_MspInit+0x2a0>)
 8001f6a:	f000 fa1b 	bl	80023a4 <HAL_GPIO_Init>
}
 8001f6e:	e0b3      	b.n	80020d8 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <HAL_UART_MspInit+0x2a4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d12c      	bne.n	8001fd4 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	623b      	str	r3, [r7, #32]
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fca:	4619      	mov	r1, r3
 8001fcc:	484a      	ldr	r0, [pc, #296]	; (80020f8 <HAL_UART_MspInit+0x2a8>)
 8001fce:	f000 f9e9 	bl	80023a4 <HAL_GPIO_Init>
}
 8001fd2:	e081      	b.n	80020d8 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_UART_MspInit+0x2ac>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d14b      	bne.n	8002076 <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a3f      	ldr	r2, [pc, #252]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a38      	ldr	r2, [pc, #224]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_UART_MspInit+0x294>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <HAL_UART_MspInit+0x294>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a31      	ldr	r2, [pc, #196]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002032:	2320      	movs	r3, #32
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002042:	2307      	movs	r3, #7
 8002044:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800204a:	4619      	mov	r1, r3
 800204c:	4826      	ldr	r0, [pc, #152]	; (80020e8 <HAL_UART_MspInit+0x298>)
 800204e:	f000 f9a9 	bl	80023a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002064:	2307      	movs	r3, #7
 8002066:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800206c:	4619      	mov	r1, r3
 800206e:	4824      	ldr	r0, [pc, #144]	; (8002100 <HAL_UART_MspInit+0x2b0>)
 8002070:	f000 f998 	bl	80023a4 <HAL_GPIO_Init>
}
 8002074:	e030      	b.n	80020d8 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART6)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a22      	ldr	r2, [pc, #136]	; (8002104 <HAL_UART_MspInit+0x2b4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d12b      	bne.n	80020d8 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_UART_MspInit+0x294>)
 800208a:	f043 0320 	orr.w	r3, r3, #32
 800208e:	6453      	str	r3, [r2, #68]	; 0x44
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_UART_MspInit+0x294>)
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_UART_MspInit+0x294>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_UART_MspInit+0x294>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_UART_MspInit+0x294>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b8:	23c0      	movs	r3, #192	; 0xc0
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020c8:	2308      	movs	r3, #8
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020d0:	4619      	mov	r1, r3
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_UART_MspInit+0x298>)
 80020d4:	f000 f966 	bl	80023a4 <HAL_GPIO_Init>
}
 80020d8:	bf00      	nop
 80020da:	3750      	adds	r7, #80	; 0x50
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40004c00 	.word	0x40004c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40005000 	.word	0x40005000
 80020f0:	40020c00 	.word	0x40020c00
 80020f4:	40004400 	.word	0x40004400
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40004800 	.word	0x40004800
 8002100:	40020400 	.word	0x40020400
 8002104:	40011400 	.word	0x40011400

08002108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002140 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800210c:	f7ff fadc 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002112:	490d      	ldr	r1, [pc, #52]	; (8002148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002128:	4c0a      	ldr	r4, [pc, #40]	; (8002154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002136:	f004 ffdb 	bl	80070f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213a:	f7ff f8dd 	bl	80012f8 <main>
  bx  lr    
 800213e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800214c:	080072c0 	.word	0x080072c0
  ldr r2, =_sbss
 8002150:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002154:	200044d4 	.word	0x200044d4

08002158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC_IRQHandler>
	...

0800215c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <HAL_Init+0x40>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_Init+0x40>)
 8002172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_Init+0x40>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002184:	2003      	movs	r0, #3
 8002186:	f000 f8d8 	bl	800233a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218a:	200f      	movs	r0, #15
 800218c:	f7ff f9f6 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002190:	f7ff f9c8 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_IncTick+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x24>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_IncTick+0x24>)
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000000c 	.word	0x2000000c
 80021c4:	20000618 	.word	0x20000618

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000618 	.word	0x20000618

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff4c 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002362:	f7ff ff61 	bl	8002228 <__NVIC_GetPriorityGrouping>
 8002366:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	6978      	ldr	r0, [r7, #20]
 800236e:	f7ff ffb1 	bl	80022d4 <NVIC_EncodePriority>
 8002372:	4602      	mov	r2, r0
 8002374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff80 	bl	8002280 <__NVIC_SetPriority>
}
 8002380:	bf00      	nop
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff54 	bl	8002244 <__NVIC_EnableIRQ>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e165      	b.n	800268c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8154 	bne.w	8002686 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d005      	beq.n	80023f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d130      	bne.n	8002458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0201 	and.w	r2, r3, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b03      	cmp	r3, #3
 8002462:	d017      	beq.n	8002494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80ae 	beq.w	8002686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <HAL_GPIO_Init+0x300>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_GPIO_Init+0x304>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4f      	ldr	r2, [pc, #316]	; (80026ac <HAL_GPIO_Init+0x308>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d025      	beq.n	80025be <HAL_GPIO_Init+0x21a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01f      	beq.n	80025ba <HAL_GPIO_Init+0x216>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4d      	ldr	r2, [pc, #308]	; (80026b4 <HAL_GPIO_Init+0x310>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d019      	beq.n	80025b6 <HAL_GPIO_Init+0x212>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4c      	ldr	r2, [pc, #304]	; (80026b8 <HAL_GPIO_Init+0x314>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0x20e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <HAL_GPIO_Init+0x318>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00d      	beq.n	80025ae <HAL_GPIO_Init+0x20a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <HAL_GPIO_Init+0x31c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d007      	beq.n	80025aa <HAL_GPIO_Init+0x206>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a49      	ldr	r2, [pc, #292]	; (80026c4 <HAL_GPIO_Init+0x320>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_GPIO_Init+0x202>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00c      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025a6:	2307      	movs	r3, #7
 80025a8:	e00a      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4935      	ldr	r1, [pc, #212]	; (80026a8 <HAL_GPIO_Init+0x304>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <HAL_GPIO_Init+0x324>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002602:	4a31      	ldr	r2, [pc, #196]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002632:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002656:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002680:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f ae96 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40013c00 	.word	0x40013c00

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e8:	e003      	b.n	80026f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	619a      	str	r2, [r3, #24]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4013      	ands	r3, r2
 8002716:	041a      	lsls	r2, r3, #16
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43d9      	mvns	r1, r3
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	400b      	ands	r3, r1
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0cc      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d90c      	bls.n	8002770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d044      	beq.n	8002854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e067      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4934      	ldr	r1, [pc, #208]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7ff fcd0 	bl	80021c8 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7ff fccc 	bl	80021c8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e04f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d20c      	bcs.n	800287c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f887 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fe4e 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023c00 	.word	0x40023c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08007298 	.word	0x08007298
 80028f8:	20000004 	.word	0x20000004
 80028fc:	20000008 	.word	0x20000008

08002900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCC_GetHCLKFreq+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000004 	.word	0x20000004

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800291c:	f7ff fff0 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0a9b      	lsrs	r3, r3, #10
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	080072a8 	.word	0x080072a8

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002944:	f7ff ffdc 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0b5b      	lsrs	r3, r3, #13
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	080072a8 	.word	0x080072a8

08002968 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	220f      	movs	r2, #15
 8002976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_GetClockConfig+0x5c>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_GetClockConfig+0x5c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	08db      	lsrs	r3, r3, #3
 80029a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_RCC_GetClockConfig+0x60>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 020f 	and.w	r2, r3, #15
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	601a      	str	r2, [r3, #0]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40023c00 	.word	0x40023c00

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b0ae      	sub	sp, #184	; 0xb8
 80029d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f2:	4bcb      	ldr	r3, [pc, #812]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	f200 8206 	bhi.w	8002e0c <HAL_RCC_GetSysClockFreq+0x440>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a3d 	.word	0x08002a3d
 8002a0c:	08002e0d 	.word	0x08002e0d
 8002a10:	08002e0d 	.word	0x08002e0d
 8002a14:	08002e0d 	.word	0x08002e0d
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002e0d 	.word	0x08002e0d
 8002a20:	08002e0d 	.word	0x08002e0d
 8002a24:	08002e0d 	.word	0x08002e0d
 8002a28:	08002a4d 	.word	0x08002a4d
 8002a2c:	08002e0d 	.word	0x08002e0d
 8002a30:	08002e0d 	.word	0x08002e0d
 8002a34:	08002e0d 	.word	0x08002e0d
 8002a38:	08002c3d 	.word	0x08002c3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a3c:	4bb9      	ldr	r3, [pc, #740]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a42:	e1e7      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a44:	4bb8      	ldr	r3, [pc, #736]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a4a:	e1e3      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4c:	4bb4      	ldr	r3, [pc, #720]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a58:	4bb1      	ldr	r3, [pc, #708]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d071      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a64:	4bae      	ldr	r3, [pc, #696]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a70:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	f04f 0000 	mov.w	r0, #0
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	0159      	lsls	r1, r3, #5
 8002a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9c:	0150      	lsls	r0, r2, #5
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	1a51      	subs	r1, r2, r1
 8002aa6:	6439      	str	r1, [r7, #64]	; 0x40
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002abc:	4649      	mov	r1, r9
 8002abe:	018b      	lsls	r3, r1, #6
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	018a      	lsls	r2, r1, #6
 8002aca:	4641      	mov	r1, r8
 8002acc:	1a51      	subs	r1, r2, r1
 8002ace:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	00cb      	lsls	r3, r1, #3
 8002ae8:	4641      	mov	r1, r8
 8002aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aee:	4641      	mov	r1, r8
 8002af0:	00ca      	lsls	r2, r1, #3
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	4622      	mov	r2, r4
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
 8002afe:	462b      	mov	r3, r5
 8002b00:	460a      	mov	r2, r1
 8002b02:	eb42 0303 	adc.w	r3, r2, r3
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b14:	4629      	mov	r1, r5
 8002b16:	024b      	lsls	r3, r1, #9
 8002b18:	4621      	mov	r1, r4
 8002b1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b1e:	4621      	mov	r1, r4
 8002b20:	024a      	lsls	r2, r1, #9
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b38:	f7fd fb6a 	bl	8000210 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b46:	e067      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b48:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b62:	2300      	movs	r3, #0
 8002b64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	462b      	mov	r3, r5
 8002b6e:	f04f 0000 	mov.w	r0, #0
 8002b72:	f04f 0100 	mov.w	r1, #0
 8002b76:	0159      	lsls	r1, r3, #5
 8002b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7c:	0150      	lsls	r0, r2, #5
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4621      	mov	r1, r4
 8002b84:	1a51      	subs	r1, r2, r1
 8002b86:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b88:	4629      	mov	r1, r5
 8002b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	018b      	lsls	r3, r1, #6
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba6:	4641      	mov	r1, r8
 8002ba8:	018a      	lsls	r2, r1, #6
 8002baa:	4641      	mov	r1, r8
 8002bac:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bca:	4692      	mov	sl, r2
 8002bcc:	469b      	mov	fp, r3
 8002bce:	4623      	mov	r3, r4
 8002bd0:	eb1a 0303 	adds.w	r3, sl, r3
 8002bd4:	623b      	str	r3, [r7, #32]
 8002bd6:	462b      	mov	r3, r5
 8002bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bea:	4629      	mov	r1, r5
 8002bec:	028b      	lsls	r3, r1, #10
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	028a      	lsls	r2, r1, #10
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c00:	2200      	movs	r2, #0
 8002c02:	673b      	str	r3, [r7, #112]	; 0x70
 8002c04:	677a      	str	r2, [r7, #116]	; 0x74
 8002c06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c0a:	f7fd fb01 	bl	8000210 <__aeabi_uldivmod>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4613      	mov	r3, r2
 8002c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c18:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c3a:	e0eb      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d06b      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c54:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c66:	663b      	str	r3, [r7, #96]	; 0x60
 8002c68:	2300      	movs	r3, #0
 8002c6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c70:	4622      	mov	r2, r4
 8002c72:	462b      	mov	r3, r5
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	0159      	lsls	r1, r3, #5
 8002c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c82:	0150      	lsls	r0, r2, #5
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4621      	mov	r1, r4
 8002c8a:	1a51      	subs	r1, r2, r1
 8002c8c:	61b9      	str	r1, [r7, #24]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	eb63 0301 	sbc.w	r3, r3, r1
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	018b      	lsls	r3, r1, #6
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cac:	4651      	mov	r1, sl
 8002cae:	018a      	lsls	r2, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	eb63 0901 	sbc.w	r9, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ccc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd0:	4690      	mov	r8, r2
 8002cd2:	4699      	mov	r9, r3
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	eb18 0303 	adds.w	r3, r8, r3
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	462b      	mov	r3, r5
 8002cde:	eb49 0303 	adc.w	r3, r9, r3
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	024b      	lsls	r3, r1, #9
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	024a      	lsls	r2, r1, #9
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d06:	2200      	movs	r2, #0
 8002d08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d10:	f7fd fa7e 	bl	8000210 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d1e:	e065      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x420>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2c:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	2200      	movs	r2, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	4611      	mov	r1, r2
 8002d38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d3c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d3e:	2300      	movs	r3, #0
 8002d40:	657b      	str	r3, [r7, #84]	; 0x54
 8002d42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d46:	4642      	mov	r2, r8
 8002d48:	464b      	mov	r3, r9
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	0159      	lsls	r1, r3, #5
 8002d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d58:	0150      	lsls	r0, r2, #5
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4641      	mov	r1, r8
 8002d60:	1a51      	subs	r1, r2, r1
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	4649      	mov	r1, r9
 8002d66:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d78:	4659      	mov	r1, fp
 8002d7a:	018b      	lsls	r3, r1, #6
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d82:	4651      	mov	r1, sl
 8002d84:	018a      	lsls	r2, r1, #6
 8002d86:	4651      	mov	r1, sl
 8002d88:	1a54      	subs	r4, r2, r1
 8002d8a:	4659      	mov	r1, fp
 8002d8c:	eb63 0501 	sbc.w	r5, r3, r1
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	00eb      	lsls	r3, r5, #3
 8002d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9e:	00e2      	lsls	r2, r4, #3
 8002da0:	4614      	mov	r4, r2
 8002da2:	461d      	mov	r5, r3
 8002da4:	4643      	mov	r3, r8
 8002da6:	18e3      	adds	r3, r4, r3
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb45 0303 	adc.w	r3, r5, r3
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	028b      	lsls	r3, r1, #10
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc8:	4621      	mov	r1, r4
 8002dca:	028a      	lsls	r2, r1, #10
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dde:	f7fd fa17 	bl	8000210 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4613      	mov	r3, r2
 8002de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0f1b      	lsrs	r3, r3, #28
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e0a:	e003      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	37b8      	adds	r7, #184	; 0xb8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400

08002e2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e28d      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8083 	beq.w	8002f52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e4c:	4b94      	ldr	r3, [pc, #592]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d019      	beq.n	8002e8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e58:	4b91      	ldr	r3, [pc, #580]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e64:	4b8e      	ldr	r3, [pc, #568]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e70:	d00c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4b8b      	ldr	r3, [pc, #556]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d112      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	4b84      	ldr	r3, [pc, #528]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d05b      	beq.n	8002f50 <HAL_RCC_OscConfig+0x124>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d157      	bne.n	8002f50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e25a      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x90>
 8002eae:	4b7c      	ldr	r3, [pc, #496]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a7b      	ldr	r2, [pc, #492]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e01d      	b.n	8002ef8 <HAL_RCC_OscConfig+0xcc>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xb4>
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b73      	ldr	r3, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a72      	ldr	r2, [pc, #456]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0xcc>
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a6b      	ldr	r2, [pc, #428]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7ff f962 	bl	80021c8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7ff f95e 	bl	80021c8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e21f      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0xdc>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7ff f94e 	bl	80021c8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7ff f94a 	bl	80021c8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e20b      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x104>
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06f      	beq.n	800303e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f5e:	4b50      	ldr	r3, [pc, #320]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d017      	beq.n	8002f9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f6a:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f76:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x186>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1d3      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4937      	ldr	r1, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	e03a      	b.n	800303e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCC_OscConfig+0x278>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7ff f8f7 	bl	80021c8 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7ff f8f3 	bl	80021c8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1b4      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4925      	ldr	r1, [pc, #148]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
 8003010:	e015      	b.n	800303e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_RCC_OscConfig+0x278>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7ff f8d6 	bl	80021c8 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003020:	f7ff f8d2 	bl	80021c8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e193      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d036      	beq.n	80030b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_RCC_OscConfig+0x27c>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7ff f8b6 	bl	80021c8 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003060:	f7ff f8b2 	bl	80021c8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e173      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x234>
 800307e:	e01b      	b.n	80030b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_OscConfig+0x27c>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7ff f89f 	bl	80021c8 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	e00e      	b.n	80030ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7ff f89b 	bl	80021c8 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d907      	bls.n	80030ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e15c      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	42470000 	.word	0x42470000
 80030a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b8a      	ldr	r3, [pc, #552]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ea      	bne.n	800308e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8097 	beq.w	80031f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b83      	ldr	r3, [pc, #524]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	4b7f      	ldr	r3, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a7e      	ldr	r2, [pc, #504]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b7c      	ldr	r3, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b79      	ldr	r3, [pc, #484]	; (80032dc <HAL_RCC_OscConfig+0x4b0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x4b0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x4b0>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7ff f85b 	bl	80021c8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7ff f857 	bl	80021c8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e118      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x4b0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x31e>
 800313c:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	e01c      	b.n	8003184 <HAL_RCC_OscConfig+0x358>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x340>
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a60      	ldr	r2, [pc, #384]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	4b5e      	ldr	r3, [pc, #376]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a5d      	ldr	r2, [pc, #372]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0x358>
 800316c:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a59      	ldr	r2, [pc, #356]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
 8003178:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a56      	ldr	r2, [pc, #344]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800317e:	f023 0304 	bic.w	r3, r3, #4
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7ff f81c 	bl	80021c8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7ff f818 	bl	80021c8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0d7      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	4b4b      	ldr	r3, [pc, #300]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0ee      	beq.n	8003194 <HAL_RCC_OscConfig+0x368>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7ff f806 	bl	80021c8 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7ff f802 	bl	80021c8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0c1      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d6:	4b40      	ldr	r3, [pc, #256]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ee      	bne.n	80031c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80ad 	beq.w	8003358 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fe:	4b36      	ldr	r3, [pc, #216]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b08      	cmp	r3, #8
 8003208:	d060      	beq.n	80032cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d145      	bne.n	800329e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <HAL_RCC_OscConfig+0x4b4>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe ffd6 	bl	80021c8 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe ffd2 	bl	80021c8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e093      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	3b01      	subs	r3, #1
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	061b      	lsls	r3, r3, #24
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	071b      	lsls	r3, r3, #28
 800326a:	491b      	ldr	r1, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x4b4>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe ffa7 	bl	80021c8 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe ffa3 	bl	80021c8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e064      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x452>
 800329c:	e05c      	b.n	8003358 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_RCC_OscConfig+0x4b4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe ff90 	bl	80021c8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe ff8c 	bl	80021c8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e04d      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x480>
 80032ca:	e045      	b.n	8003358 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e040      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40007000 	.word	0x40007000
 80032e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e4:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_RCC_OscConfig+0x538>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d030      	beq.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d129      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d122      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800331a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331c:	4293      	cmp	r3, r2
 800331e:	d119      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	3b01      	subs	r3, #1
 800332e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d10f      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e041      	b.n	80033fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe fbf2 	bl	8001b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 fd4e 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d001      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e04e      	b.n	80034be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a23      	ldr	r2, [pc, #140]	; (80034cc <HAL_TIM_Base_Start_IT+0xc4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d022      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x80>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344a:	d01d      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x80>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d018      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x80>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x80>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x80>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x80>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x80>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d111      	bne.n	80034ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b06      	cmp	r3, #6
 8003498:	d010      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034aa:	e007      	b.n	80034bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40010400 	.word	0x40010400
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40001800 	.word	0x40001800

080034e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e041      	b.n	800357e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f839 	bl	8003586 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f000 fc8e 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_TIM_PWM_Start+0x24>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e022      	b.n	8003606 <HAL_TIM_PWM_Start+0x6a>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d109      	bne.n	80035da <HAL_TIM_PWM_Start+0x3e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e015      	b.n	8003606 <HAL_TIM_PWM_Start+0x6a>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d109      	bne.n	80035f4 <HAL_TIM_PWM_Start+0x58>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e008      	b.n	8003606 <HAL_TIM_PWM_Start+0x6a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e07c      	b.n	8003708 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0x82>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	e013      	b.n	8003646 <HAL_TIM_PWM_Start+0xaa>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0x92>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	e00b      	b.n	8003646 <HAL_TIM_PWM_Start+0xaa>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d104      	bne.n	800363e <HAL_TIM_PWM_Start+0xa2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800363c:	e003      	b.n	8003646 <HAL_TIM_PWM_Start+0xaa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2201      	movs	r2, #1
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f001 f81a 	bl	8004688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <HAL_TIM_PWM_Start+0x174>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_TIM_PWM_Start+0xcc>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <HAL_TIM_PWM_Start+0x178>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_TIM_PWM_Start+0xd0>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_TIM_PWM_Start+0xd2>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a22      	ldr	r2, [pc, #136]	; (8003710 <HAL_TIM_PWM_Start+0x174>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_TIM_PWM_Start+0x136>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d01d      	beq.n	80036d2 <HAL_TIM_PWM_Start+0x136>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_TIM_PWM_Start+0x17c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_TIM_PWM_Start+0x136>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_TIM_PWM_Start+0x180>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_TIM_PWM_Start+0x136>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_TIM_PWM_Start+0x184>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIM_PWM_Start+0x136>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_TIM_PWM_Start+0x178>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_TIM_PWM_Start+0x136>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a18      	ldr	r2, [pc, #96]	; (8003724 <HAL_TIM_PWM_Start+0x188>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIM_PWM_Start+0x136>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a16      	ldr	r2, [pc, #88]	; (8003728 <HAL_TIM_PWM_Start+0x18c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d111      	bne.n	80036f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d010      	beq.n	8003706 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	e007      	b.n	8003706 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40010000 	.word	0x40010000
 8003714:	40010400 	.word	0x40010400
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40014000 	.word	0x40014000
 8003728:	40001800 	.word	0x40001800

0800372c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e041      	b.n	80037c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe f98c 	bl	8001a70 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fb6c 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01b      	beq.n	800382e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0202 	mvn.w	r2, #2
 80037fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 faf8 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 800381a:	e005      	b.n	8003828 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 faea 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fafb 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01b      	beq.n	800387a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f06f 0204 	mvn.w	r2, #4
 800384a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fad2 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003866:	e005      	b.n	8003874 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fac4 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fad5 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01b      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0208 	mvn.w	r2, #8
 8003896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2204      	movs	r2, #4
 800389c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 faac 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 80038b2:	e005      	b.n	80038c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fa9e 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 faaf 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01b      	beq.n	8003912 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0210 	mvn.w	r2, #16
 80038e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2208      	movs	r2, #8
 80038e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fa86 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 80038fe:	e005      	b.n	800390c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa78 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa89 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00c      	beq.n	8003936 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f06f 0201 	mvn.w	r2, #1
 800392e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd fddf 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00c      	beq.n	800395a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 ff43 	bl	80047e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00c      	beq.n	800397e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fa5a 	bl	8003e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00c      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f06f 0220 	mvn.w	r2, #32
 800399a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 ff15 	bl	80047cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e088      	b.n	8003ada <HAL_TIM_IC_ConfigChannel+0x130>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11b      	bne.n	8003a0e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80039e6:	f000 fc8b 	bl	8004300 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 020c 	bic.w	r2, r2, #12
 80039f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6999      	ldr	r1, [r3, #24]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	619a      	str	r2, [r3, #24]
 8003a0c:	e060      	b.n	8003ad0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d11c      	bne.n	8003a4e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003a24:	f000 fd0f 	bl	8004446 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a36:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	619a      	str	r2, [r3, #24]
 8003a4c:	e040      	b.n	8003ad0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d11b      	bne.n	8003a8c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003a64:	f000 fd5c 	bl	8004520 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020c 	bic.w	r2, r2, #12
 8003a76:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69d9      	ldr	r1, [r3, #28]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	61da      	str	r2, [r3, #28]
 8003a8a:	e021      	b.n	8003ad0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d11c      	bne.n	8003acc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003aa2:	f000 fd79 	bl	8004598 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ab4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69d9      	ldr	r1, [r3, #28]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	021a      	lsls	r2, r3, #8
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	61da      	str	r2, [r3, #28]
 8003aca:	e001      	b.n	8003ad0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e0ae      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	f200 809f 	bhi.w	8003c50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b4d 	.word	0x08003b4d
 8003b1c:	08003c51 	.word	0x08003c51
 8003b20:	08003c51 	.word	0x08003c51
 8003b24:	08003c51 	.word	0x08003c51
 8003b28:	08003b8d 	.word	0x08003b8d
 8003b2c:	08003c51 	.word	0x08003c51
 8003b30:	08003c51 	.word	0x08003c51
 8003b34:	08003c51 	.word	0x08003c51
 8003b38:	08003bcf 	.word	0x08003bcf
 8003b3c:	08003c51 	.word	0x08003c51
 8003b40:	08003c51 	.word	0x08003c51
 8003b44:	08003c51 	.word	0x08003c51
 8003b48:	08003c0f 	.word	0x08003c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fa24 	bl	8003fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0208 	orr.w	r2, r2, #8
 8003b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6999      	ldr	r1, [r3, #24]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	619a      	str	r2, [r3, #24]
      break;
 8003b8a:	e064      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fa74 	bl	8004080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6999      	ldr	r1, [r3, #24]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	021a      	lsls	r2, r3, #8
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	619a      	str	r2, [r3, #24]
      break;
 8003bcc:	e043      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fac9 	bl	800416c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0208 	orr.w	r2, r2, #8
 8003be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0204 	bic.w	r2, r2, #4
 8003bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69d9      	ldr	r1, [r3, #28]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	61da      	str	r2, [r3, #28]
      break;
 8003c0c:	e023      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fb1d 	bl	8004254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	021a      	lsls	r2, r3, #8
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	61da      	str	r2, [r3, #28]
      break;
 8003c4e:	e002      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
      break;
 8003c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_TIM_ConfigClockSource+0x1c>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0b4      	b.n	8003dee <HAL_TIM_ConfigClockSource+0x186>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbc:	d03e      	beq.n	8003d3c <HAL_TIM_ConfigClockSource+0xd4>
 8003cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc2:	f200 8087 	bhi.w	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	f000 8086 	beq.w	8003dda <HAL_TIM_ConfigClockSource+0x172>
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d87f      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b70      	cmp	r3, #112	; 0x70
 8003cd6:	d01a      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0xa6>
 8003cd8:	2b70      	cmp	r3, #112	; 0x70
 8003cda:	d87b      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b60      	cmp	r3, #96	; 0x60
 8003cde:	d050      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ce0:	2b60      	cmp	r3, #96	; 0x60
 8003ce2:	d877      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b50      	cmp	r3, #80	; 0x50
 8003ce6:	d03c      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ce8:	2b50      	cmp	r3, #80	; 0x50
 8003cea:	d873      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d058      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x13a>
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d86f      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b30      	cmp	r3, #48	; 0x30
 8003cf6:	d064      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf8:	2b30      	cmp	r3, #48	; 0x30
 8003cfa:	d86b      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d060      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d867      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05c      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d05a      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d0c:	e062      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d1e:	f000 fc93 	bl	8004648 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	609a      	str	r2, [r3, #8]
      break;
 8003d3a:	e04f      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	f000 fc7c 	bl	8004648 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5e:	609a      	str	r2, [r3, #8]
      break;
 8003d60:	e03c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f000 fb3a 	bl	80043e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2150      	movs	r1, #80	; 0x50
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fc49 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 8003d80:	e02c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 fb96 	bl	80044c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2160      	movs	r1, #96	; 0x60
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fc39 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 8003da0:	e01c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 fb1a 	bl	80043e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2140      	movs	r1, #64	; 0x40
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fc29 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e00c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f000 fc20 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 8003dd2:	e003      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e000      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a46      	ldr	r2, [pc, #280]	; (8003f74 <TIM_Base_SetConfig+0x12c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d00f      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a43      	ldr	r2, [pc, #268]	; (8003f78 <TIM_Base_SetConfig+0x130>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a42      	ldr	r2, [pc, #264]	; (8003f7c <TIM_Base_SetConfig+0x134>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a41      	ldr	r2, [pc, #260]	; (8003f80 <TIM_Base_SetConfig+0x138>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a40      	ldr	r2, [pc, #256]	; (8003f84 <TIM_Base_SetConfig+0x13c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a35      	ldr	r2, [pc, #212]	; (8003f74 <TIM_Base_SetConfig+0x12c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02b      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea8:	d027      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a32      	ldr	r2, [pc, #200]	; (8003f78 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d023      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a31      	ldr	r2, [pc, #196]	; (8003f7c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01f      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01b      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d017      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2e      	ldr	r2, [pc, #184]	; (8003f88 <TIM_Base_SetConfig+0x140>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <TIM_Base_SetConfig+0x144>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <TIM_Base_SetConfig+0x148>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <TIM_Base_SetConfig+0x14c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <TIM_Base_SetConfig+0x150>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <TIM_Base_SetConfig+0x154>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <TIM_Base_SetConfig+0x12c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_Base_SetConfig+0xf8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <TIM_Base_SetConfig+0x13c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d103      	bne.n	8003f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]
  }
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800
 8003f94:	40001800 	.word	0x40001800
 8003f98:	40001c00 	.word	0x40001c00
 8003f9c:	40002000 	.word	0x40002000

08003fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f023 0201 	bic.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 0302 	bic.w	r3, r3, #2
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a20      	ldr	r2, [pc, #128]	; (8004078 <TIM_OC1_SetConfig+0xd8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_OC1_SetConfig+0x64>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <TIM_OC1_SetConfig+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10c      	bne.n	800401e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0308 	bic.w	r3, r3, #8
 800400a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <TIM_OC1_SetConfig+0xd8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC1_SetConfig+0x8e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <TIM_OC1_SetConfig+0xdc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40010000 	.word	0x40010000
 800407c:	40010400 	.word	0x40010400

08004080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f023 0210 	bic.w	r2, r3, #16
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0320 	bic.w	r3, r3, #32
 80040ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a22      	ldr	r2, [pc, #136]	; (8004164 <TIM_OC2_SetConfig+0xe4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC2_SetConfig+0x68>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <TIM_OC2_SetConfig+0xe8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10d      	bne.n	8004104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_OC2_SetConfig+0xe4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC2_SetConfig+0x94>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <TIM_OC2_SetConfig+0xe8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d113      	bne.n	800413c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800411a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40010400 	.word	0x40010400

0800416c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <TIM_OC3_SetConfig+0xe0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x66>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a20      	ldr	r2, [pc, #128]	; (8004250 <TIM_OC3_SetConfig+0xe4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a16      	ldr	r2, [pc, #88]	; (800424c <TIM_OC3_SetConfig+0xe0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0x92>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <TIM_OC3_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40010000 	.word	0x40010000
 8004250:	40010400 	.word	0x40010400

08004254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <TIM_OC4_SetConfig+0xa4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC4_SetConfig+0x68>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a11      	ldr	r2, [pc, #68]	; (80042fc <TIM_OC4_SetConfig+0xa8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d109      	bne.n	80042d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40010400 	.word	0x40010400

08004300 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f023 0201 	bic.w	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a28      	ldr	r2, [pc, #160]	; (80043cc <TIM_TI1_SetConfig+0xcc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d01b      	beq.n	8004366 <TIM_TI1_SetConfig+0x66>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d017      	beq.n	8004366 <TIM_TI1_SetConfig+0x66>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <TIM_TI1_SetConfig+0xd0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <TIM_TI1_SetConfig+0x66>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a24      	ldr	r2, [pc, #144]	; (80043d4 <TIM_TI1_SetConfig+0xd4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00f      	beq.n	8004366 <TIM_TI1_SetConfig+0x66>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <TIM_TI1_SetConfig+0xd8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00b      	beq.n	8004366 <TIM_TI1_SetConfig+0x66>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a22      	ldr	r2, [pc, #136]	; (80043dc <TIM_TI1_SetConfig+0xdc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d007      	beq.n	8004366 <TIM_TI1_SetConfig+0x66>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <TIM_TI1_SetConfig+0xe0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_TI1_SetConfig+0x66>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <TIM_TI1_SetConfig+0xe4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <TIM_TI1_SetConfig+0x6a>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <TIM_TI1_SetConfig+0x6c>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0303 	bic.w	r3, r3, #3
 8004376:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e003      	b.n	800438a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004390:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	b2db      	uxtb	r3, r3
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f023 030a 	bic.w	r3, r3, #10
 80043a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f003 030a 	and.w	r3, r3, #10
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40010400 	.word	0x40010400
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40001800 	.word	0x40001800

080043e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f023 030a 	bic.w	r3, r3, #10
 8004424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f023 0210 	bic.w	r2, r3, #16
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	031b      	lsls	r3, r3, #12
 800448a:	b29b      	uxth	r3, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004498:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	621a      	str	r2, [r3, #32]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0210 	bic.w	r2, r3, #16
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	031b      	lsls	r3, r3, #12
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f023 0303 	bic.w	r3, r3, #3
 800454c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	b2db      	uxtb	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004570:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	621a      	str	r2, [r3, #32]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	031b      	lsls	r3, r3, #12
 80045dc:	b29b      	uxth	r3, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80045ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	031b      	lsls	r3, r3, #12
 80045f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	f043 0307 	orr.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	021a      	lsls	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	431a      	orrs	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2201      	movs	r2, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	fa01 f303 	lsl.w	r3, r1, r3
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e05a      	b.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d022      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004738:	d01d      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10c      	bne.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800477c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	4313      	orrs	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40000800 	.word	0x40000800
 80047bc:	40000c00 	.word	0x40000c00
 80047c0:	40010400 	.word	0x40010400
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40001800 	.word	0x40001800

080047cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e042      	b.n	800488c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd fb18 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fa09 	bl	8004c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800484c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800485c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800486c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d175      	bne.n	80049a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_UART_Transmit+0x2c>
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e06e      	b.n	80049a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2221      	movs	r2, #33	; 0x21
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d2:	f7fd fc79 	bl	80021c8 <HAL_GetTick>
 80048d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ec:	d108      	bne.n	8004900 <HAL_UART_Transmit+0x6c>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	e003      	b.n	8004908 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004908:	e02e      	b.n	8004968 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f8df 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e03a      	b.n	80049a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3302      	adds	r3, #2
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e007      	b.n	800495a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3301      	adds	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1cb      	bne.n	800490a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2140      	movs	r1, #64	; 0x40
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f8ab 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e006      	b.n	80049a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b08a      	sub	sp, #40	; 0x28
 80049ae:	af02      	add	r7, sp, #8
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	f040 8081 	bne.w	8004ace <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_UART_Receive+0x2e>
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e079      	b.n	8004ad0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2222      	movs	r2, #34	; 0x22
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f0:	f7fd fbea 	bl	80021c8 <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0a:	d108      	bne.n	8004a1e <HAL_UART_Receive+0x74>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	e003      	b.n	8004a26 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a26:	e047      	b.n	8004ab8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2120      	movs	r1, #32
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f850 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e042      	b.n	8004ad0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10c      	bne.n	8004a6a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	3302      	adds	r3, #2
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	e01f      	b.n	8004aaa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d007      	beq.n	8004a84 <HAL_UART_Receive+0xda>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <HAL_UART_Receive+0xe8>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e008      	b.n	8004aa4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1b2      	bne.n	8004a28 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae8:	e03b      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d037      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7fd fb69 	bl	80021c8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e03a      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d023      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d020      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d01d      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d116      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f81d 	bl	8004b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2208      	movs	r2, #8
 8004b54:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e00f      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	bf0c      	ite	eq
 8004b72:	2301      	moveq	r3, #1
 8004b74:	2300      	movne	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d0b4      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b095      	sub	sp, #84	; 0x54
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bb2:	643a      	str	r2, [r7, #64]	; 0x40
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e5      	bne.n	8004b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3314      	adds	r3, #20
 8004be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e5      	bne.n	8004bc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d119      	bne.n	8004c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f023 0310 	bic.w	r3, r3, #16
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c22:	61ba      	str	r2, [r7, #24]
 8004c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6979      	ldr	r1, [r7, #20]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c44:	bf00      	nop
 8004c46:	3754      	adds	r7, #84	; 0x54
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c54:	b0c0      	sub	sp, #256	; 0x100
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	68d9      	ldr	r1, [r3, #12]
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	ea40 0301 	orr.w	r3, r0, r1
 8004c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ca8:	f021 010c 	bic.w	r1, r1, #12
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cca:	6999      	ldr	r1, [r3, #24]
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	ea40 0301 	orr.w	r3, r0, r1
 8004cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b8f      	ldr	r3, [pc, #572]	; (8004f1c <UART_SetConfig+0x2cc>)
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d005      	beq.n	8004cf0 <UART_SetConfig+0xa0>
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b8d      	ldr	r3, [pc, #564]	; (8004f20 <UART_SetConfig+0x2d0>)
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d104      	bne.n	8004cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7fd fe26 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 8004cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cf8:	e003      	b.n	8004d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cfa:	f7fd fe0d 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8004cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	f040 810c 	bne.w	8004f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d22:	4622      	mov	r2, r4
 8004d24:	462b      	mov	r3, r5
 8004d26:	1891      	adds	r1, r2, r2
 8004d28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d2a:	415b      	adcs	r3, r3
 8004d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d32:	4621      	mov	r1, r4
 8004d34:	eb12 0801 	adds.w	r8, r2, r1
 8004d38:	4629      	mov	r1, r5
 8004d3a:	eb43 0901 	adc.w	r9, r3, r1
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d52:	4690      	mov	r8, r2
 8004d54:	4699      	mov	r9, r3
 8004d56:	4623      	mov	r3, r4
 8004d58:	eb18 0303 	adds.w	r3, r8, r3
 8004d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d60:	462b      	mov	r3, r5
 8004d62:	eb49 0303 	adc.w	r3, r9, r3
 8004d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d7e:	460b      	mov	r3, r1
 8004d80:	18db      	adds	r3, r3, r3
 8004d82:	653b      	str	r3, [r7, #80]	; 0x50
 8004d84:	4613      	mov	r3, r2
 8004d86:	eb42 0303 	adc.w	r3, r2, r3
 8004d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d94:	f7fb fa3c 	bl	8000210 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4b61      	ldr	r3, [pc, #388]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	011c      	lsls	r4, r3, #4
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004db0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dc8:	4641      	mov	r1, r8
 8004dca:	eb12 0a01 	adds.w	sl, r2, r1
 8004dce:	4649      	mov	r1, r9
 8004dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004de8:	4692      	mov	sl, r2
 8004dea:	469b      	mov	fp, r3
 8004dec:	4643      	mov	r3, r8
 8004dee:	eb1a 0303 	adds.w	r3, sl, r3
 8004df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004df6:	464b      	mov	r3, r9
 8004df8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e14:	460b      	mov	r3, r1
 8004e16:	18db      	adds	r3, r3, r3
 8004e18:	643b      	str	r3, [r7, #64]	; 0x40
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	eb42 0303 	adc.w	r3, r2, r3
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
 8004e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e2a:	f7fb f9f1 	bl	8000210 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	4b3b      	ldr	r3, [pc, #236]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004e36:	fba3 2301 	umull	r2, r3, r3, r1
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	2264      	movs	r2, #100	; 0x64
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	1acb      	subs	r3, r1, r3
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e4a:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e58:	441c      	add	r4, r3
 8004e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	1891      	adds	r1, r2, r2
 8004e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e74:	415b      	adcs	r3, r3
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	1851      	adds	r1, r2, r1
 8004e80:	6339      	str	r1, [r7, #48]	; 0x30
 8004e82:	4649      	mov	r1, r9
 8004e84:	414b      	adcs	r3, r1
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e94:	4659      	mov	r1, fp
 8004e96:	00cb      	lsls	r3, r1, #3
 8004e98:	4651      	mov	r1, sl
 8004e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e9e:	4651      	mov	r1, sl
 8004ea0:	00ca      	lsls	r2, r1, #3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	189b      	adds	r3, r3, r2
 8004eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	460a      	mov	r2, r1
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	18db      	adds	r3, r3, r3
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	eb42 0303 	adc.w	r3, r2, r3
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ee6:	f7fb f993 	bl	8000210 <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	2164      	movs	r1, #100	; 0x64
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	3332      	adds	r3, #50	; 0x32
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <UART_SetConfig+0x2d4>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	f003 0207 	and.w	r2, r3, #7
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4422      	add	r2, r4
 8004f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f18:	e106      	b.n	8005128 <UART_SetConfig+0x4d8>
 8004f1a:	bf00      	nop
 8004f1c:	40011000 	.word	0x40011000
 8004f20:	40011400 	.word	0x40011400
 8004f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f3a:	4642      	mov	r2, r8
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	1891      	adds	r1, r2, r2
 8004f40:	6239      	str	r1, [r7, #32]
 8004f42:	415b      	adcs	r3, r3
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f4a:	4641      	mov	r1, r8
 8004f4c:	1854      	adds	r4, r2, r1
 8004f4e:	4649      	mov	r1, r9
 8004f50:	eb43 0501 	adc.w	r5, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	00eb      	lsls	r3, r5, #3
 8004f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f62:	00e2      	lsls	r2, r4, #3
 8004f64:	4614      	mov	r4, r2
 8004f66:	461d      	mov	r5, r3
 8004f68:	4643      	mov	r3, r8
 8004f6a:	18e3      	adds	r3, r4, r3
 8004f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f70:	464b      	mov	r3, r9
 8004f72:	eb45 0303 	adc.w	r3, r5, r3
 8004f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f96:	4629      	mov	r1, r5
 8004f98:	008b      	lsls	r3, r1, #2
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	008a      	lsls	r2, r1, #2
 8004fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fa8:	f7fb f932 	bl	8000210 <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4b60      	ldr	r3, [pc, #384]	; (8005134 <UART_SetConfig+0x4e4>)
 8004fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	011c      	lsls	r4, r3, #4
 8004fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	1891      	adds	r1, r2, r2
 8004fd2:	61b9      	str	r1, [r7, #24]
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fdc:	4641      	mov	r1, r8
 8004fde:	1851      	adds	r1, r2, r1
 8004fe0:	6139      	str	r1, [r7, #16]
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	414b      	adcs	r3, r1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	00cb      	lsls	r3, r1, #3
 8004ff8:	4651      	mov	r1, sl
 8004ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffe:	4651      	mov	r1, sl
 8005000:	00ca      	lsls	r2, r1, #3
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	4603      	mov	r3, r0
 8005008:	4642      	mov	r2, r8
 800500a:	189b      	adds	r3, r3, r2
 800500c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005010:	464b      	mov	r3, r9
 8005012:	460a      	mov	r2, r1
 8005014:	eb42 0303 	adc.w	r3, r2, r3
 8005018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	67bb      	str	r3, [r7, #120]	; 0x78
 8005026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005034:	4649      	mov	r1, r9
 8005036:	008b      	lsls	r3, r1, #2
 8005038:	4641      	mov	r1, r8
 800503a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503e:	4641      	mov	r1, r8
 8005040:	008a      	lsls	r2, r1, #2
 8005042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005046:	f7fb f8e3 	bl	8000210 <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4611      	mov	r1, r2
 8005050:	4b38      	ldr	r3, [pc, #224]	; (8005134 <UART_SetConfig+0x4e4>)
 8005052:	fba3 2301 	umull	r2, r3, r3, r1
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	2264      	movs	r2, #100	; 0x64
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	1acb      	subs	r3, r1, r3
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	3332      	adds	r3, #50	; 0x32
 8005064:	4a33      	ldr	r2, [pc, #204]	; (8005134 <UART_SetConfig+0x4e4>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005070:	441c      	add	r4, r3
 8005072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005076:	2200      	movs	r2, #0
 8005078:	673b      	str	r3, [r7, #112]	; 0x70
 800507a:	677a      	str	r2, [r7, #116]	; 0x74
 800507c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005080:	4642      	mov	r2, r8
 8005082:	464b      	mov	r3, r9
 8005084:	1891      	adds	r1, r2, r2
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	415b      	adcs	r3, r3
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005090:	4641      	mov	r1, r8
 8005092:	1851      	adds	r1, r2, r1
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	4649      	mov	r1, r9
 8005098:	414b      	adcs	r3, r1
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050a8:	4659      	mov	r1, fp
 80050aa:	00cb      	lsls	r3, r1, #3
 80050ac:	4651      	mov	r1, sl
 80050ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b2:	4651      	mov	r1, sl
 80050b4:	00ca      	lsls	r2, r1, #3
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	4642      	mov	r2, r8
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c2:	464b      	mov	r3, r9
 80050c4:	460a      	mov	r2, r1
 80050c6:	eb42 0303 	adc.w	r3, r2, r3
 80050ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	663b      	str	r3, [r7, #96]	; 0x60
 80050d6:	667a      	str	r2, [r7, #100]	; 0x64
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050e4:	4649      	mov	r1, r9
 80050e6:	008b      	lsls	r3, r1, #2
 80050e8:	4641      	mov	r1, r8
 80050ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ee:	4641      	mov	r1, r8
 80050f0:	008a      	lsls	r2, r1, #2
 80050f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050f6:	f7fb f88b 	bl	8000210 <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <UART_SetConfig+0x4e4>)
 8005100:	fba3 1302 	umull	r1, r3, r3, r2
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	2164      	movs	r1, #100	; 0x64
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	3332      	adds	r3, #50	; 0x32
 8005112:	4a08      	ldr	r2, [pc, #32]	; (8005134 <UART_SetConfig+0x4e4>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	f003 020f 	and.w	r2, r3, #15
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4422      	add	r2, r4
 8005126:	609a      	str	r2, [r3, #8]
}
 8005128:	bf00      	nop
 800512a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800512e:	46bd      	mov	sp, r7
 8005130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005134:	51eb851f 	.word	0x51eb851f

08005138 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800514a:	2b84      	cmp	r3, #132	; 0x84
 800514c:	d005      	beq.n	800515a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800514e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	3303      	adds	r3, #3
 8005158:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800516c:	f000 fec4 	bl	8005ef8 <vTaskStartScheduler>
  
  return osOK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	bd80      	pop	{r7, pc}

08005176 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005178:	b089      	sub	sp, #36	; 0x24
 800517a:	af04      	add	r7, sp, #16
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <osThreadCreate+0x54>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01c      	beq.n	80051ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685c      	ldr	r4, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691e      	ldr	r6, [r3, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff ffc8 	bl	8005138 <makeFreeRtosPriority>
 80051a8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051b2:	9202      	str	r2, [sp, #8]
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	9100      	str	r1, [sp, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4632      	mov	r2, r6
 80051bc:	4629      	mov	r1, r5
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 fcbc 	bl	8005b3c <xTaskCreateStatic>
 80051c4:	4603      	mov	r3, r0
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e01c      	b.n	8005204 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685c      	ldr	r4, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051d6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ffaa 	bl	8005138 <makeFreeRtosPriority>
 80051e4:	4602      	mov	r2, r0
 80051e6:	f107 030c 	add.w	r3, r7, #12
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	9200      	str	r2, [sp, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	4632      	mov	r2, r6
 80051f2:	4629      	mov	r1, r5
 80051f4:	4620      	mov	r0, r4
 80051f6:	f000 fcfe 	bl	8005bf6 <xTaskCreate>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d001      	beq.n	8005204 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005204:	68fb      	ldr	r3, [r7, #12]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800520e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <osDelay+0x16>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	e000      	b.n	8005226 <osDelay+0x18>
 8005224:	2301      	movs	r3, #1
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fe32 	bl	8005e90 <vTaskDelay>
  
  return osOK;
 800522c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f103 0208 	add.w	r2, r3, #8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f04f 32ff 	mov.w	r2, #4294967295
 800524e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f103 0208 	add.w	r2, r3, #8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f103 0208 	add.w	r2, r3, #8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d103      	bne.n	80052f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	e00c      	b.n	8005312 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3308      	adds	r3, #8
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e002      	b.n	8005306 <vListInsert+0x2e>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d2f6      	bcs.n	8005300 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	601a      	str	r2, [r3, #0]
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6892      	ldr	r2, [r2, #8]
 8005360:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6852      	ldr	r2, [r2, #4]
 800536a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	d103      	bne.n	800537e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	1e5a      	subs	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053ca:	f001 fcf3 	bl	8006db4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	441a      	add	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	3b01      	subs	r3, #1
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	22ff      	movs	r2, #255	; 0xff
 8005416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d114      	bne.n	800544a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01a      	beq.n	800545e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3310      	adds	r3, #16
 800542c:	4618      	mov	r0, r3
 800542e:	f000 ffb5 	bl	800639c <xTaskRemoveFromEventList>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d012      	beq.n	800545e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <xQueueGenericReset+0xcc>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	e009      	b.n	800545e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3310      	adds	r3, #16
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fef1 	bl	8005236 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff feec 	bl	8005236 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800545e:	f001 fcd9 	bl	8006e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005462:	2301      	movs	r3, #1
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	4613      	mov	r3, r2
 800547c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	613b      	str	r3, [r7, #16]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	fb02 f303 	mul.w	r3, r2, r3
 80054a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	3348      	adds	r3, #72	; 0x48
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fd65 	bl	8006f78 <pvPortMalloc>
 80054ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d011      	beq.n	80054da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3348      	adds	r3, #72	; 0x48
 80054be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c8:	79fa      	ldrb	r2, [r7, #7]
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f805 	bl	80054e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054da:	69bb      	ldr	r3, [r7, #24]
	}
 80054dc:	4618      	mov	r0, r3
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e002      	b.n	8005506 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005512:	2101      	movs	r1, #1
 8005514:	69b8      	ldr	r0, [r7, #24]
 8005516:	f7ff ff43 	bl	80053a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08e      	sub	sp, #56	; 0x38
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005532:	2300      	movs	r3, #0
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueGenericSend+0x32>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <xQueueGenericSend+0x40>
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <xQueueGenericSend+0x44>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <xQueueGenericSend+0x46>
 8005568:	2300      	movs	r3, #0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <xQueueGenericSend+0x60>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d103      	bne.n	8005592 <xQueueGenericSend+0x6e>
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <xQueueGenericSend+0x72>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <xQueueGenericSend+0x74>
 8005596:	2300      	movs	r3, #0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	623b      	str	r3, [r7, #32]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055b2:	f001 f8b3 	bl	800671c <xTaskGetSchedulerState>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <xQueueGenericSend+0x9e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <xQueueGenericSend+0xa2>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericSend+0xa4>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	61fb      	str	r3, [r7, #28]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055e2:	f001 fbe7 	bl	8006db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <xQueueGenericSend+0xd4>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d129      	bne.n	800564c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f000 f9b3 	bl	8005968 <prvCopyDataToQueue>
 8005602:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	3324      	adds	r3, #36	; 0x24
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fec3 	bl	800639c <xTaskRemoveFromEventList>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800561c:	4b3f      	ldr	r3, [pc, #252]	; (800571c <xQueueGenericSend+0x1f8>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	e00a      	b.n	8005644 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005634:	4b39      	ldr	r3, [pc, #228]	; (800571c <xQueueGenericSend+0x1f8>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005644:	f001 fbe6 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 8005648:	2301      	movs	r3, #1
 800564a:	e063      	b.n	8005714 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005652:	f001 fbdf 	bl	8006e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005656:	2300      	movs	r3, #0
 8005658:	e05c      	b.n	8005714 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005660:	f107 0314 	add.w	r3, r7, #20
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fefb 	bl	8006460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800566e:	f001 fbd1 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005672:	f000 fcab 	bl	8005fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005676:	f001 fb9d 	bl	8006db4 <vPortEnterCritical>
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005680:	b25b      	sxtb	r3, r3
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d103      	bne.n	8005690 <xQueueGenericSend+0x16c>
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005696:	b25b      	sxtb	r3, r3
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d103      	bne.n	80056a6 <xQueueGenericSend+0x182>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a6:	f001 fbb5 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056aa:	1d3a      	adds	r2, r7, #4
 80056ac:	f107 0314 	add.w	r3, r7, #20
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 feea 	bl	800648c <xTaskCheckForTimeOut>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d124      	bne.n	8005708 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c0:	f000 fa24 	bl	8005b0c <prvIsQueueFull>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	3310      	adds	r3, #16
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4611      	mov	r1, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fe3e 	bl	8006354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056da:	f000 f9af 	bl	8005a3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056de:	f000 fc83 	bl	8005fe8 <xTaskResumeAll>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f47f af7c 	bne.w	80055e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80056ea:	4b0c      	ldr	r3, [pc, #48]	; (800571c <xQueueGenericSend+0x1f8>)
 80056ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	e772      	b.n	80055e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056fe:	f000 f99d 	bl	8005a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005702:	f000 fc71 	bl	8005fe8 <xTaskResumeAll>
 8005706:	e76c      	b.n	80055e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570a:	f000 f997 	bl	8005a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800570e:	f000 fc6b 	bl	8005fe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005714:	4618      	mov	r0, r3
 8005716:	3738      	adds	r7, #56	; 0x38
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08e      	sub	sp, #56	; 0x38
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005732:	2300      	movs	r3, #0
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	623b      	str	r3, [r7, #32]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61fb      	str	r3, [r7, #28]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005770:	f000 ffd4 	bl	800671c <xTaskGetSchedulerState>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <xQueueSemaphoreTake+0x60>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <xQueueSemaphoreTake+0x64>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <xQueueSemaphoreTake+0x66>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	61bb      	str	r3, [r7, #24]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a0:	f001 fb08 	bl	8006db4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d024      	beq.n	80057fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	1e5a      	subs	r2, r3, #1
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80057c0:	f001 f954 	bl	8006a6c <pvTaskIncrementMutexHeldCount>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00f      	beq.n	80057f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	3310      	adds	r3, #16
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fde0 	bl	800639c <xTaskRemoveFromEventList>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057e2:	4b54      	ldr	r3, [pc, #336]	; (8005934 <xQueueSemaphoreTake+0x214>)
 80057e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057f2:	f001 fb0f 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e097      	b.n	800592a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d111      	bne.n	8005824 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	617b      	str	r3, [r7, #20]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800581c:	f001 fafa 	bl	8006e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005820:	2300      	movs	r3, #0
 8005822:	e082      	b.n	800592a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800582a:	f107 030c 	add.w	r3, r7, #12
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fe16 	bl	8006460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005838:	f001 faec 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800583c:	f000 fbc6 	bl	8005fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005840:	f001 fab8 	bl	8006db4 <vPortEnterCritical>
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800584a:	b25b      	sxtb	r3, r3
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d103      	bne.n	800585a <xQueueSemaphoreTake+0x13a>
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005860:	b25b      	sxtb	r3, r3
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d103      	bne.n	8005870 <xQueueSemaphoreTake+0x150>
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005870:	f001 fad0 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005874:	463a      	mov	r2, r7
 8005876:	f107 030c 	add.w	r3, r7, #12
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fe05 	bl	800648c <xTaskCheckForTimeOut>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d132      	bne.n	80058ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800588a:	f000 f929 	bl	8005ae0 <prvIsQueueEmpty>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d026      	beq.n	80058e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800589c:	f001 fa8a 	bl	8006db4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 ff57 	bl	8006758 <xTaskPriorityInherit>
 80058aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80058ac:	f001 fab2 	bl	8006e14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	3324      	adds	r3, #36	; 0x24
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fd4b 	bl	8006354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058c0:	f000 f8bc 	bl	8005a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058c4:	f000 fb90 	bl	8005fe8 <xTaskResumeAll>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f47f af68 	bne.w	80057a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <xQueueSemaphoreTake+0x214>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	e75e      	b.n	80057a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80058e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058e4:	f000 f8aa 	bl	8005a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058e8:	f000 fb7e 	bl	8005fe8 <xTaskResumeAll>
 80058ec:	e758      	b.n	80057a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80058ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058f0:	f000 f8a4 	bl	8005a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f4:	f000 fb78 	bl	8005fe8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058fa:	f000 f8f1 	bl	8005ae0 <prvIsQueueEmpty>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	f43f af4d 	beq.w	80057a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800590c:	f001 fa52 	bl	8006db4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005912:	f000 f811 	bl	8005938 <prvGetDisinheritPriorityAfterTimeout>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591e:	4618      	mov	r0, r3
 8005920:	f001 f816 	bl	8006950 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005924:	f001 fa76 	bl	8006e14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800592a:	4618      	mov	r0, r3
 800592c:	3738      	adds	r7, #56	; 0x38
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1c3 030a 	rsb	r3, r3, #10
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e001      	b.n	800595a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800595a:	68fb      	ldr	r3, [r7, #12]
	}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d14d      	bne.n	8005a2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 ff56 	bl	8006844 <xTaskPriorityDisinherit>
 8005998:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	e043      	b.n	8005a2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d119      	bne.n	80059dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6858      	ldr	r0, [r3, #4]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	461a      	mov	r2, r3
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	f001 fbc2 	bl	800713c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	441a      	add	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d32b      	bcc.n	8005a2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	e026      	b.n	8005a2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68d8      	ldr	r0, [r3, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	461a      	mov	r2, r3
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	f001 fba8 	bl	800713c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	425b      	negs	r3, r3
 80059f6:	441a      	add	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d207      	bcs.n	8005a18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	425b      	negs	r3, r3
 8005a12:	441a      	add	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d105      	bne.n	8005a2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a32:	697b      	ldr	r3, [r7, #20]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a44:	f001 f9b6 	bl	8006db4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a50:	e011      	b.n	8005a76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d012      	beq.n	8005a80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3324      	adds	r3, #36	; 0x24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fc9c 	bl	800639c <xTaskRemoveFromEventList>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a6a:	f000 fd71 	bl	8006550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dce9      	bgt.n	8005a52 <prvUnlockQueue+0x16>
 8005a7e:	e000      	b.n	8005a82 <prvUnlockQueue+0x46>
					break;
 8005a80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a8a:	f001 f9c3 	bl	8006e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a8e:	f001 f991 	bl	8006db4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a9a:	e011      	b.n	8005ac0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d012      	beq.n	8005aca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3310      	adds	r3, #16
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fc77 	bl	800639c <xTaskRemoveFromEventList>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ab4:	f000 fd4c 	bl	8006550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dce9      	bgt.n	8005a9c <prvUnlockQueue+0x60>
 8005ac8:	e000      	b.n	8005acc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	22ff      	movs	r2, #255	; 0xff
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ad4:	f001 f99e 	bl	8006e14 <vPortExitCritical>
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ae8:	f001 f964 	bl	8006db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e001      	b.n	8005afe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005afe:	f001 f989 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 8005b02:	68fb      	ldr	r3, [r7, #12]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b14:	f001 f94e 	bl	8006db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d102      	bne.n	8005b2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e001      	b.n	8005b2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b2e:	f001 f971 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 8005b32:	68fb      	ldr	r3, [r7, #12]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08e      	sub	sp, #56	; 0x38
 8005b40:	af04      	add	r7, sp, #16
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	61fb      	str	r3, [r7, #28]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b82:	23a0      	movs	r3, #160	; 0xa0
 8005b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2ba0      	cmp	r3, #160	; 0xa0
 8005b8a:	d00a      	beq.n	8005ba2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	61bb      	str	r3, [r7, #24]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01e      	beq.n	8005be8 <xTaskCreateStatic+0xac>
 8005baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01b      	beq.n	8005be8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9303      	str	r3, [sp, #12]
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	9302      	str	r3, [sp, #8]
 8005bca:	f107 0314 	add.w	r3, r7, #20
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f850 	bl	8005c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005be2:	f000 f8eb 	bl	8005dbc <prvAddNewTaskToReadyList>
 8005be6:	e001      	b.n	8005bec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bec:	697b      	ldr	r3, [r7, #20]
	}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3728      	adds	r7, #40	; 0x28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b08c      	sub	sp, #48	; 0x30
 8005bfa:	af04      	add	r7, sp, #16
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	603b      	str	r3, [r7, #0]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 f9b4 	bl	8006f78 <pvPortMalloc>
 8005c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00e      	beq.n	8005c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c18:	20a0      	movs	r0, #160	; 0xa0
 8005c1a:	f001 f9ad 	bl	8006f78 <pvPortMalloc>
 8005c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c2c:	e005      	b.n	8005c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c2e:	6978      	ldr	r0, [r7, #20]
 8005c30:	f001 f9e8 	bl	8007004 <vPortFree>
 8005c34:	e001      	b.n	8005c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d017      	beq.n	8005c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c48:	88fa      	ldrh	r2, [r7, #6]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f80e 	bl	8005c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c64:	69f8      	ldr	r0, [r7, #28]
 8005c66:	f000 f8a9 	bl	8005dbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e002      	b.n	8005c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c70:	f04f 33ff 	mov.w	r3, #4294967295
 8005c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c76:	69bb      	ldr	r3, [r7, #24]
	}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f023 0307 	bic.w	r3, r3, #7
 8005ca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	617b      	str	r3, [r7, #20]
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01f      	beq.n	8005d0e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e012      	b.n	8005cfa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	7819      	ldrb	r1, [r3, #0]
 8005cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3334      	adds	r3, #52	; 0x34
 8005ce4:	460a      	mov	r2, r1
 8005ce6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	4413      	add	r3, r2
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d006      	beq.n	8005d02 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2b0f      	cmp	r3, #15
 8005cfe:	d9e9      	bls.n	8005cd4 <prvInitialiseNewTask+0x54>
 8005d00:	e000      	b.n	8005d04 <prvInitialiseNewTask+0x84>
			{
				break;
 8005d02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d0c:	e003      	b.n	8005d16 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	2b09      	cmp	r3, #9
 8005d1a:	d901      	bls.n	8005d20 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d1c:	2309      	movs	r3, #9
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2200      	movs	r2, #0
 8005d30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff fa9d 	bl	8005276 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	3318      	adds	r3, #24
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fa98 	bl	8005276 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	f1c3 020a 	rsb	r2, r3, #10
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	334c      	adds	r3, #76	; 0x4c
 8005d70:	224c      	movs	r2, #76	; 0x4c
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 f95d 	bl	8007034 <memset>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <prvInitialiseNewTask+0x130>)
 8005d7e:	651a      	str	r2, [r3, #80]	; 0x50
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	4a0c      	ldr	r2, [pc, #48]	; (8005db4 <prvInitialiseNewTask+0x134>)
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <prvInitialiseNewTask+0x138>)
 8005d8a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	69b8      	ldr	r0, [r7, #24]
 8005d92:	f000 fee5 	bl	8006b60 <pxPortInitialiseStack>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da8:	bf00      	nop
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20004394 	.word	0x20004394
 8005db4:	200043fc 	.word	0x200043fc
 8005db8:	20004464 	.word	0x20004464

08005dbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dc4:	f000 fff6 	bl	8006db4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dc8:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <prvAddNewTaskToReadyList+0xb8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	4a29      	ldr	r2, [pc, #164]	; (8005e74 <prvAddNewTaskToReadyList+0xb8>)
 8005dd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dd2:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <prvAddNewTaskToReadyList+0xbc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dda:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <prvAddNewTaskToReadyList+0xbc>)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <prvAddNewTaskToReadyList+0xb8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d110      	bne.n	8005e0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005de8:	f000 fbd6 	bl	8006598 <prvInitialiseTaskLists>
 8005dec:	e00d      	b.n	8005e0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <prvAddNewTaskToReadyList+0xc0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005df6:	4b20      	ldr	r3, [pc, #128]	; (8005e78 <prvAddNewTaskToReadyList+0xbc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d802      	bhi.n	8005e0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e04:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <prvAddNewTaskToReadyList+0xbc>)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e0a:	4b1d      	ldr	r3, [pc, #116]	; (8005e80 <prvAddNewTaskToReadyList+0xc4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <prvAddNewTaskToReadyList+0xc4>)
 8005e12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	2201      	movs	r2, #1
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	4b19      	ldr	r3, [pc, #100]	; (8005e84 <prvAddNewTaskToReadyList+0xc8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <prvAddNewTaskToReadyList+0xc8>)
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <prvAddNewTaskToReadyList+0xcc>)
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7ff fa27 	bl	8005290 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e42:	f000 ffe7 	bl	8006e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <prvAddNewTaskToReadyList+0xc0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00e      	beq.n	8005e6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <prvAddNewTaskToReadyList+0xbc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d207      	bcs.n	8005e6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <prvAddNewTaskToReadyList+0xd0>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000758 	.word	0x20000758
 8005e78:	2000061c 	.word	0x2000061c
 8005e7c:	20000764 	.word	0x20000764
 8005e80:	20000774 	.word	0x20000774
 8005e84:	20000760 	.word	0x20000760
 8005e88:	20000620 	.word	0x20000620
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d017      	beq.n	8005ed2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <vTaskDelay+0x60>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <vTaskDelay+0x30>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	60bb      	str	r3, [r7, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ec0:	f000 f884 	bl	8005fcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fde4 	bl	8006a94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ecc:	f000 f88c 	bl	8005fe8 <xTaskResumeAll>
 8005ed0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d107      	bne.n	8005ee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <vTaskDelay+0x64>)
 8005eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000780 	.word	0x20000780
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f06:	463a      	mov	r2, r7
 8005f08:	1d39      	adds	r1, r7, #4
 8005f0a:	f107 0308 	add.w	r3, r7, #8
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fb f900 	bl	8001114 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	9202      	str	r2, [sp, #8]
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	460a      	mov	r2, r1
 8005f26:	4921      	ldr	r1, [pc, #132]	; (8005fac <vTaskStartScheduler+0xb4>)
 8005f28:	4821      	ldr	r0, [pc, #132]	; (8005fb0 <vTaskStartScheduler+0xb8>)
 8005f2a:	f7ff fe07 	bl	8005b3c <xTaskCreateStatic>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <vTaskStartScheduler+0xbc>)
 8005f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f34:	4b1f      	ldr	r3, [pc, #124]	; (8005fb4 <vTaskStartScheduler+0xbc>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	e001      	b.n	8005f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d11b      	bne.n	8005f84 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	613b      	str	r3, [r7, #16]
}
 8005f5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f60:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <vTaskStartScheduler+0xc0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	334c      	adds	r3, #76	; 0x4c
 8005f66:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <vTaskStartScheduler+0xc4>)
 8005f68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f6a:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <vTaskStartScheduler+0xc8>)
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f72:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <vTaskStartScheduler+0xcc>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f78:	4b13      	ldr	r3, [pc, #76]	; (8005fc8 <vTaskStartScheduler+0xd0>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f7e:	f000 fe77 	bl	8006c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f82:	e00e      	b.n	8005fa2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8a:	d10a      	bne.n	8005fa2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60fb      	str	r3, [r7, #12]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <vTaskStartScheduler+0xa8>
}
 8005fa2:	bf00      	nop
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	08007290 	.word	0x08007290
 8005fb0:	08006569 	.word	0x08006569
 8005fb4:	2000077c 	.word	0x2000077c
 8005fb8:	2000061c 	.word	0x2000061c
 8005fbc:	20000060 	.word	0x20000060
 8005fc0:	20000778 	.word	0x20000778
 8005fc4:	20000764 	.word	0x20000764
 8005fc8:	2000075c 	.word	0x2000075c

08005fcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fd0:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <vTaskSuspendAll+0x18>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	4a03      	ldr	r2, [pc, #12]	; (8005fe4 <vTaskSuspendAll+0x18>)
 8005fd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005fda:	bf00      	nop
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	20000780 	.word	0x20000780

08005fe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ff6:	4b41      	ldr	r3, [pc, #260]	; (80060fc <xTaskResumeAll+0x114>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	603b      	str	r3, [r7, #0]
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006014:	f000 fece 	bl	8006db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006018:	4b38      	ldr	r3, [pc, #224]	; (80060fc <xTaskResumeAll+0x114>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	4a37      	ldr	r2, [pc, #220]	; (80060fc <xTaskResumeAll+0x114>)
 8006020:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006022:	4b36      	ldr	r3, [pc, #216]	; (80060fc <xTaskResumeAll+0x114>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d161      	bne.n	80060ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800602a:	4b35      	ldr	r3, [pc, #212]	; (8006100 <xTaskResumeAll+0x118>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d05d      	beq.n	80060ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006032:	e02e      	b.n	8006092 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006034:	4b33      	ldr	r3, [pc, #204]	; (8006104 <xTaskResumeAll+0x11c>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3318      	adds	r3, #24
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff f982 	bl	800534a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff f97d 	bl	800534a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	2201      	movs	r2, #1
 8006056:	409a      	lsls	r2, r3
 8006058:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <xTaskResumeAll+0x120>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4313      	orrs	r3, r2
 800605e:	4a2a      	ldr	r2, [pc, #168]	; (8006108 <xTaskResumeAll+0x120>)
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4a27      	ldr	r2, [pc, #156]	; (800610c <xTaskResumeAll+0x124>)
 8006070:	441a      	add	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7ff f909 	bl	8005290 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006082:	4b23      	ldr	r3, [pc, #140]	; (8006110 <xTaskResumeAll+0x128>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	429a      	cmp	r2, r3
 800608a:	d302      	bcc.n	8006092 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800608c:	4b21      	ldr	r3, [pc, #132]	; (8006114 <xTaskResumeAll+0x12c>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006092:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <xTaskResumeAll+0x11c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1cc      	bne.n	8006034 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060a0:	f000 fb1c 	bl	80066dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <xTaskResumeAll+0x130>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d010      	beq.n	80060d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060b0:	f000 f836 	bl	8006120 <xTaskIncrementTick>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060ba:	4b16      	ldr	r3, [pc, #88]	; (8006114 <xTaskResumeAll+0x12c>)
 80060bc:	2201      	movs	r2, #1
 80060be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1f1      	bne.n	80060b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80060cc:	4b12      	ldr	r3, [pc, #72]	; (8006118 <xTaskResumeAll+0x130>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060d2:	4b10      	ldr	r3, [pc, #64]	; (8006114 <xTaskResumeAll+0x12c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060de:	4b0f      	ldr	r3, [pc, #60]	; (800611c <xTaskResumeAll+0x134>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060ee:	f000 fe91 	bl	8006e14 <vPortExitCritical>

	return xAlreadyYielded;
 80060f2:	68bb      	ldr	r3, [r7, #8]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000780 	.word	0x20000780
 8006100:	20000758 	.word	0x20000758
 8006104:	20000718 	.word	0x20000718
 8006108:	20000760 	.word	0x20000760
 800610c:	20000620 	.word	0x20000620
 8006110:	2000061c 	.word	0x2000061c
 8006114:	2000076c 	.word	0x2000076c
 8006118:	20000768 	.word	0x20000768
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800612a:	4b4e      	ldr	r3, [pc, #312]	; (8006264 <xTaskIncrementTick+0x144>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f040 808e 	bne.w	8006250 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006134:	4b4c      	ldr	r3, [pc, #304]	; (8006268 <xTaskIncrementTick+0x148>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800613c:	4a4a      	ldr	r2, [pc, #296]	; (8006268 <xTaskIncrementTick+0x148>)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d120      	bne.n	800618a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006148:	4b48      	ldr	r3, [pc, #288]	; (800626c <xTaskIncrementTick+0x14c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <xTaskIncrementTick+0x48>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	603b      	str	r3, [r7, #0]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xTaskIncrementTick+0x46>
 8006168:	4b40      	ldr	r3, [pc, #256]	; (800626c <xTaskIncrementTick+0x14c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	4b40      	ldr	r3, [pc, #256]	; (8006270 <xTaskIncrementTick+0x150>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a3e      	ldr	r2, [pc, #248]	; (800626c <xTaskIncrementTick+0x14c>)
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	4a3e      	ldr	r2, [pc, #248]	; (8006270 <xTaskIncrementTick+0x150>)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <xTaskIncrementTick+0x154>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	4a3c      	ldr	r2, [pc, #240]	; (8006274 <xTaskIncrementTick+0x154>)
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	f000 faa9 	bl	80066dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800618a:	4b3b      	ldr	r3, [pc, #236]	; (8006278 <xTaskIncrementTick+0x158>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	429a      	cmp	r2, r3
 8006192:	d348      	bcc.n	8006226 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006194:	4b35      	ldr	r3, [pc, #212]	; (800626c <xTaskIncrementTick+0x14c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800619e:	4b36      	ldr	r3, [pc, #216]	; (8006278 <xTaskIncrementTick+0x158>)
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295
 80061a4:	601a      	str	r2, [r3, #0]
					break;
 80061a6:	e03e      	b.n	8006226 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a8:	4b30      	ldr	r3, [pc, #192]	; (800626c <xTaskIncrementTick+0x14c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d203      	bcs.n	80061c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061c0:	4a2d      	ldr	r2, [pc, #180]	; (8006278 <xTaskIncrementTick+0x158>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061c6:	e02e      	b.n	8006226 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff f8bc 	bl	800534a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	3318      	adds	r3, #24
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff f8b3 	bl	800534a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	2201      	movs	r2, #1
 80061ea:	409a      	lsls	r2, r3
 80061ec:	4b23      	ldr	r3, [pc, #140]	; (800627c <xTaskIncrementTick+0x15c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	4a22      	ldr	r2, [pc, #136]	; (800627c <xTaskIncrementTick+0x15c>)
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <xTaskIncrementTick+0x160>)
 8006204:	441a      	add	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	3304      	adds	r3, #4
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f7ff f83f 	bl	8005290 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <xTaskIncrementTick+0x164>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	429a      	cmp	r2, r3
 800621e:	d3b9      	bcc.n	8006194 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006224:	e7b6      	b.n	8006194 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006226:	4b17      	ldr	r3, [pc, #92]	; (8006284 <xTaskIncrementTick+0x164>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622c:	4914      	ldr	r1, [pc, #80]	; (8006280 <xTaskIncrementTick+0x160>)
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d901      	bls.n	8006242 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800623e:	2301      	movs	r3, #1
 8006240:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006242:	4b11      	ldr	r3, [pc, #68]	; (8006288 <xTaskIncrementTick+0x168>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800624a:	2301      	movs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e004      	b.n	800625a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <xTaskIncrementTick+0x16c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	4a0d      	ldr	r2, [pc, #52]	; (800628c <xTaskIncrementTick+0x16c>)
 8006258:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800625a:	697b      	ldr	r3, [r7, #20]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20000780 	.word	0x20000780
 8006268:	2000075c 	.word	0x2000075c
 800626c:	20000710 	.word	0x20000710
 8006270:	20000714 	.word	0x20000714
 8006274:	20000770 	.word	0x20000770
 8006278:	20000778 	.word	0x20000778
 800627c:	20000760 	.word	0x20000760
 8006280:	20000620 	.word	0x20000620
 8006284:	2000061c 	.word	0x2000061c
 8006288:	2000076c 	.word	0x2000076c
 800628c:	20000768 	.word	0x20000768

08006290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006296:	4b29      	ldr	r3, [pc, #164]	; (800633c <vTaskSwitchContext+0xac>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800629e:	4b28      	ldr	r3, [pc, #160]	; (8006340 <vTaskSwitchContext+0xb0>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062a4:	e044      	b.n	8006330 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80062a6:	4b26      	ldr	r3, [pc, #152]	; (8006340 <vTaskSwitchContext+0xb0>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ac:	4b25      	ldr	r3, [pc, #148]	; (8006344 <vTaskSwitchContext+0xb4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	fab3 f383 	clz	r3, r3
 80062b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	f1c3 031f 	rsb	r3, r3, #31
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	4921      	ldr	r1, [pc, #132]	; (8006348 <vTaskSwitchContext+0xb8>)
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	607b      	str	r3, [r7, #4]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <vTaskSwitchContext+0x5a>
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4a14      	ldr	r2, [pc, #80]	; (8006348 <vTaskSwitchContext+0xb8>)
 80062f8:	4413      	add	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	3308      	adds	r3, #8
 800630e:	429a      	cmp	r2, r3
 8006310:	d104      	bne.n	800631c <vTaskSwitchContext+0x8c>
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	4a0a      	ldr	r2, [pc, #40]	; (800634c <vTaskSwitchContext+0xbc>)
 8006324:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <vTaskSwitchContext+0xbc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	334c      	adds	r3, #76	; 0x4c
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <vTaskSwitchContext+0xc0>)
 800632e:	6013      	str	r3, [r2, #0]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20000780 	.word	0x20000780
 8006340:	2000076c 	.word	0x2000076c
 8006344:	20000760 	.word	0x20000760
 8006348:	20000620 	.word	0x20000620
 800634c:	2000061c 	.word	0x2000061c
 8006350:	20000060 	.word	0x20000060

08006354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60fb      	str	r3, [r7, #12]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <vTaskPlaceOnEventList+0x44>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3318      	adds	r3, #24
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fe ffa8 	bl	80052d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006388:	2101      	movs	r1, #1
 800638a:	6838      	ldr	r0, [r7, #0]
 800638c:	f000 fb82 	bl	8006a94 <prvAddCurrentTaskToDelayedList>
}
 8006390:	bf00      	nop
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	2000061c 	.word	0x2000061c

0800639c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	60fb      	str	r3, [r7, #12]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	3318      	adds	r3, #24
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe ffbc 	bl	800534a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d2:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <xTaskRemoveFromEventList+0xac>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d11c      	bne.n	8006414 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	3304      	adds	r3, #4
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe ffb3 	bl	800534a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	2201      	movs	r2, #1
 80063ea:	409a      	lsls	r2, r3
 80063ec:	4b17      	ldr	r3, [pc, #92]	; (800644c <xTaskRemoveFromEventList+0xb0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	4a16      	ldr	r2, [pc, #88]	; (800644c <xTaskRemoveFromEventList+0xb0>)
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4a13      	ldr	r2, [pc, #76]	; (8006450 <xTaskRemoveFromEventList+0xb4>)
 8006404:	441a      	add	r2, r3
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fe ff3f 	bl	8005290 <vListInsertEnd>
 8006412:	e005      	b.n	8006420 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3318      	adds	r3, #24
 8006418:	4619      	mov	r1, r3
 800641a:	480e      	ldr	r0, [pc, #56]	; (8006454 <xTaskRemoveFromEventList+0xb8>)
 800641c:	f7fe ff38 	bl	8005290 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <xTaskRemoveFromEventList+0xbc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	429a      	cmp	r2, r3
 800642c:	d905      	bls.n	800643a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800642e:	2301      	movs	r3, #1
 8006430:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <xTaskRemoveFromEventList+0xc0>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e001      	b.n	800643e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800643e:	697b      	ldr	r3, [r7, #20]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20000780 	.word	0x20000780
 800644c:	20000760 	.word	0x20000760
 8006450:	20000620 	.word	0x20000620
 8006454:	20000718 	.word	0x20000718
 8006458:	2000061c 	.word	0x2000061c
 800645c:	2000076c 	.word	0x2000076c

08006460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <vTaskInternalSetTimeOutState+0x24>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <vTaskInternalSetTimeOutState+0x28>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	605a      	str	r2, [r3, #4]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20000770 	.word	0x20000770
 8006488:	2000075c 	.word	0x2000075c

0800648c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	613b      	str	r3, [r7, #16]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	60fb      	str	r3, [r7, #12]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064ce:	f000 fc71 	bl	8006db4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064d2:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <xTaskCheckForTimeOut+0xbc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d102      	bne.n	80064f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	e023      	b.n	800653a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b15      	ldr	r3, [pc, #84]	; (800654c <xTaskCheckForTimeOut+0xc0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d007      	beq.n	800650e <xTaskCheckForTimeOut+0x82>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	429a      	cmp	r2, r3
 8006506:	d302      	bcc.n	800650e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e015      	b.n	800653a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	429a      	cmp	r2, r3
 8006516:	d20b      	bcs.n	8006530 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	1ad2      	subs	r2, r2, r3
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff ff9b 	bl	8006460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800652a:	2300      	movs	r3, #0
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	e004      	b.n	800653a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006536:	2301      	movs	r3, #1
 8006538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800653a:	f000 fc6b 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 800653e:	69fb      	ldr	r3, [r7, #28]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	2000075c 	.word	0x2000075c
 800654c:	20000770 	.word	0x20000770

08006550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006554:	4b03      	ldr	r3, [pc, #12]	; (8006564 <vTaskMissedYield+0x14>)
 8006556:	2201      	movs	r2, #1
 8006558:	601a      	str	r2, [r3, #0]
}
 800655a:	bf00      	nop
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	2000076c 	.word	0x2000076c

08006568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006570:	f000 f852 	bl	8006618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <prvIdleTask+0x28>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d9f9      	bls.n	8006570 <prvIdleTask+0x8>
			{
				taskYIELD();
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <prvIdleTask+0x2c>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800658c:	e7f0      	b.n	8006570 <prvIdleTask+0x8>
 800658e:	bf00      	nop
 8006590:	20000620 	.word	0x20000620
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
 80065a2:	e00c      	b.n	80065be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4a12      	ldr	r2, [pc, #72]	; (80065f8 <prvInitialiseTaskLists+0x60>)
 80065b0:	4413      	add	r3, r2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fe3f 	bl	8005236 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3301      	adds	r3, #1
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b09      	cmp	r3, #9
 80065c2:	d9ef      	bls.n	80065a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065c4:	480d      	ldr	r0, [pc, #52]	; (80065fc <prvInitialiseTaskLists+0x64>)
 80065c6:	f7fe fe36 	bl	8005236 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065ca:	480d      	ldr	r0, [pc, #52]	; (8006600 <prvInitialiseTaskLists+0x68>)
 80065cc:	f7fe fe33 	bl	8005236 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065d0:	480c      	ldr	r0, [pc, #48]	; (8006604 <prvInitialiseTaskLists+0x6c>)
 80065d2:	f7fe fe30 	bl	8005236 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065d6:	480c      	ldr	r0, [pc, #48]	; (8006608 <prvInitialiseTaskLists+0x70>)
 80065d8:	f7fe fe2d 	bl	8005236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065dc:	480b      	ldr	r0, [pc, #44]	; (800660c <prvInitialiseTaskLists+0x74>)
 80065de:	f7fe fe2a 	bl	8005236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <prvInitialiseTaskLists+0x78>)
 80065e4:	4a05      	ldr	r2, [pc, #20]	; (80065fc <prvInitialiseTaskLists+0x64>)
 80065e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065e8:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <prvInitialiseTaskLists+0x7c>)
 80065ea:	4a05      	ldr	r2, [pc, #20]	; (8006600 <prvInitialiseTaskLists+0x68>)
 80065ec:	601a      	str	r2, [r3, #0]
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000620 	.word	0x20000620
 80065fc:	200006e8 	.word	0x200006e8
 8006600:	200006fc 	.word	0x200006fc
 8006604:	20000718 	.word	0x20000718
 8006608:	2000072c 	.word	0x2000072c
 800660c:	20000744 	.word	0x20000744
 8006610:	20000710 	.word	0x20000710
 8006614:	20000714 	.word	0x20000714

08006618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800661e:	e019      	b.n	8006654 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006620:	f000 fbc8 	bl	8006db4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006624:	4b10      	ldr	r3, [pc, #64]	; (8006668 <prvCheckTasksWaitingTermination+0x50>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3304      	adds	r3, #4
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe fe8a 	bl	800534a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <prvCheckTasksWaitingTermination+0x54>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	4a0b      	ldr	r2, [pc, #44]	; (800666c <prvCheckTasksWaitingTermination+0x54>)
 800663e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <prvCheckTasksWaitingTermination+0x58>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3b01      	subs	r3, #1
 8006646:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <prvCheckTasksWaitingTermination+0x58>)
 8006648:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800664a:	f000 fbe3 	bl	8006e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f810 	bl	8006674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <prvCheckTasksWaitingTermination+0x58>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e1      	bne.n	8006620 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	2000072c 	.word	0x2000072c
 800666c:	20000758 	.word	0x20000758
 8006670:	20000740 	.word	0x20000740

08006674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	334c      	adds	r3, #76	; 0x4c
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fcdf 	bl	8007044 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800668c:	2b00      	cmp	r3, #0
 800668e:	d108      	bne.n	80066a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fcb5 	bl	8007004 <vPortFree>
				vPortFree( pxTCB );
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fcb2 	bl	8007004 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066a0:	e018      	b.n	80066d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d103      	bne.n	80066b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fca9 	bl	8007004 <vPortFree>
	}
 80066b2:	e00f      	b.n	80066d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d00a      	beq.n	80066d4 <prvDeleteTCB+0x60>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	60fb      	str	r3, [r7, #12]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <prvDeleteTCB+0x5e>
	}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066e2:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <prvResetNextTaskUnblockTime+0x38>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <prvResetNextTaskUnblockTime+0x3c>)
 80066ee:	f04f 32ff 	mov.w	r2, #4294967295
 80066f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066f4:	e008      	b.n	8006708 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f6:	4b07      	ldr	r3, [pc, #28]	; (8006714 <prvResetNextTaskUnblockTime+0x38>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4a04      	ldr	r2, [pc, #16]	; (8006718 <prvResetNextTaskUnblockTime+0x3c>)
 8006706:	6013      	str	r3, [r2, #0]
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	20000710 	.word	0x20000710
 8006718:	20000778 	.word	0x20000778

0800671c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <xTaskGetSchedulerState+0x34>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800672a:	2301      	movs	r3, #1
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	e008      	b.n	8006742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006730:	4b08      	ldr	r3, [pc, #32]	; (8006754 <xTaskGetSchedulerState+0x38>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006738:	2302      	movs	r3, #2
 800673a:	607b      	str	r3, [r7, #4]
 800673c:	e001      	b.n	8006742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800673e:	2300      	movs	r3, #0
 8006740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006742:	687b      	ldr	r3, [r7, #4]
	}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000764 	.word	0x20000764
 8006754:	20000780 	.word	0x20000780

08006758 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d05e      	beq.n	800682c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006772:	4b31      	ldr	r3, [pc, #196]	; (8006838 <xTaskPriorityInherit+0xe0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	429a      	cmp	r2, r3
 800677a:	d24e      	bcs.n	800681a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	2b00      	cmp	r3, #0
 8006782:	db06      	blt.n	8006792 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006784:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <xTaskPriorityInherit+0xe0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	f1c3 020a 	rsb	r2, r3, #10
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6959      	ldr	r1, [r3, #20]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4a26      	ldr	r2, [pc, #152]	; (800683c <xTaskPriorityInherit+0xe4>)
 80067a4:	4413      	add	r3, r2
 80067a6:	4299      	cmp	r1, r3
 80067a8:	d12f      	bne.n	800680a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fdcb 	bl	800534a <uxListRemove>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	2201      	movs	r2, #1
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	43da      	mvns	r2, r3
 80067c6:	4b1e      	ldr	r3, [pc, #120]	; (8006840 <xTaskPriorityInherit+0xe8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4013      	ands	r3, r2
 80067cc:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <xTaskPriorityInherit+0xe8>)
 80067ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067d0:	4b19      	ldr	r3, [pc, #100]	; (8006838 <xTaskPriorityInherit+0xe0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	2201      	movs	r2, #1
 80067e0:	409a      	lsls	r2, r3
 80067e2:	4b17      	ldr	r3, [pc, #92]	; (8006840 <xTaskPriorityInherit+0xe8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	4a15      	ldr	r2, [pc, #84]	; (8006840 <xTaskPriorityInherit+0xe8>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4a10      	ldr	r2, [pc, #64]	; (800683c <xTaskPriorityInherit+0xe4>)
 80067fa:	441a      	add	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fe fd44 	bl	8005290 <vListInsertEnd>
 8006808:	e004      	b.n	8006814 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <xTaskPriorityInherit+0xe0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006814:	2301      	movs	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e008      	b.n	800682c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <xTaskPriorityInherit+0xe0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	429a      	cmp	r2, r3
 8006826:	d201      	bcs.n	800682c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006828:	2301      	movs	r3, #1
 800682a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800682c:	68fb      	ldr	r3, [r7, #12]
	}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	2000061c 	.word	0x2000061c
 800683c:	20000620 	.word	0x20000620
 8006840:	20000760 	.word	0x20000760

08006844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d06e      	beq.n	8006938 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800685a:	4b3a      	ldr	r3, [pc, #232]	; (8006944 <xTaskPriorityDisinherit+0x100>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	429a      	cmp	r2, r3
 8006862:	d00a      	beq.n	800687a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	60fb      	str	r3, [r7, #12]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d044      	beq.n	8006938 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d140      	bne.n	8006938 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3304      	adds	r3, #4
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fd45 	bl	800534a <uxListRemove>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d115      	bne.n	80068f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ca:	491f      	ldr	r1, [pc, #124]	; (8006948 <xTaskPriorityDisinherit+0x104>)
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <xTaskPriorityDisinherit+0xae>
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	2201      	movs	r2, #1
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	43da      	mvns	r2, r3
 80068e8:	4b18      	ldr	r3, [pc, #96]	; (800694c <xTaskPriorityDisinherit+0x108>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4013      	ands	r3, r2
 80068ee:	4a17      	ldr	r2, [pc, #92]	; (800694c <xTaskPriorityDisinherit+0x108>)
 80068f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	f1c3 020a 	rsb	r2, r3, #10
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	2201      	movs	r2, #1
 800690c:	409a      	lsls	r2, r3
 800690e:	4b0f      	ldr	r3, [pc, #60]	; (800694c <xTaskPriorityDisinherit+0x108>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4313      	orrs	r3, r2
 8006914:	4a0d      	ldr	r2, [pc, #52]	; (800694c <xTaskPriorityDisinherit+0x108>)
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4a08      	ldr	r2, [pc, #32]	; (8006948 <xTaskPriorityDisinherit+0x104>)
 8006926:	441a      	add	r2, r3
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	3304      	adds	r3, #4
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7fe fcae 	bl	8005290 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006934:	2301      	movs	r3, #1
 8006936:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006938:	697b      	ldr	r3, [r7, #20]
	}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	2000061c 	.word	0x2000061c
 8006948:	20000620 	.word	0x20000620
 800694c:	20000760 	.word	0x20000760

08006950 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800695e:	2301      	movs	r3, #1
 8006960:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d077      	beq.n	8006a58 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	60fb      	str	r3, [r7, #12]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d902      	bls.n	8006996 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	e002      	b.n	800699c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d058      	beq.n	8006a58 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d153      	bne.n	8006a58 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80069b0:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d10a      	bne.n	80069d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	60bb      	str	r3, [r7, #8]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	db04      	blt.n	80069ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f1c3 020a 	rsb	r2, r3, #10
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	6959      	ldr	r1, [r3, #20]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80069fe:	4413      	add	r3, r2
 8006a00:	4299      	cmp	r1, r3
 8006a02:	d129      	bne.n	8006a58 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fc9e 	bl	800534a <uxListRemove>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	2201      	movs	r2, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4013      	ands	r3, r2
 8006a26:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006a28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	2201      	movs	r2, #1
 8006a30:	409a      	lsls	r2, r3
 8006a32:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	4a0b      	ldr	r2, [pc, #44]	; (8006a68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4a06      	ldr	r2, [pc, #24]	; (8006a64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006a4a:	441a      	add	r2, r3
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4619      	mov	r1, r3
 8006a52:	4610      	mov	r0, r2
 8006a54:	f7fe fc1c 	bl	8005290 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a58:	bf00      	nop
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	2000061c 	.word	0x2000061c
 8006a64:	20000620 	.word	0x20000620
 8006a68:	20000760 	.word	0x20000760

08006a6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a7e:	3201      	adds	r2, #1
 8006a80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006a82:	4b03      	ldr	r3, [pc, #12]	; (8006a90 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a84:	681b      	ldr	r3, [r3, #0]
	}
 8006a86:	4618      	mov	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	2000061c 	.word	0x2000061c

08006a94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a9e:	4b29      	ldr	r3, [pc, #164]	; (8006b44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa4:	4b28      	ldr	r3, [pc, #160]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fc4d 	bl	800534a <uxListRemove>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10b      	bne.n	8006ace <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006ab6:	4b24      	ldr	r3, [pc, #144]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	2201      	movs	r2, #1
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	43da      	mvns	r2, r3
 8006ac4:	4b21      	ldr	r3, [pc, #132]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	4a20      	ldr	r2, [pc, #128]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006acc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d10a      	bne.n	8006aec <prvAddCurrentTaskToDelayedList+0x58>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	481a      	ldr	r0, [pc, #104]	; (8006b50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006ae6:	f7fe fbd3 	bl	8005290 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aea:	e026      	b.n	8006b3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006af4:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d209      	bcs.n	8006b18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b04:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7fe fbe1 	bl	80052d8 <vListInsert>
}
 8006b16:	e010      	b.n	8006b3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b18:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3304      	adds	r3, #4
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f7fe fbd7 	bl	80052d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d202      	bcs.n	8006b3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b34:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6013      	str	r3, [r2, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	2000075c 	.word	0x2000075c
 8006b48:	2000061c 	.word	0x2000061c
 8006b4c:	20000760 	.word	0x20000760
 8006b50:	20000744 	.word	0x20000744
 8006b54:	20000714 	.word	0x20000714
 8006b58:	20000710 	.word	0x20000710
 8006b5c:	20000778 	.word	0x20000778

08006b60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3b04      	subs	r3, #4
 8006b70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3b04      	subs	r3, #4
 8006b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f023 0201 	bic.w	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3b04      	subs	r3, #4
 8006b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b90:	4a0c      	ldr	r2, [pc, #48]	; (8006bc4 <pxPortInitialiseStack+0x64>)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3b14      	subs	r3, #20
 8006b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3b04      	subs	r3, #4
 8006ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f06f 0202 	mvn.w	r2, #2
 8006bae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3b20      	subs	r3, #32
 8006bb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	08006bc9 	.word	0x08006bc9

08006bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bd2:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <prvTaskExitError+0x54>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d00a      	beq.n	8006bf2 <prvTaskExitError+0x2a>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	60fb      	str	r3, [r7, #12]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <prvTaskExitError+0x28>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	60bb      	str	r3, [r7, #8]
}
 8006c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c06:	bf00      	nop
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0fc      	beq.n	8006c08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000010 	.word	0x20000010

08006c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <pxCurrentTCBConst2>)
 8006c22:	6819      	ldr	r1, [r3, #0]
 8006c24:	6808      	ldr	r0, [r1, #0]
 8006c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2a:	f380 8809 	msr	PSP, r0
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	f380 8811 	msr	BASEPRI, r0
 8006c3a:	4770      	bx	lr
 8006c3c:	f3af 8000 	nop.w

08006c40 <pxCurrentTCBConst2>:
 8006c40:	2000061c 	.word	0x2000061c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop

08006c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c48:	4808      	ldr	r0, [pc, #32]	; (8006c6c <prvPortStartFirstTask+0x24>)
 8006c4a:	6800      	ldr	r0, [r0, #0]
 8006c4c:	6800      	ldr	r0, [r0, #0]
 8006c4e:	f380 8808 	msr	MSP, r0
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8814 	msr	CONTROL, r0
 8006c5a:	b662      	cpsie	i
 8006c5c:	b661      	cpsie	f
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	df00      	svc	0
 8006c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c6a:	bf00      	nop
 8006c6c:	e000ed08 	.word	0xe000ed08

08006c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c76:	4b46      	ldr	r3, [pc, #280]	; (8006d90 <xPortStartScheduler+0x120>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a46      	ldr	r2, [pc, #280]	; (8006d94 <xPortStartScheduler+0x124>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10a      	bne.n	8006c96 <xPortStartScheduler+0x26>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c96:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <xPortStartScheduler+0x120>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a3f      	ldr	r2, [pc, #252]	; (8006d98 <xPortStartScheduler+0x128>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d10a      	bne.n	8006cb6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cb6:	4b39      	ldr	r3, [pc, #228]	; (8006d9c <xPortStartScheduler+0x12c>)
 8006cb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	22ff      	movs	r2, #255	; 0xff
 8006cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <xPortStartScheduler+0x130>)
 8006cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cde:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <xPortStartScheduler+0x134>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ce4:	e009      	b.n	8006cfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ce6:	4b2f      	ldr	r3, [pc, #188]	; (8006da4 <xPortStartScheduler+0x134>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	4a2d      	ldr	r2, [pc, #180]	; (8006da4 <xPortStartScheduler+0x134>)
 8006cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b80      	cmp	r3, #128	; 0x80
 8006d04:	d0ef      	beq.n	8006ce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d06:	4b27      	ldr	r3, [pc, #156]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f1c3 0307 	rsb	r3, r3, #7
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d00a      	beq.n	8006d28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60bb      	str	r3, [r7, #8]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d28:	4b1e      	ldr	r3, [pc, #120]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d46:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a14      	ldr	r2, [pc, #80]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d5e:	f000 f8dd 	bl	8006f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d62:	4b12      	ldr	r3, [pc, #72]	; (8006dac <xPortStartScheduler+0x13c>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d68:	f000 f8fc 	bl	8006f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d6c:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <xPortStartScheduler+0x140>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <xPortStartScheduler+0x140>)
 8006d72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d78:	f7ff ff66 	bl	8006c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d7c:	f7ff fa88 	bl	8006290 <vTaskSwitchContext>
	prvTaskExitError();
 8006d80:	f7ff ff22 	bl	8006bc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	e000ed00 	.word	0xe000ed00
 8006d94:	410fc271 	.word	0x410fc271
 8006d98:	410fc270 	.word	0x410fc270
 8006d9c:	e000e400 	.word	0xe000e400
 8006da0:	20000784 	.word	0x20000784
 8006da4:	20000788 	.word	0x20000788
 8006da8:	e000ed20 	.word	0xe000ed20
 8006dac:	20000010 	.word	0x20000010
 8006db0:	e000ef34 	.word	0xe000ef34

08006db4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	607b      	str	r3, [r7, #4]
}
 8006dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dce:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a0d      	ldr	r2, [pc, #52]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d10f      	bne.n	8006e00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <vPortEnterCritical+0x5c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	603b      	str	r3, [r7, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <vPortEnterCritical+0x4a>
	}
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000010 	.word	0x20000010
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e1a:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <vPortExitCritical+0x50>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <vPortExitCritical+0x24>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	607b      	str	r3, [r7, #4]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <vPortExitCritical+0x50>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <vPortExitCritical+0x50>)
 8006e40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e42:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <vPortExitCritical+0x50>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <vPortExitCritical+0x42>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20000010 	.word	0x20000010
	...

08006e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e70:	f3ef 8009 	mrs	r0, PSP
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <pxCurrentTCBConst>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	f01e 0f10 	tst.w	lr, #16
 8006e80:	bf08      	it	eq
 8006e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8a:	6010      	str	r0, [r2, #0]
 8006e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e94:	f380 8811 	msr	BASEPRI, r0
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f7ff f9f6 	bl	8006290 <vTaskSwitchContext>
 8006ea4:	f04f 0000 	mov.w	r0, #0
 8006ea8:	f380 8811 	msr	BASEPRI, r0
 8006eac:	bc09      	pop	{r0, r3}
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	6808      	ldr	r0, [r1, #0]
 8006eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb6:	f01e 0f10 	tst.w	lr, #16
 8006eba:	bf08      	it	eq
 8006ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ec0:	f380 8809 	msr	PSP, r0
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	f3af 8000 	nop.w

08006ed0 <pxCurrentTCBConst>:
 8006ed0:	2000061c 	.word	0x2000061c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop

08006ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	607b      	str	r3, [r7, #4]
}
 8006ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ef2:	f7ff f915 	bl	8006120 <xTaskIncrementTick>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <SysTick_Handler+0x40>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	2300      	movs	r3, #0
 8006f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	f383 8811 	msr	BASEPRI, r3
}
 8006f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <vPortSetupTimerInterrupt+0x34>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <vPortSetupTimerInterrupt+0x38>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vPortSetupTimerInterrupt+0x3c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <vPortSetupTimerInterrupt+0x40>)
 8006f32:	fba2 2303 	umull	r2, r3, r2, r3
 8006f36:	099b      	lsrs	r3, r3, #6
 8006f38:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <vPortSetupTimerInterrupt+0x44>)
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <vPortSetupTimerInterrupt+0x34>)
 8006f40:	2207      	movs	r2, #7
 8006f42:	601a      	str	r2, [r3, #0]
}
 8006f44:	bf00      	nop
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	e000e010 	.word	0xe000e010
 8006f54:	e000e018 	.word	0xe000e018
 8006f58:	20000004 	.word	0x20000004
 8006f5c:	10624dd3 	.word	0x10624dd3
 8006f60:	e000e014 	.word	0xe000e014

08006f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f74 <vPortEnableVFP+0x10>
 8006f68:	6801      	ldr	r1, [r0, #0]
 8006f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f6e:	6001      	str	r1, [r0, #0]
 8006f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f72:	bf00      	nop
 8006f74:	e000ed88 	.word	0xe000ed88

08006f78 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f023 0307 	bic.w	r3, r3, #7
 8006f94:	3308      	adds	r3, #8
 8006f96:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8006f98:	f7ff f818 	bl	8005fcc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8006f9c:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <pvPortMalloc+0x80>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8006fa4:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <pvPortMalloc+0x84>)
 8006fa6:	f023 0307 	bic.w	r3, r3, #7
 8006faa:	461a      	mov	r2, r3
 8006fac:	4b12      	ldr	r3, [pc, #72]	; (8006ff8 <pvPortMalloc+0x80>)
 8006fae:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8006fb0:	4b13      	ldr	r3, [pc, #76]	; (8007000 <pvPortMalloc+0x88>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d813      	bhi.n	8006fe8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <pvPortMalloc+0x88>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	441a      	add	r2, r3
 8006fc8:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <pvPortMalloc+0x88>)
 8006fca:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d90b      	bls.n	8006fe8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8006fd0:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <pvPortMalloc+0x80>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <pvPortMalloc+0x88>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4413      	add	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8006fdc:	4b08      	ldr	r3, [pc, #32]	; (8007000 <pvPortMalloc+0x88>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	4a06      	ldr	r2, [pc, #24]	; (8007000 <pvPortMalloc+0x88>)
 8006fe6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fe8:	f7fe fffe 	bl	8005fe8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20004390 	.word	0x20004390
 8006ffc:	20000794 	.word	0x20000794
 8007000:	2000438c 	.word	0x2000438c

08007004 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <vPortFree+0x24>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60fb      	str	r3, [r7, #12]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <vPortFree+0x22>
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <memset>:
 8007034:	4402      	add	r2, r0
 8007036:	4603      	mov	r3, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	d100      	bne.n	800703e <memset+0xa>
 800703c:	4770      	bx	lr
 800703e:	f803 1b01 	strb.w	r1, [r3], #1
 8007042:	e7f9      	b.n	8007038 <memset+0x4>

08007044 <_reclaim_reent>:
 8007044:	4b29      	ldr	r3, [pc, #164]	; (80070ec <_reclaim_reent+0xa8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4283      	cmp	r3, r0
 800704a:	b570      	push	{r4, r5, r6, lr}
 800704c:	4604      	mov	r4, r0
 800704e:	d04b      	beq.n	80070e8 <_reclaim_reent+0xa4>
 8007050:	69c3      	ldr	r3, [r0, #28]
 8007052:	b143      	cbz	r3, 8007066 <_reclaim_reent+0x22>
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d144      	bne.n	80070e4 <_reclaim_reent+0xa0>
 800705a:	69e3      	ldr	r3, [r4, #28]
 800705c:	6819      	ldr	r1, [r3, #0]
 800705e:	b111      	cbz	r1, 8007066 <_reclaim_reent+0x22>
 8007060:	4620      	mov	r0, r4
 8007062:	f000 f879 	bl	8007158 <_free_r>
 8007066:	6961      	ldr	r1, [r4, #20]
 8007068:	b111      	cbz	r1, 8007070 <_reclaim_reent+0x2c>
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f874 	bl	8007158 <_free_r>
 8007070:	69e1      	ldr	r1, [r4, #28]
 8007072:	b111      	cbz	r1, 800707a <_reclaim_reent+0x36>
 8007074:	4620      	mov	r0, r4
 8007076:	f000 f86f 	bl	8007158 <_free_r>
 800707a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800707c:	b111      	cbz	r1, 8007084 <_reclaim_reent+0x40>
 800707e:	4620      	mov	r0, r4
 8007080:	f000 f86a 	bl	8007158 <_free_r>
 8007084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007086:	b111      	cbz	r1, 800708e <_reclaim_reent+0x4a>
 8007088:	4620      	mov	r0, r4
 800708a:	f000 f865 	bl	8007158 <_free_r>
 800708e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007090:	b111      	cbz	r1, 8007098 <_reclaim_reent+0x54>
 8007092:	4620      	mov	r0, r4
 8007094:	f000 f860 	bl	8007158 <_free_r>
 8007098:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800709a:	b111      	cbz	r1, 80070a2 <_reclaim_reent+0x5e>
 800709c:	4620      	mov	r0, r4
 800709e:	f000 f85b 	bl	8007158 <_free_r>
 80070a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80070a4:	b111      	cbz	r1, 80070ac <_reclaim_reent+0x68>
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 f856 	bl	8007158 <_free_r>
 80070ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80070ae:	b111      	cbz	r1, 80070b6 <_reclaim_reent+0x72>
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 f851 	bl	8007158 <_free_r>
 80070b6:	6a23      	ldr	r3, [r4, #32]
 80070b8:	b1b3      	cbz	r3, 80070e8 <_reclaim_reent+0xa4>
 80070ba:	4620      	mov	r0, r4
 80070bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070c0:	4718      	bx	r3
 80070c2:	5949      	ldr	r1, [r1, r5]
 80070c4:	b941      	cbnz	r1, 80070d8 <_reclaim_reent+0x94>
 80070c6:	3504      	adds	r5, #4
 80070c8:	69e3      	ldr	r3, [r4, #28]
 80070ca:	2d80      	cmp	r5, #128	; 0x80
 80070cc:	68d9      	ldr	r1, [r3, #12]
 80070ce:	d1f8      	bne.n	80070c2 <_reclaim_reent+0x7e>
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 f841 	bl	8007158 <_free_r>
 80070d6:	e7c0      	b.n	800705a <_reclaim_reent+0x16>
 80070d8:	680e      	ldr	r6, [r1, #0]
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 f83c 	bl	8007158 <_free_r>
 80070e0:	4631      	mov	r1, r6
 80070e2:	e7ef      	b.n	80070c4 <_reclaim_reent+0x80>
 80070e4:	2500      	movs	r5, #0
 80070e6:	e7ef      	b.n	80070c8 <_reclaim_reent+0x84>
 80070e8:	bd70      	pop	{r4, r5, r6, pc}
 80070ea:	bf00      	nop
 80070ec:	20000060 	.word	0x20000060

080070f0 <__libc_init_array>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	4d0d      	ldr	r5, [pc, #52]	; (8007128 <__libc_init_array+0x38>)
 80070f4:	4c0d      	ldr	r4, [pc, #52]	; (800712c <__libc_init_array+0x3c>)
 80070f6:	1b64      	subs	r4, r4, r5
 80070f8:	10a4      	asrs	r4, r4, #2
 80070fa:	2600      	movs	r6, #0
 80070fc:	42a6      	cmp	r6, r4
 80070fe:	d109      	bne.n	8007114 <__libc_init_array+0x24>
 8007100:	4d0b      	ldr	r5, [pc, #44]	; (8007130 <__libc_init_array+0x40>)
 8007102:	4c0c      	ldr	r4, [pc, #48]	; (8007134 <__libc_init_array+0x44>)
 8007104:	f000 f880 	bl	8007208 <_init>
 8007108:	1b64      	subs	r4, r4, r5
 800710a:	10a4      	asrs	r4, r4, #2
 800710c:	2600      	movs	r6, #0
 800710e:	42a6      	cmp	r6, r4
 8007110:	d105      	bne.n	800711e <__libc_init_array+0x2e>
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	f855 3b04 	ldr.w	r3, [r5], #4
 8007118:	4798      	blx	r3
 800711a:	3601      	adds	r6, #1
 800711c:	e7ee      	b.n	80070fc <__libc_init_array+0xc>
 800711e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007122:	4798      	blx	r3
 8007124:	3601      	adds	r6, #1
 8007126:	e7f2      	b.n	800710e <__libc_init_array+0x1e>
 8007128:	080072b8 	.word	0x080072b8
 800712c:	080072b8 	.word	0x080072b8
 8007130:	080072b8 	.word	0x080072b8
 8007134:	080072bc 	.word	0x080072bc

08007138 <__retarget_lock_acquire_recursive>:
 8007138:	4770      	bx	lr

0800713a <__retarget_lock_release_recursive>:
 800713a:	4770      	bx	lr

0800713c <memcpy>:
 800713c:	440a      	add	r2, r1
 800713e:	4291      	cmp	r1, r2
 8007140:	f100 33ff 	add.w	r3, r0, #4294967295
 8007144:	d100      	bne.n	8007148 <memcpy+0xc>
 8007146:	4770      	bx	lr
 8007148:	b510      	push	{r4, lr}
 800714a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800714e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007152:	4291      	cmp	r1, r2
 8007154:	d1f9      	bne.n	800714a <memcpy+0xe>
 8007156:	bd10      	pop	{r4, pc}

08007158 <_free_r>:
 8007158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800715a:	2900      	cmp	r1, #0
 800715c:	d044      	beq.n	80071e8 <_free_r+0x90>
 800715e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007162:	9001      	str	r0, [sp, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	f1a1 0404 	sub.w	r4, r1, #4
 800716a:	bfb8      	it	lt
 800716c:	18e4      	addlt	r4, r4, r3
 800716e:	f000 f83f 	bl	80071f0 <__malloc_lock>
 8007172:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <_free_r+0x94>)
 8007174:	9801      	ldr	r0, [sp, #4]
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	b933      	cbnz	r3, 8007188 <_free_r+0x30>
 800717a:	6063      	str	r3, [r4, #4]
 800717c:	6014      	str	r4, [r2, #0]
 800717e:	b003      	add	sp, #12
 8007180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007184:	f000 b83a 	b.w	80071fc <__malloc_unlock>
 8007188:	42a3      	cmp	r3, r4
 800718a:	d908      	bls.n	800719e <_free_r+0x46>
 800718c:	6825      	ldr	r5, [r4, #0]
 800718e:	1961      	adds	r1, r4, r5
 8007190:	428b      	cmp	r3, r1
 8007192:	bf01      	itttt	eq
 8007194:	6819      	ldreq	r1, [r3, #0]
 8007196:	685b      	ldreq	r3, [r3, #4]
 8007198:	1949      	addeq	r1, r1, r5
 800719a:	6021      	streq	r1, [r4, #0]
 800719c:	e7ed      	b.n	800717a <_free_r+0x22>
 800719e:	461a      	mov	r2, r3
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	b10b      	cbz	r3, 80071a8 <_free_r+0x50>
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	d9fa      	bls.n	800719e <_free_r+0x46>
 80071a8:	6811      	ldr	r1, [r2, #0]
 80071aa:	1855      	adds	r5, r2, r1
 80071ac:	42a5      	cmp	r5, r4
 80071ae:	d10b      	bne.n	80071c8 <_free_r+0x70>
 80071b0:	6824      	ldr	r4, [r4, #0]
 80071b2:	4421      	add	r1, r4
 80071b4:	1854      	adds	r4, r2, r1
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	6011      	str	r1, [r2, #0]
 80071ba:	d1e0      	bne.n	800717e <_free_r+0x26>
 80071bc:	681c      	ldr	r4, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	6053      	str	r3, [r2, #4]
 80071c2:	440c      	add	r4, r1
 80071c4:	6014      	str	r4, [r2, #0]
 80071c6:	e7da      	b.n	800717e <_free_r+0x26>
 80071c8:	d902      	bls.n	80071d0 <_free_r+0x78>
 80071ca:	230c      	movs	r3, #12
 80071cc:	6003      	str	r3, [r0, #0]
 80071ce:	e7d6      	b.n	800717e <_free_r+0x26>
 80071d0:	6825      	ldr	r5, [r4, #0]
 80071d2:	1961      	adds	r1, r4, r5
 80071d4:	428b      	cmp	r3, r1
 80071d6:	bf04      	itt	eq
 80071d8:	6819      	ldreq	r1, [r3, #0]
 80071da:	685b      	ldreq	r3, [r3, #4]
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	bf04      	itt	eq
 80071e0:	1949      	addeq	r1, r1, r5
 80071e2:	6021      	streq	r1, [r4, #0]
 80071e4:	6054      	str	r4, [r2, #4]
 80071e6:	e7ca      	b.n	800717e <_free_r+0x26>
 80071e8:	b003      	add	sp, #12
 80071ea:	bd30      	pop	{r4, r5, pc}
 80071ec:	200044d0 	.word	0x200044d0

080071f0 <__malloc_lock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	; (80071f8 <__malloc_lock+0x8>)
 80071f2:	f7ff bfa1 	b.w	8007138 <__retarget_lock_acquire_recursive>
 80071f6:	bf00      	nop
 80071f8:	200044cc 	.word	0x200044cc

080071fc <__malloc_unlock>:
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <__malloc_unlock+0x8>)
 80071fe:	f7ff bf9c 	b.w	800713a <__retarget_lock_release_recursive>
 8007202:	bf00      	nop
 8007204:	200044cc 	.word	0x200044cc

08007208 <_init>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr

08007214 <_fini>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	bf00      	nop
 8007218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721a:	bc08      	pop	{r3}
 800721c:	469e      	mov	lr, r3
 800721e:	4770      	bx	lr
