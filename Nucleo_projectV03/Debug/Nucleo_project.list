
Nucleo_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e88  08008e88  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e90  08008e90  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e90  08008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004518  20000068  08008f00  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004580  08008f00  00024580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dde  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b06  00000000  00000000  00037eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6e  00000000  00000000  0003cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cca  00000000  00000000  0003dd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001953e  00000000  00000000  000629f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da9f0  00000000  00000000  0007bf2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005538  00000000  00000000  00156920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0015be58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d58 	.word	0x08008d58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08008d58 	.word	0x08008d58

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000a00:	f000 b970 	b.w	8000ce4 <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9e08      	ldr	r6, [sp, #32]
 8000a22:	460d      	mov	r5, r1
 8000a24:	4604      	mov	r4, r0
 8000a26:	460f      	mov	r7, r1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d14a      	bne.n	8000ac2 <__udivmoddi4+0xa6>
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	4694      	mov	ip, r2
 8000a30:	d965      	bls.n	8000afe <__udivmoddi4+0xe2>
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	b143      	cbz	r3, 8000a4a <__udivmoddi4+0x2e>
 8000a38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a3c:	f1c3 0220 	rsb	r2, r3, #32
 8000a40:	409f      	lsls	r7, r3
 8000a42:	fa20 f202 	lsr.w	r2, r0, r2
 8000a46:	4317      	orrs	r7, r2
 8000a48:	409c      	lsls	r4, r3
 8000a4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a4e:	fa1f f58c 	uxth.w	r5, ip
 8000a52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a56:	0c22      	lsrs	r2, r4, #16
 8000a58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a60:	fb01 f005 	mul.w	r0, r1, r5
 8000a64:	4290      	cmp	r0, r2
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x62>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a70:	f080 811c 	bcs.w	8000cac <__udivmoddi4+0x290>
 8000a74:	4290      	cmp	r0, r2
 8000a76:	f240 8119 	bls.w	8000cac <__udivmoddi4+0x290>
 8000a7a:	3902      	subs	r1, #2
 8000a7c:	4462      	add	r2, ip
 8000a7e:	1a12      	subs	r2, r2, r0
 8000a80:	b2a4      	uxth	r4, r4
 8000a82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a8e:	fb00 f505 	mul.w	r5, r0, r5
 8000a92:	42a5      	cmp	r5, r4
 8000a94:	d90a      	bls.n	8000aac <__udivmoddi4+0x90>
 8000a96:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a9e:	f080 8107 	bcs.w	8000cb0 <__udivmoddi4+0x294>
 8000aa2:	42a5      	cmp	r5, r4
 8000aa4:	f240 8104 	bls.w	8000cb0 <__udivmoddi4+0x294>
 8000aa8:	4464      	add	r4, ip
 8000aaa:	3802      	subs	r0, #2
 8000aac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab0:	1b64      	subs	r4, r4, r5
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	b11e      	cbz	r6, 8000abe <__udivmoddi4+0xa2>
 8000ab6:	40dc      	lsrs	r4, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e9c6 4300 	strd	r4, r3, [r6]
 8000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	d908      	bls.n	8000ad8 <__udivmoddi4+0xbc>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	f000 80ed 	beq.w	8000ca6 <__udivmoddi4+0x28a>
 8000acc:	2100      	movs	r1, #0
 8000ace:	e9c6 0500 	strd	r0, r5, [r6]
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad8:	fab3 f183 	clz	r1, r3
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d149      	bne.n	8000b74 <__udivmoddi4+0x158>
 8000ae0:	42ab      	cmp	r3, r5
 8000ae2:	d302      	bcc.n	8000aea <__udivmoddi4+0xce>
 8000ae4:	4282      	cmp	r2, r0
 8000ae6:	f200 80f8 	bhi.w	8000cda <__udivmoddi4+0x2be>
 8000aea:	1a84      	subs	r4, r0, r2
 8000aec:	eb65 0203 	sbc.w	r2, r5, r3
 8000af0:	2001      	movs	r0, #1
 8000af2:	4617      	mov	r7, r2
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d0e2      	beq.n	8000abe <__udivmoddi4+0xa2>
 8000af8:	e9c6 4700 	strd	r4, r7, [r6]
 8000afc:	e7df      	b.n	8000abe <__udivmoddi4+0xa2>
 8000afe:	b902      	cbnz	r2, 8000b02 <__udivmoddi4+0xe6>
 8000b00:	deff      	udf	#255	; 0xff
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f040 8090 	bne.w	8000c2c <__udivmoddi4+0x210>
 8000b0c:	1a8a      	subs	r2, r1, r2
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2101      	movs	r1, #1
 8000b18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b20:	0c22      	lsrs	r2, r4, #16
 8000b22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b26:	fb0e f005 	mul.w	r0, lr, r5
 8000b2a:	4290      	cmp	r0, r2
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x124>
 8000b2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x122>
 8000b38:	4290      	cmp	r0, r2
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2b8>
 8000b3e:	4645      	mov	r5, r8
 8000b40:	1a12      	subs	r2, r2, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b48:	fb07 2210 	mls	r2, r7, r0, r2
 8000b4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x14e>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x14c>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2c2>
 8000b68:	4610      	mov	r0, r2
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b72:	e79f      	b.n	8000ab4 <__udivmoddi4+0x98>
 8000b74:	f1c1 0720 	rsb	r7, r1, #32
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa05 f401 	lsl.w	r4, r5, r1
 8000b86:	fa20 f307 	lsr.w	r3, r0, r7
 8000b8a:	40fd      	lsrs	r5, r7
 8000b8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b90:	4323      	orrs	r3, r4
 8000b92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b96:	fa1f fe8c 	uxth.w	lr, ip
 8000b9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b9e:	0c1c      	lsrs	r4, r3, #16
 8000ba0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ba8:	42a5      	cmp	r5, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	fa00 f001 	lsl.w	r0, r0, r1
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b0>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2b4>
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2b4>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4464      	add	r4, ip
 8000bcc:	1b64      	subs	r4, r4, r5
 8000bce:	b29d      	uxth	r5, r3
 8000bd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1da>
 8000be4:	eb1c 0404 	adds.w	r4, ip, r4
 8000be8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2ac>
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2ac>
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	4464      	add	r4, ip
 8000bf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000bfe:	eba4 040e 	sub.w	r4, r4, lr
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46ae      	mov	lr, r5
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x29c>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x298>
 8000c0c:	b156      	cbz	r6, 8000c24 <__udivmoddi4+0x208>
 8000c0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c12:	eb64 040e 	sbc.w	r4, r4, lr
 8000c16:	fa04 f707 	lsl.w	r7, r4, r7
 8000c1a:	40ca      	lsrs	r2, r1
 8000c1c:	40cc      	lsrs	r4, r1
 8000c1e:	4317      	orrs	r7, r2
 8000c20:	e9c6 7400 	strd	r7, r4, [r6]
 8000c24:	4618      	mov	r0, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	f1c3 0120 	rsb	r1, r3, #32
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	fa20 f201 	lsr.w	r2, r0, r1
 8000c38:	fa25 f101 	lsr.w	r1, r5, r1
 8000c3c:	409d      	lsls	r5, r3
 8000c3e:	432a      	orrs	r2, r5
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c50:	0c11      	lsrs	r1, r2, #16
 8000c52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c56:	fb00 f50e 	mul.w	r5, r0, lr
 8000c5a:	428d      	cmp	r5, r1
 8000c5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x258>
 8000c62:	eb1c 0101 	adds.w	r1, ip, r1
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b0>
 8000c6c:	428d      	cmp	r5, r1
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b0>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1b49      	subs	r1, r1, r5
 8000c76:	b292      	uxth	r2, r2
 8000c78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c84:	fb05 f10e 	mul.w	r1, r5, lr
 8000c88:	4291      	cmp	r1, r2
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x282>
 8000c8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c96:	4291      	cmp	r1, r2
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c9a:	3d02      	subs	r5, #2
 8000c9c:	4462      	add	r2, ip
 8000c9e:	1a52      	subs	r2, r2, r1
 8000ca0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0xfc>
 8000ca6:	4631      	mov	r1, r6
 8000ca8:	4630      	mov	r0, r6
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xa2>
 8000cac:	4639      	mov	r1, r7
 8000cae:	e6e6      	b.n	8000a7e <__udivmoddi4+0x62>
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	e6fb      	b.n	8000aac <__udivmoddi4+0x90>
 8000cb4:	4548      	cmp	r0, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f0>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f0>
 8000cc4:	4645      	mov	r5, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x282>
 8000cc8:	462b      	mov	r3, r5
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1da>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x258>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b0>
 8000cd4:	3d02      	subs	r5, #2
 8000cd6:	4462      	add	r2, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x124>
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e70a      	b.n	8000af4 <__udivmoddi4+0xd8>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x14e>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <HAL_DC_Motors_Forward>:
/************************************************************
 *Function Name : HAL_DC_Motors_Forward
 *Description 	: Rotate the DC Motors forward
 *
 ****************************************************/
void HAL_DC_Motors_Forward(void ){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	//----IN1 = H
	//----IN2 = L
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_DC_Motors_Forward+0x20>)
 8000cf4:	f003 f8c8 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cfe:	4802      	ldr	r0, [pc, #8]	; (8000d08 <HAL_DC_Motors_Forward+0x20>)
 8000d00:	f003 f8c2 	bl	8003e88 <HAL_GPIO_WritePin>

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40020400 	.word	0x40020400

08000d0c <HAL_DC_Motors_Backword>:
/**************************************************************
 *Function Name : HAL_DC_Motors_Backword
 *Description 	: Rotate the DC Motors forward
 *
 ****************************************************/
void HAL_DC_Motors_Backword(void ){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	//----IN1 = H
	//----IN2 = L
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_DC_Motors_Backword+0x20>)
 8000d18:	f003 f8b6 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d22:	4802      	ldr	r0, [pc, #8]	; (8000d2c <HAL_DC_Motors_Backword+0x20>)
 8000d24:	f003 f8b0 	bl	8003e88 <HAL_GPIO_WritePin>

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40020400 	.word	0x40020400

08000d30 <HAL_DC_Motors_Stop>:
void HAL_DC_Motors_Stop (void ){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_DC_Motors_Stop+0x20>)
 8000d3c:	f003 f8a4 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d46:	4802      	ldr	r0, [pc, #8]	; (8000d50 <HAL_DC_Motors_Stop+0x20>)
 8000d48:	f003 f89e 	bl	8003e88 <HAL_GPIO_WritePin>

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40020400 	.word	0x40020400

08000d54 <HAL_DC_Motor_Init>:
void HAL_DC_Motor_Init (void ){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&HAL_DC_Motor_Timer);
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_DC_Motor_Init+0x1c>)
 8000d5a:	f003 ff33 	bl	8004bc4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Init(&HAL_DC_Motor_Timer);
 8000d5e:	4804      	ldr	r0, [pc, #16]	; (8000d70 <HAL_DC_Motor_Init+0x1c>)
 8000d60:	f004 f808 	bl	8004d74 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&HAL_DC_Motor_Timer, HAL_DC_Motor_Channel);
 8000d64:	2100      	movs	r1, #0
 8000d66:	4802      	ldr	r0, [pc, #8]	; (8000d70 <HAL_DC_Motor_Init+0x1c>)
 8000d68:	f004 f85e 	bl	8004e28 <HAL_TIM_PWM_Start>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000049c 	.word	0x2000049c

08000d74 <HAL_DC_Motors_Set_Speed>:
void HAL_DC_Motors_Set_Speed (uint8_t Copy_DC_MotorSpeed_percentage){ // Percent
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]


	__HAL_TIM_SET_COMPARE(&HAL_DC_Motor_Timer,HAL_DC_Motor_Channel, Copy_DC_MotorSpeed_percentage);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_DC_Motors_Set_Speed+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	79fa      	ldrb	r2, [r7, #7]
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34





}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000049c 	.word	0x2000049c

08000d98 <HAL_ServoMotor_Init>:

void HAL_ServoMotor_Init (void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Init(&HAL_Servo_Motor_Timer);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <HAL_ServoMotor_Init+0x10>)
 8000d9e:	f003 ffe9 	bl	8004d74 <HAL_TIM_PWM_Init>

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000454 	.word	0x20000454

08000dac <HAL_ServoMotor_Set_Angel>:

void HAL_ServoMotor_Set_Angel (int8_t Copy_ServoMotor_Angel){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]


	uint16_t  Campare_value;
	if (Copy_ServoMotor_Angel < 0 ){
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da17      	bge.n	8000dee <HAL_ServoMotor_Set_Angel+0x42>

		Campare_value = ((((int32_t)50*Copy_ServoMotor_Angel)/9) + 1000);
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2232      	movs	r2, #50	; 0x32
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <HAL_ServoMotor_Set_Angel+0x9c>)
 8000dca:	fb82 1203 	smull	r1, r2, r2, r3
 8000dce:	1052      	asrs	r2, r2, #1
 8000dd0:	17db      	asrs	r3, r3, #31
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000dda:	81fb      	strh	r3, [r7, #14]

		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, Campare_value);
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_ServoMotor_Set_Angel+0xa0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	89fa      	ldrh	r2, [r7, #14]
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 8000de4:	2100      	movs	r1, #0
 8000de6:	4819      	ldr	r0, [pc, #100]	; (8000e4c <HAL_ServoMotor_Set_Angel+0xa0>)
 8000de8:	f004 f81e 	bl	8004e28 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
	}



}
 8000dec:	e028      	b.n	8000e40 <HAL_ServoMotor_Set_Angel+0x94>
	else if (Copy_ServoMotor_Angel > 0){
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dd17      	ble.n	8000e26 <HAL_ServoMotor_Set_Angel+0x7a>
		Campare_value = ((((int32_t)70*Copy_ServoMotor_Angel)/9) + 1000);
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2246      	movs	r2, #70	; 0x46
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <HAL_ServoMotor_Set_Angel+0x9c>)
 8000e02:	fb82 1203 	smull	r1, r2, r2, r3
 8000e06:	1052      	asrs	r2, r2, #1
 8000e08:	17db      	asrs	r3, r3, #31
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000e12:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, Campare_value);
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_ServoMotor_Set_Angel+0xa0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	89fa      	ldrh	r2, [r7, #14]
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480b      	ldr	r0, [pc, #44]	; (8000e4c <HAL_ServoMotor_Set_Angel+0xa0>)
 8000e20:	f004 f802 	bl	8004e28 <HAL_TIM_PWM_Start>
}
 8000e24:	e00c      	b.n	8000e40 <HAL_ServoMotor_Set_Angel+0x94>
	else if (Copy_ServoMotor_Angel == 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d108      	bne.n	8000e40 <HAL_ServoMotor_Set_Angel+0x94>
		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, 1000);
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_ServoMotor_Set_Angel+0xa0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4804      	ldr	r0, [pc, #16]	; (8000e4c <HAL_ServoMotor_Set_Angel+0xa0>)
 8000e3c:	f003 fff4 	bl	8004e28 <HAL_TIM_PWM_Start>
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	38e38e39 	.word	0x38e38e39
 8000e4c:	20000454 	.word	0x20000454

08000e50 <string_toIint>:
static volatile ULTRASONIC_t 		current_ultrasonic = USF ;

/********************************* RTOS Tasks Implementation *************************************/

static void string_toIint(uint16_t num_o)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
	uint16_t Num  = num_o;
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	82fb      	strh	r3, [r7, #22]
			uint16_t reversed_Num = 0 ;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	82bb      	strh	r3, [r7, #20]
			uint8_t I2S[6] = {};
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	2300      	movs	r3, #0
 8000e68:	81bb      	strh	r3, [r7, #12]
			uint8_t Count_Num = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	74fb      	strb	r3, [r7, #19]
			uint8_t ten_multiple = 0 ;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	74bb      	strb	r3, [r7, #18]
			uint8_t firstZeros = 0 ;
 8000e72:	2300      	movs	r3, #0
 8000e74:	747b      	strb	r3, [r7, #17]
			while(Num > 0)
 8000e76:	e02f      	b.n	8000ed8 <string_toIint+0x88>
			{
			  reversed_Num *= 10 ;
 8000e78:	8abb      	ldrh	r3, [r7, #20]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	82bb      	strh	r3, [r7, #20]
			  if(firstZeros == 0)
 8000e84:	7c7b      	ldrb	r3, [r7, #17]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d112      	bne.n	8000eb0 <string_toIint+0x60>
			  {
				  if( (Num %10 ) == 0)
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <string_toIint+0x120>)
 8000e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e92:	08d9      	lsrs	r1, r3, #3
 8000e94:	460b      	mov	r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d103      	bne.n	8000eac <string_toIint+0x5c>
				  {
					  ten_multiple++;
 8000ea4:	7cbb      	ldrb	r3, [r7, #18]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	74bb      	strb	r3, [r7, #18]
 8000eaa:	e001      	b.n	8000eb0 <string_toIint+0x60>
				  }
				  else
				  {
					  firstZeros = 1 ;
 8000eac:	2301      	movs	r3, #1
 8000eae:	747b      	strb	r3, [r7, #17]
				  }
			  }
			  reversed_Num += Num %10 ;
 8000eb0:	8afa      	ldrh	r2, [r7, #22]
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <string_toIint+0x120>)
 8000eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb8:	08d9      	lsrs	r1, r3, #3
 8000eba:	460b      	mov	r3, r1
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	8abb      	ldrh	r3, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	82bb      	strh	r3, [r7, #20]
			  Num /= 10;
 8000ecc:	8afb      	ldrh	r3, [r7, #22]
 8000ece:	4a28      	ldr	r2, [pc, #160]	; (8000f70 <string_toIint+0x120>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	82fb      	strh	r3, [r7, #22]
			while(Num > 0)
 8000ed8:	8afb      	ldrh	r3, [r7, #22]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1cc      	bne.n	8000e78 <string_toIint+0x28>
			}
			while(reversed_Num > 0)
 8000ede:	e01b      	b.n	8000f18 <string_toIint+0xc8>
			{
			  I2S[Count_Num] = (reversed_Num % 10) + '0';
 8000ee0:	8aba      	ldrh	r2, [r7, #20]
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <string_toIint+0x120>)
 8000ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ee8:	08d9      	lsrs	r1, r3, #3
 8000eea:	460b      	mov	r3, r1
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	7cfb      	ldrb	r3, [r7, #19]
 8000efa:	3230      	adds	r2, #48	; 0x30
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	3318      	adds	r3, #24
 8000f00:	443b      	add	r3, r7
 8000f02:	f803 2c10 	strb.w	r2, [r3, #-16]
			  reversed_Num /= 10;
 8000f06:	8abb      	ldrh	r3, [r7, #20]
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <string_toIint+0x120>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	82bb      	strh	r3, [r7, #20]
			  Count_Num++;
 8000f12:	7cfb      	ldrb	r3, [r7, #19]
 8000f14:	3301      	adds	r3, #1
 8000f16:	74fb      	strb	r3, [r7, #19]
			while(reversed_Num > 0)
 8000f18:	8abb      	ldrh	r3, [r7, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e0      	bne.n	8000ee0 <string_toIint+0x90>
			}
			while(ten_multiple)
 8000f1e:	e00b      	b.n	8000f38 <string_toIint+0xe8>
			{
				I2S[Count_Num] = '0';
 8000f20:	7cfb      	ldrb	r3, [r7, #19]
 8000f22:	3318      	adds	r3, #24
 8000f24:	443b      	add	r3, r7
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	f803 2c10 	strb.w	r2, [r3, #-16]
			    Count_Num++;
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	74fb      	strb	r3, [r7, #19]
			    ten_multiple--;
 8000f32:	7cbb      	ldrb	r3, [r7, #18]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	74bb      	strb	r3, [r7, #18]
			while(ten_multiple)
 8000f38:	7cbb      	ldrb	r3, [r7, #18]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f0      	bne.n	8000f20 <string_toIint+0xd0>
			}
			I2S[Count_Num] = '\0';
 8000f3e:	7cfb      	ldrb	r3, [r7, #19]
 8000f40:	3318      	adds	r3, #24
 8000f42:	443b      	add	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	f803 2c10 	strb.w	r2, [r3, #-16]

			HAL_UART_Transmit(&huart3 ,I2S,Count_Num,50);
 8000f4a:	7cfb      	ldrb	r3, [r7, #19]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f107 0108 	add.w	r1, r7, #8
 8000f52:	2332      	movs	r3, #50	; 0x32
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <string_toIint+0x124>)
 8000f56:	f005 fa45 	bl	80063e4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3 ,"\r\n",2,50);
 8000f5a:	2332      	movs	r3, #50	; 0x32
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	4906      	ldr	r1, [pc, #24]	; (8000f78 <string_toIint+0x128>)
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <string_toIint+0x124>)
 8000f62:	f005 fa3f 	bl	80063e4 <HAL_UART_Transmit>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	cccccccd 	.word	0xcccccccd
 8000f74:	200005bc 	.word	0x200005bc
 8000f78:	08008d70 	.word	0x08008d70

08000f7c <RC_SystemInit>:


void RC_SystemInit (void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	flashing_smphr     =  xSemaphoreCreateBinary() ;
 8000f80:	2203      	movs	r2, #3
 8000f82:	2100      	movs	r1, #0
 8000f84:	2001      	movs	r0, #1
 8000f86:	f006 f81b 	bl	8006fc0 <xQueueGenericCreate>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a40      	ldr	r2, [pc, #256]	; (8001090 <RC_SystemInit+0x114>)
 8000f8e:	6013      	str	r3, [r2, #0]
	horn_smphr         =  xSemaphoreCreateBinary() ;
 8000f90:	2203      	movs	r2, #3
 8000f92:	2100      	movs	r1, #0
 8000f94:	2001      	movs	r0, #1
 8000f96:	f006 f813 	bl	8006fc0 <xQueueGenericCreate>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a3d      	ldr	r2, [pc, #244]	; (8001094 <RC_SystemInit+0x118>)
 8000f9e:	6013      	str	r3, [r2, #0]
	Gear_smphr         =  xSemaphoreCreateBinary() ;
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f006 f80b 	bl	8006fc0 <xQueueGenericCreate>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a3a      	ldr	r2, [pc, #232]	; (8001098 <RC_SystemInit+0x11c>)
 8000fae:	6013      	str	r3, [r2, #0]
	speedInc_smphr     =  xSemaphoreCreateBinary() ;
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f006 f803 	bl	8006fc0 <xQueueGenericCreate>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <RC_SystemInit+0x120>)
 8000fbe:	6013      	str	r3, [r2, #0]
	brake_smphr        =  xSemaphoreCreateBinary() ;
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f005 fffb 	bl	8006fc0 <xQueueGenericCreate>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a34      	ldr	r2, [pc, #208]	; (80010a0 <RC_SystemInit+0x124>)
 8000fce:	6013      	str	r3, [r2, #0]
	goRight_smphr  	   =  xSemaphoreCreateBinary() ;
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f005 fff3 	bl	8006fc0 <xQueueGenericCreate>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <RC_SystemInit+0x128>)
 8000fde:	6013      	str	r3, [r2, #0]
	goLeft_smphr       =  xSemaphoreCreateBinary() ;
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f005 ffeb 	bl	8006fc0 <xQueueGenericCreate>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a2e      	ldr	r2, [pc, #184]	; (80010a8 <RC_SystemInit+0x12c>)
 8000fee:	6013      	str	r3, [r2, #0]
	assist_smphr       =  xSemaphoreCreateBinary() ;
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f005 ffe3 	bl	8006fc0 <xQueueGenericCreate>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a2b      	ldr	r2, [pc, #172]	; (80010ac <RC_SystemInit+0x130>)
 8000ffe:	6013      	str	r3, [r2, #0]
	right_park_smphr   =  xSemaphoreCreateBinary() ;
 8001000:	2203      	movs	r2, #3
 8001002:	2100      	movs	r1, #0
 8001004:	2001      	movs	r0, #1
 8001006:	f005 ffdb 	bl	8006fc0 <xQueueGenericCreate>
 800100a:	4603      	mov	r3, r0
 800100c:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <RC_SystemInit+0x134>)
 800100e:	6013      	str	r3, [r2, #0]
	left_park_smphr    =  xSemaphoreCreateBinary() ;
 8001010:	2203      	movs	r2, #3
 8001012:	2100      	movs	r1, #0
 8001014:	2001      	movs	r0, #1
 8001016:	f005 ffd3 	bl	8006fc0 <xQueueGenericCreate>
 800101a:	4603      	mov	r3, r0
 800101c:	4a25      	ldr	r2, [pc, #148]	; (80010b4 <RC_SystemInit+0x138>)
 800101e:	6013      	str	r3, [r2, #0]

	HAL_ServoMotor_Init() ;
 8001020:	f7ff feba 	bl	8000d98 <HAL_ServoMotor_Init>
	HAL_ServoMotor_Set_Angel(0) ;
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fec1 	bl	8000dac <HAL_ServoMotor_Set_Angel>

	HAL_DC_Motor_Init() ;
 800102a:	f7ff fe93 	bl	8000d54 <HAL_DC_Motor_Init>
	HAL_DC_Motors_Stop() ;
 800102e:	f7ff fe7f 	bl	8000d30 <HAL_DC_Motors_Stop>
	HAL_DC_Motors_Set_Speed(0) ;
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fe9e 	bl	8000d74 <HAL_DC_Motors_Set_Speed>

	UltrasonicInit() ;
 8001038:	f000 fff6 	bl	8002028 <UltrasonicInit>



	HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	481d      	ldr	r0, [pc, #116]	; (80010b8 <RC_SystemInit+0x13c>)
 8001044:	f002 ff20 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104e:	481a      	ldr	r0, [pc, #104]	; (80010b8 <RC_SystemInit+0x13c>)
 8001050:	f002 ff1a 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105a:	4817      	ldr	r0, [pc, #92]	; (80010b8 <RC_SystemInit+0x13c>)
 800105c:	f002 ff14 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING,GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <RC_SystemInit+0x13c>)
 8001068:	f002 ff0e 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2102      	movs	r1, #2
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <RC_SystemInit+0x13c>)
 8001072:	f002 ff09 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2101      	movs	r1, #1
 800107a:	480f      	ldr	r0, [pc, #60]	; (80010b8 <RC_SystemInit+0x13c>)
 800107c:	f002 ff04 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_PIN,GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2104      	movs	r1, #4
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <RC_SystemInit+0x13c>)
 8001086:	f002 feff 	bl	8003e88 <HAL_GPIO_WritePin>

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000088 	.word	0x20000088
 8001094:	2000008c 	.word	0x2000008c
 8001098:	20000090 	.word	0x20000090
 800109c:	20000094 	.word	0x20000094
 80010a0:	20000098 	.word	0x20000098
 80010a4:	2000009c 	.word	0x2000009c
 80010a8:	200000a0 	.word	0x200000a0
 80010ac:	200000a4 	.word	0x200000a4
 80010b0:	200000a8 	.word	0x200000a8
 80010b4:	200000ac 	.word	0x200000ac
 80010b8:	40020400 	.word	0x40020400

080010bc <T1_HandleUartReceive>:


void T1_HandleUartReceive (void* pvarg)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef l_retval = HAL_OK ;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
	uint8_t data ;

	while (1)
	{
		HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2102      	movs	r1, #2
 80010cc:	48c4      	ldr	r0, [pc, #784]	; (80013e0 <T1_HandleUartReceive+0x324>)
 80010ce:	f002 fedb 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 80010d2:	4bc4      	ldr	r3, [pc, #784]	; (80013e4 <T1_HandleUartReceive+0x328>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fe4a 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
		HAL_UART_Transmit(&huart3 ,"Speed:",6,50);
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	2206      	movs	r2, #6
 80010e4:	49c0      	ldr	r1, [pc, #768]	; (80013e8 <T1_HandleUartReceive+0x32c>)
 80010e6:	48c1      	ldr	r0, [pc, #772]	; (80013ec <T1_HandleUartReceive+0x330>)
 80010e8:	f005 f97c 	bl	80063e4 <HAL_UART_Transmit>
		string_toIint(Motor_Speed) ;
 80010ec:	4bbd      	ldr	r3, [pc, #756]	; (80013e4 <T1_HandleUartReceive+0x328>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff feab 	bl	8000e50 <string_toIint>
		HAL_UART_Transmit(&huart3 ,"\r\n",2,50);
 80010fa:	2332      	movs	r3, #50	; 0x32
 80010fc:	2202      	movs	r2, #2
 80010fe:	49bc      	ldr	r1, [pc, #752]	; (80013f0 <T1_HandleUartReceive+0x334>)
 8001100:	48ba      	ldr	r0, [pc, #744]	; (80013ec <T1_HandleUartReceive+0x330>)
 8001102:	f005 f96f 	bl	80063e4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3 ,&data,1,50);
 8001106:	f107 010e 	add.w	r1, r7, #14
 800110a:	2332      	movs	r3, #50	; 0x32
 800110c:	2201      	movs	r2, #1
 800110e:	48b7      	ldr	r0, [pc, #732]	; (80013ec <T1_HandleUartReceive+0x330>)
 8001110:	f005 f968 	bl	80063e4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3 ,"\r\n",2,50);
 8001114:	2332      	movs	r3, #50	; 0x32
 8001116:	2202      	movs	r2, #2
 8001118:	49b5      	ldr	r1, [pc, #724]	; (80013f0 <T1_HandleUartReceive+0x334>)
 800111a:	48b4      	ldr	r0, [pc, #720]	; (80013ec <T1_HandleUartReceive+0x330>)
 800111c:	f005 f962 	bl	80063e4 <HAL_UART_Transmit>
		/* handle break assist */
		if ((ENGINE_ENABLE==engine_state)&&(BREAK_ASSIST_ENABLE==assist_state))
 8001120:	4bb4      	ldr	r3, [pc, #720]	; (80013f4 <T1_HandleUartReceive+0x338>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d12b      	bne.n	8001182 <T1_HandleUartReceive+0xc6>
 800112a:	4bb3      	ldr	r3, [pc, #716]	; (80013f8 <T1_HandleUartReceive+0x33c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d126      	bne.n	8001182 <T1_HandleUartReceive+0xc6>
		{
			/* Compare current front ultrasonic distance with maximum accepted value
			  if current val is less than maximum accepted value stop car you are crashing    */
			if (gear_current==GEAR_D)
 8001134:	4bb1      	ldr	r3, [pc, #708]	; (80013fc <T1_HandleUartReceive+0x340>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d10e      	bne.n	800115c <T1_HandleUartReceive+0xa0>
			{
				Ultrasonic_Distance(USF,&Ultrasonic_Buffer[USF]) ;
 800113e:	49b0      	ldr	r1, [pc, #704]	; (8001400 <T1_HandleUartReceive+0x344>)
 8001140:	2000      	movs	r0, #0
 8001142:	f001 fa75 	bl	8002630 <Ultrasonic_Distance>
				if (Ultrasonic_Buffer[USF]<BREAK_ASSIST_MAXIMUM_ACCEPTED_DIST)
 8001146:	4bae      	ldr	r3, [pc, #696]	; (8001400 <T1_HandleUartReceive+0x344>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	2b0e      	cmp	r3, #14
 800114e:	d802      	bhi.n	8001156 <T1_HandleUartReceive+0x9a>
				{
					HAL_DC_Motors_Stop() ;
 8001150:	f7ff fdee 	bl	8000d30 <HAL_DC_Motors_Stop>
 8001154:	e015      	b.n	8001182 <T1_HandleUartReceive+0xc6>
				}
				else
				{
					HAL_DC_Motors_Forward() ;
 8001156:	f7ff fdc7 	bl	8000ce8 <HAL_DC_Motors_Forward>
 800115a:	e012      	b.n	8001182 <T1_HandleUartReceive+0xc6>
			}

			/* Compare current Back ultrasonic distance with maximum accepted value
				if current val is less than maximum accepted value stop car you are crashing    */

			else if (gear_current==GEAR_R)
 800115c:	4ba7      	ldr	r3, [pc, #668]	; (80013fc <T1_HandleUartReceive+0x340>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d10d      	bne.n	8001182 <T1_HandleUartReceive+0xc6>
			{
				Ultrasonic_Distance(USB,&Ultrasonic_Buffer[USB]) ;
 8001166:	49a7      	ldr	r1, [pc, #668]	; (8001404 <T1_HandleUartReceive+0x348>)
 8001168:	2001      	movs	r0, #1
 800116a:	f001 fa61 	bl	8002630 <Ultrasonic_Distance>
				if (Ultrasonic_Buffer[USB]<BREAK_ASSIST_MAXIMUM_ACCEPTED_DIST)
 800116e:	4ba4      	ldr	r3, [pc, #656]	; (8001400 <T1_HandleUartReceive+0x344>)
 8001170:	885b      	ldrh	r3, [r3, #2]
 8001172:	b29b      	uxth	r3, r3
 8001174:	2b0e      	cmp	r3, #14
 8001176:	d802      	bhi.n	800117e <T1_HandleUartReceive+0xc2>
				{
					HAL_DC_Motors_Stop() ;
 8001178:	f7ff fdda 	bl	8000d30 <HAL_DC_Motors_Stop>
 800117c:	e001      	b.n	8001182 <T1_HandleUartReceive+0xc6>
				}
				else
				{
					HAL_DC_Motors_Backword() ;
 800117e:	f7ff fdc5 	bl	8000d0c <HAL_DC_Motors_Backword>

		}
		/*string_toIint(Motor_Speed) ;
		string_toIint(servo_angle) ;*/
		/* handle UART receive */
		l_retval = HAL_UART_Receive(&huart4 ,&data,1,100 ) ;
 8001182:	f107 010e 	add.w	r1, r7, #14
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	489f      	ldr	r0, [pc, #636]	; (8001408 <T1_HandleUartReceive+0x34c>)
 800118c:	f005 f9b5 	bl	80064fa <HAL_UART_Receive>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
		if (l_retval==HAL_OK)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 816e 	bne.w	8001478 <T1_HandleUartReceive+0x3bc>
		{
			switch (data)
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	3b41      	subs	r3, #65	; 0x41
 80011a0:	2b31      	cmp	r3, #49	; 0x31
 80011a2:	f200 8163 	bhi.w	800146c <T1_HandleUartReceive+0x3b0>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <T1_HandleUartReceive+0xf0>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	0800144f 	.word	0x0800144f
 80011b0:	0800135d 	.word	0x0800135d
 80011b4:	0800146d 	.word	0x0800146d
 80011b8:	08001431 	.word	0x08001431
 80011bc:	08001275 	.word	0x08001275
 80011c0:	080012db 	.word	0x080012db
 80011c4:	08001317 	.word	0x08001317
 80011c8:	080012f9 	.word	0x080012f9
 80011cc:	0800146d 	.word	0x0800146d
 80011d0:	0800146d 	.word	0x0800146d
 80011d4:	0800146d 	.word	0x0800146d
 80011d8:	08001299 	.word	0x08001299
 80011dc:	0800146d 	.word	0x0800146d
 80011e0:	0800146d 	.word	0x0800146d
 80011e4:	0800146d 	.word	0x0800146d
 80011e8:	0800146d 	.word	0x0800146d
 80011ec:	0800146d 	.word	0x0800146d
 80011f0:	080012af 	.word	0x080012af
 80011f4:	080013c1 	.word	0x080013c1
 80011f8:	0800146d 	.word	0x0800146d
 80011fc:	0800146d 	.word	0x0800146d
 8001200:	0800146d 	.word	0x0800146d
 8001204:	080012c5 	.word	0x080012c5
 8001208:	0800146d 	.word	0x0800146d
 800120c:	0800146d 	.word	0x0800146d
 8001210:	0800146d 	.word	0x0800146d
 8001214:	0800146d 	.word	0x0800146d
 8001218:	0800146d 	.word	0x0800146d
 800121c:	0800146d 	.word	0x0800146d
 8001220:	0800146d 	.word	0x0800146d
 8001224:	0800146d 	.word	0x0800146d
 8001228:	0800146d 	.word	0x0800146d
 800122c:	0800146d 	.word	0x0800146d
 8001230:	0800146d 	.word	0x0800146d
 8001234:	0800146d 	.word	0x0800146d
 8001238:	0800146d 	.word	0x0800146d
 800123c:	0800146d 	.word	0x0800146d
 8001240:	08001335 	.word	0x08001335
 8001244:	0800146d 	.word	0x0800146d
 8001248:	0800146d 	.word	0x0800146d
 800124c:	0800146d 	.word	0x0800146d
 8001250:	0800146d 	.word	0x0800146d
 8001254:	0800146d 	.word	0x0800146d
 8001258:	080013a3 	.word	0x080013a3
 800125c:	0800146d 	.word	0x0800146d
 8001260:	0800146d 	.word	0x0800146d
 8001264:	0800146d 	.word	0x0800146d
 8001268:	0800146d 	.word	0x0800146d
 800126c:	0800146d 	.word	0x0800146d
 8001270:	08001385 	.word	0x08001385
			{
				case MSG_START_ENGINE :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8001274:	f107 010e 	add.w	r1, r7, #14
 8001278:	2332      	movs	r3, #50	; 0x32
 800127a:	2201      	movs	r2, #1
 800127c:	4862      	ldr	r0, [pc, #392]	; (8001408 <T1_HandleUartReceive+0x34c>)
 800127e:	f005 f8b1 	bl	80063e4 <HAL_UART_Transmit>
					engine_state ^= 0x01 ;
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <T1_HandleUartReceive+0x338>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b59      	ldr	r3, [pc, #356]	; (80013f4 <T1_HandleUartReceive+0x338>)
 8001290:	701a      	strb	r2, [r3, #0]
					Car_EngineFunc() ;
 8001292:	f000 fd9b 	bl	8001dcc <Car_EngineFunc>
				break ;
 8001296:	e0ef      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_LEFT_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8001298:	f107 010e 	add.w	r1, r7, #14
 800129c:	2332      	movs	r3, #50	; 0x32
 800129e:	2201      	movs	r2, #1
 80012a0:	4859      	ldr	r0, [pc, #356]	; (8001408 <T1_HandleUartReceive+0x34c>)
 80012a2:	f005 f89f 	bl	80063e4 <HAL_UART_Transmit>
					transition = SIG_LEFT ;
 80012a6:	4b59      	ldr	r3, [pc, #356]	; (800140c <T1_HandleUartReceive+0x350>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	701a      	strb	r2, [r3, #0]
				break ;
 80012ac:	e0e4      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_RIGHT_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80012ae:	f107 010e 	add.w	r1, r7, #14
 80012b2:	2332      	movs	r3, #50	; 0x32
 80012b4:	2201      	movs	r2, #1
 80012b6:	4854      	ldr	r0, [pc, #336]	; (8001408 <T1_HandleUartReceive+0x34c>)
 80012b8:	f005 f894 	bl	80063e4 <HAL_UART_Transmit>
					transition = SIG_RIGHT ;
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <T1_HandleUartReceive+0x350>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
				break ;
 80012c2:	e0d9      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_WAITING_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80012c4:	f107 010e 	add.w	r1, r7, #14
 80012c8:	2332      	movs	r3, #50	; 0x32
 80012ca:	2201      	movs	r2, #1
 80012cc:	484e      	ldr	r0, [pc, #312]	; (8001408 <T1_HandleUartReceive+0x34c>)
 80012ce:	f005 f889 	bl	80063e4 <HAL_UART_Transmit>
					transition = SIG_W8 ;
 80012d2:	4b4e      	ldr	r3, [pc, #312]	; (800140c <T1_HandleUartReceive+0x350>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	701a      	strb	r2, [r3, #0]
				break ;
 80012d8:	e0ce      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_FLASHING_LIGHT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80012da:	f107 010e 	add.w	r1, r7, #14
 80012de:	2332      	movs	r3, #50	; 0x32
 80012e0:	2201      	movs	r2, #1
 80012e2:	4849      	ldr	r0, [pc, #292]	; (8001408 <T1_HandleUartReceive+0x34c>)
 80012e4:	f005 f87e 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(flashing_smphr) ;
 80012e8:	4b49      	ldr	r3, [pc, #292]	; (8001410 <T1_HandleUartReceive+0x354>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	f005 febf 	bl	8007074 <xQueueGenericSend>
				break ;
 80012f6:	e0bf      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_HORN_BEEPING :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80012f8:	f107 010e 	add.w	r1, r7, #14
 80012fc:	2332      	movs	r3, #50	; 0x32
 80012fe:	2201      	movs	r2, #1
 8001300:	4841      	ldr	r0, [pc, #260]	; (8001408 <T1_HandleUartReceive+0x34c>)
 8001302:	f005 f86f 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(horn_smphr) ;
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <T1_HandleUartReceive+0x358>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	f005 feb0 	bl	8007074 <xQueueGenericSend>
				break ;
 8001314:	e0b0      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_GEAR_CHANGE :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8001316:	f107 010e 	add.w	r1, r7, #14
 800131a:	2332      	movs	r3, #50	; 0x32
 800131c:	2201      	movs	r2, #1
 800131e:	483a      	ldr	r0, [pc, #232]	; (8001408 <T1_HandleUartReceive+0x34c>)
 8001320:	f005 f860 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(Gear_smphr) ;
 8001324:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <T1_HandleUartReceive+0x35c>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	f005 fea1 	bl	8007074 <xQueueGenericSend>
				break ;
 8001332:	e0a1      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_GO_FWD :
					HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2102      	movs	r1, #2
 8001338:	4829      	ldr	r0, [pc, #164]	; (80013e0 <T1_HandleUartReceive+0x324>)
 800133a:	f002 fda5 	bl	8003e88 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 800133e:	f107 010e 	add.w	r1, r7, #14
 8001342:	2332      	movs	r3, #50	; 0x32
 8001344:	2201      	movs	r2, #1
 8001346:	4830      	ldr	r0, [pc, #192]	; (8001408 <T1_HandleUartReceive+0x34c>)
 8001348:	f005 f84c 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(speedInc_smphr) ;
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <T1_HandleUartReceive+0x360>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	f005 fe8d 	bl	8007074 <xQueueGenericSend>
				break ;
 800135a:	e08d      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_BRAKE_BUTTON :
					HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2102      	movs	r1, #2
 8001360:	481f      	ldr	r0, [pc, #124]	; (80013e0 <T1_HandleUartReceive+0x324>)
 8001362:	f002 fd91 	bl	8003e88 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8001366:	f107 010e 	add.w	r1, r7, #14
 800136a:	2332      	movs	r3, #50	; 0x32
 800136c:	2201      	movs	r2, #1
 800136e:	4826      	ldr	r0, [pc, #152]	; (8001408 <T1_HandleUartReceive+0x34c>)
 8001370:	f005 f838 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(brake_smphr) ;
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <T1_HandleUartReceive+0x364>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	f005 fe79 	bl	8007074 <xQueueGenericSend>
				break ;
 8001382:	e079      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_GO_RIGHT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8001384:	f107 010e 	add.w	r1, r7, #14
 8001388:	2332      	movs	r3, #50	; 0x32
 800138a:	2201      	movs	r2, #1
 800138c:	481e      	ldr	r0, [pc, #120]	; (8001408 <T1_HandleUartReceive+0x34c>)
 800138e:	f005 f829 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(goRight_smphr) ;
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <T1_HandleUartReceive+0x368>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	f005 fe6a 	bl	8007074 <xQueueGenericSend>
				break ;
 80013a0:	e06a      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_GO_LEFT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80013a2:	f107 010e 	add.w	r1, r7, #14
 80013a6:	2332      	movs	r3, #50	; 0x32
 80013a8:	2201      	movs	r2, #1
 80013aa:	4817      	ldr	r0, [pc, #92]	; (8001408 <T1_HandleUartReceive+0x34c>)
 80013ac:	f005 f81a 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(goLeft_smphr) ;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <T1_HandleUartReceive+0x36c>)
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	2300      	movs	r3, #0
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	f005 fe5b 	bl	8007074 <xQueueGenericSend>
				break ;
 80013be:	e05b      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_BRAKE_ASSIST :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80013c0:	f107 010e 	add.w	r1, r7, #14
 80013c4:	2332      	movs	r3, #50	; 0x32
 80013c6:	2201      	movs	r2, #1
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <T1_HandleUartReceive+0x34c>)
 80013ca:	f005 f80b 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(assist_smphr) ;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <T1_HandleUartReceive+0x370>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	f005 fe4c 	bl	8007074 <xQueueGenericSend>
				break ;
 80013dc:	e04c      	b.n	8001478 <T1_HandleUartReceive+0x3bc>
 80013de:	bf00      	nop
 80013e0:	40020400 	.word	0x40020400
 80013e4:	20000004 	.word	0x20000004
 80013e8:	08008d74 	.word	0x08008d74
 80013ec:	200005bc 	.word	0x200005bc
 80013f0:	08008d70 	.word	0x08008d70
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000001 	.word	0x20000001
 80013fc:	200000b0 	.word	0x200000b0
 8001400:	200000b4 	.word	0x200000b4
 8001404:	200000b6 	.word	0x200000b6
 8001408:	200004e4 	.word	0x200004e4
 800140c:	20000086 	.word	0x20000086
 8001410:	20000088 	.word	0x20000088
 8001414:	2000008c 	.word	0x2000008c
 8001418:	20000090 	.word	0x20000090
 800141c:	20000094 	.word	0x20000094
 8001420:	20000098 	.word	0x20000098
 8001424:	2000009c 	.word	0x2000009c
 8001428:	200000a0 	.word	0x200000a0
 800142c:	200000a4 	.word	0x200000a4

				case MSG_AUTO_PARKING_RIGHT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8001430:	f107 010e 	add.w	r1, r7, #14
 8001434:	2332      	movs	r3, #50	; 0x32
 8001436:	2201      	movs	r2, #1
 8001438:	4811      	ldr	r0, [pc, #68]	; (8001480 <T1_HandleUartReceive+0x3c4>)
 800143a:	f004 ffd3 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(right_park_smphr) ;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <T1_HandleUartReceive+0x3c8>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	f005 fe14 	bl	8007074 <xQueueGenericSend>
				break ;
 800144c:	e014      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				case MSG_AUTO_PARKING_LEFT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 800144e:	f107 010e 	add.w	r1, r7, #14
 8001452:	2332      	movs	r3, #50	; 0x32
 8001454:	2201      	movs	r2, #1
 8001456:	480a      	ldr	r0, [pc, #40]	; (8001480 <T1_HandleUartReceive+0x3c4>)
 8001458:	f004 ffc4 	bl	80063e4 <HAL_UART_Transmit>
					xSemaphoreGive(left_park_smphr) ;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <T1_HandleUartReceive+0x3cc>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	2300      	movs	r3, #0
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	f005 fe05 	bl	8007074 <xQueueGenericSend>
				break ;
 800146a:	e005      	b.n	8001478 <T1_HandleUartReceive+0x3bc>

				default :
					HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2102      	movs	r1, #2
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <T1_HandleUartReceive+0x3d0>)
 8001472:	f002 fd09 	bl	8003e88 <HAL_GPIO_WritePin>
				break ;
 8001476:	bf00      	nop

			}

		}

		vTaskDelay(20);
 8001478:	2014      	movs	r0, #20
 800147a:	f006 fab1 	bl	80079e0 <vTaskDelay>
		HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 800147e:	e623      	b.n	80010c8 <T1_HandleUartReceive+0xc>
 8001480:	200004e4 	.word	0x200004e4
 8001484:	200000a8 	.word	0x200000a8
 8001488:	200000ac 	.word	0x200000ac
 800148c:	40020400 	.word	0x40020400

08001490 <T2_SignalsAction>:
	}
}


void T2_SignalsAction (void* pvarg)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	while(1)
	{

		switch (Current_state)
 8001498:	4ba3      	ldr	r3, [pc, #652]	; (8001728 <T2_SignalsAction+0x298>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b03      	cmp	r3, #3
 80014a0:	f200 813d 	bhi.w	800171e <T2_SignalsAction+0x28e>
 80014a4:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <T2_SignalsAction+0x1c>)
 80014a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014aa:	bf00      	nop
 80014ac:	080014bd 	.word	0x080014bd
 80014b0:	08001545 	.word	0x08001545
 80014b4:	080015bd 	.word	0x080015bd
 80014b8:	08001635 	.word	0x08001635
			{
				case STATE_NORMAL :
					switch (transition)
 80014bc:	4b9b      	ldr	r3, [pc, #620]	; (800172c <T2_SignalsAction+0x29c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	f200 8124 	bhi.w	8001710 <T2_SignalsAction+0x280>
 80014c8:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <T2_SignalsAction+0x40>)
 80014ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ce:	bf00      	nop
 80014d0:	0800153d 	.word	0x0800153d
 80014d4:	080014e1 	.word	0x080014e1
 80014d8:	08001503 	.word	0x08001503
 80014dc:	08001525 	.word	0x08001525
					{
						case SIG_RIGHT :
							if (ENGINE_ENABLE==engine_state)
 80014e0:	4b93      	ldr	r3, [pc, #588]	; (8001730 <T2_SignalsAction+0x2a0>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <T2_SignalsAction+0x60>
							{
								Car_RightSignalFunc() ;
 80014ea:	f000 fc8f 	bl	8001e0c <Car_RightSignalFunc>
 80014ee:	e001      	b.n	80014f4 <T2_SignalsAction+0x64>
							}
							else
							{
								Car_IdleSignalFunc() ;
 80014f0:	f000 fcd6 	bl	8001ea0 <Car_IdleSignalFunc>
							}
							Current_state = STATE_RIGHT ;
 80014f4:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <T2_SignalsAction+0x298>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 80014fa:	4b8c      	ldr	r3, [pc, #560]	; (800172c <T2_SignalsAction+0x29c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
						break ;
 8001500:	e01f      	b.n	8001542 <T2_SignalsAction+0xb2>

						case SIG_LEFT :
							if (ENGINE_ENABLE==engine_state)
 8001502:	4b8b      	ldr	r3, [pc, #556]	; (8001730 <T2_SignalsAction+0x2a0>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <T2_SignalsAction+0x82>
							{
								Car_LeftSignalFunc() ;
 800150c:	f000 fc90 	bl	8001e30 <Car_LeftSignalFunc>
 8001510:	e001      	b.n	8001516 <T2_SignalsAction+0x86>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8001512:	f000 fcc5 	bl	8001ea0 <Car_IdleSignalFunc>
							}

							Current_state = STATE_LEFT ;
 8001516:	4b84      	ldr	r3, [pc, #528]	; (8001728 <T2_SignalsAction+0x298>)
 8001518:	2202      	movs	r2, #2
 800151a:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 800151c:	4b83      	ldr	r3, [pc, #524]	; (800172c <T2_SignalsAction+0x29c>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
						break ;
 8001522:	e00e      	b.n	8001542 <T2_SignalsAction+0xb2>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 8001524:	f000 fc96 	bl	8001e54 <Car_WaitSignalFunc>
							Previous_state = STATE_NORMAL ;
 8001528:	4b82      	ldr	r3, [pc, #520]	; (8001734 <T2_SignalsAction+0x2a4>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
							Current_state = STATE_WAIT ;
 800152e:	4b7e      	ldr	r3, [pc, #504]	; (8001728 <T2_SignalsAction+0x298>)
 8001530:	2203      	movs	r2, #3
 8001532:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8001534:	4b7d      	ldr	r3, [pc, #500]	; (800172c <T2_SignalsAction+0x29c>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
						break ;
 800153a:	e002      	b.n	8001542 <T2_SignalsAction+0xb2>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 800153c:	f000 fcc2 	bl	8001ec4 <Car_NoneSignalFunc>
						break ;
 8001540:	bf00      	nop
					}

					break ;
 8001542:	e0e5      	b.n	8001710 <T2_SignalsAction+0x280>

				case STATE_RIGHT :
					switch (transition)
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <T2_SignalsAction+0x29c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b03      	cmp	r3, #3
 800154c:	f200 80e2 	bhi.w	8001714 <T2_SignalsAction+0x284>
 8001550:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <T2_SignalsAction+0xc8>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	080015b5 	.word	0x080015b5
 800155c:	08001569 	.word	0x08001569
 8001560:	0800158b 	.word	0x0800158b
 8001564:	0800159d 	.word	0x0800159d
					{
						case SIG_RIGHT :
							if (ENGINE_ENABLE==engine_state)
 8001568:	4b71      	ldr	r3, [pc, #452]	; (8001730 <T2_SignalsAction+0x2a0>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <T2_SignalsAction+0xe8>
							{
								Car_RightSignalFunc() ;
 8001572:	f000 fc4b 	bl	8001e0c <Car_RightSignalFunc>
 8001576:	e001      	b.n	800157c <T2_SignalsAction+0xec>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8001578:	f000 fc92 	bl	8001ea0 <Car_IdleSignalFunc>
							}
							Current_state = STATE_RIGHT ;
 800157c:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <T2_SignalsAction+0x298>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8001582:	4b6a      	ldr	r3, [pc, #424]	; (800172c <T2_SignalsAction+0x29c>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
						break ;
 8001588:	e017      	b.n	80015ba <T2_SignalsAction+0x12a>

						case SIG_LEFT :
							Car_IdleSignalFunc() ;
 800158a:	f000 fc89 	bl	8001ea0 <Car_IdleSignalFunc>
							Current_state   = 	STATE_NORMAL ;
 800158e:	4b66      	ldr	r3, [pc, #408]	; (8001728 <T2_SignalsAction+0x298>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8001594:	4b65      	ldr	r3, [pc, #404]	; (800172c <T2_SignalsAction+0x29c>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
						break ;
 800159a:	e00e      	b.n	80015ba <T2_SignalsAction+0x12a>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 800159c:	f000 fc5a 	bl	8001e54 <Car_WaitSignalFunc>
							Previous_state = STATE_RIGHT ;
 80015a0:	4b64      	ldr	r3, [pc, #400]	; (8001734 <T2_SignalsAction+0x2a4>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
							Current_state   = 	STATE_WAIT ;
 80015a6:	4b60      	ldr	r3, [pc, #384]	; (8001728 <T2_SignalsAction+0x298>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 80015ac:	4b5f      	ldr	r3, [pc, #380]	; (800172c <T2_SignalsAction+0x29c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
						break ;
 80015b2:	e002      	b.n	80015ba <T2_SignalsAction+0x12a>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 80015b4:	f000 fc86 	bl	8001ec4 <Car_NoneSignalFunc>
						break ;
 80015b8:	bf00      	nop
					}
					break ;
 80015ba:	e0ab      	b.n	8001714 <T2_SignalsAction+0x284>

				case STATE_LEFT :
					switch (transition)
 80015bc:	4b5b      	ldr	r3, [pc, #364]	; (800172c <T2_SignalsAction+0x29c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	f200 80a8 	bhi.w	8001718 <T2_SignalsAction+0x288>
 80015c8:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <T2_SignalsAction+0x140>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	0800162d 	.word	0x0800162d
 80015d4:	080015e1 	.word	0x080015e1
 80015d8:	080015f3 	.word	0x080015f3
 80015dc:	08001615 	.word	0x08001615
					{
						case SIG_RIGHT :
							Car_IdleSignalFunc() ;
 80015e0:	f000 fc5e 	bl	8001ea0 <Car_IdleSignalFunc>
							Current_state   = 	STATE_NORMAL ;
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <T2_SignalsAction+0x298>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 80015ea:	4b50      	ldr	r3, [pc, #320]	; (800172c <T2_SignalsAction+0x29c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
						break ;
 80015f0:	e01f      	b.n	8001632 <T2_SignalsAction+0x1a2>

						case SIG_LEFT :
							if (ENGINE_ENABLE==engine_state)
 80015f2:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <T2_SignalsAction+0x2a0>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <T2_SignalsAction+0x172>
							{
								Car_LeftSignalFunc() ;
 80015fc:	f000 fc18 	bl	8001e30 <Car_LeftSignalFunc>
 8001600:	e001      	b.n	8001606 <T2_SignalsAction+0x176>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8001602:	f000 fc4d 	bl	8001ea0 <Car_IdleSignalFunc>
							}
							Current_state = STATE_LEFT ;
 8001606:	4b48      	ldr	r3, [pc, #288]	; (8001728 <T2_SignalsAction+0x298>)
 8001608:	2202      	movs	r2, #2
 800160a:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 800160c:	4b47      	ldr	r3, [pc, #284]	; (800172c <T2_SignalsAction+0x29c>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
						break ;
 8001612:	e00e      	b.n	8001632 <T2_SignalsAction+0x1a2>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 8001614:	f000 fc1e 	bl	8001e54 <Car_WaitSignalFunc>
							Previous_state = STATE_LEFT ;
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <T2_SignalsAction+0x2a4>)
 800161a:	2202      	movs	r2, #2
 800161c:	701a      	strb	r2, [r3, #0]
							Current_state   = 	STATE_WAIT ;
 800161e:	4b42      	ldr	r3, [pc, #264]	; (8001728 <T2_SignalsAction+0x298>)
 8001620:	2203      	movs	r2, #3
 8001622:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <T2_SignalsAction+0x29c>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
						break ;
 800162a:	e002      	b.n	8001632 <T2_SignalsAction+0x1a2>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 800162c:	f000 fc4a 	bl	8001ec4 <Car_NoneSignalFunc>
						break ;
 8001630:	bf00      	nop
					}
					break ;
 8001632:	e071      	b.n	8001718 <T2_SignalsAction+0x288>

				case STATE_WAIT :
					switch (transition)
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <T2_SignalsAction+0x29c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b03      	cmp	r3, #3
 800163c:	d86e      	bhi.n	800171c <T2_SignalsAction+0x28c>
 800163e:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <T2_SignalsAction+0x1b4>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	08001709 	.word	0x08001709
 8001648:	08001655 	.word	0x08001655
 800164c:	0800167b 	.word	0x0800167b
 8001650:	080016a1 	.word	0x080016a1
					{
						case SIG_RIGHT :
							if (STATE_LEFT==Previous_state)
 8001654:	4b37      	ldr	r3, [pc, #220]	; (8001734 <T2_SignalsAction+0x2a4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d103      	bne.n	8001666 <T2_SignalsAction+0x1d6>
							{
								Previous_state = STATE_NORMAL ;
 800165e:	4b35      	ldr	r3, [pc, #212]	; (8001734 <T2_SignalsAction+0x2a4>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e002      	b.n	800166c <T2_SignalsAction+0x1dc>
							}
							else
							{
								Previous_state = STATE_RIGHT ;
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <T2_SignalsAction+0x2a4>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
							}
							Current_state = STATE_WAIT ;
 800166c:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <T2_SignalsAction+0x298>)
 800166e:	2203      	movs	r2, #3
 8001670:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <T2_SignalsAction+0x29c>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
						break ;
 8001678:	e049      	b.n	800170e <T2_SignalsAction+0x27e>

						case SIG_LEFT :
							if (STATE_RIGHT==Previous_state)
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <T2_SignalsAction+0x2a4>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d103      	bne.n	800168c <T2_SignalsAction+0x1fc>
							{
								Previous_state = STATE_NORMAL ;
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <T2_SignalsAction+0x2a4>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e002      	b.n	8001692 <T2_SignalsAction+0x202>
							}
							else
							{
								Previous_state = STATE_LEFT ;
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <T2_SignalsAction+0x2a4>)
 800168e:	2202      	movs	r2, #2
 8001690:	701a      	strb	r2, [r3, #0]
							}

							Current_state = STATE_WAIT ;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <T2_SignalsAction+0x298>)
 8001694:	2203      	movs	r2, #3
 8001696:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <T2_SignalsAction+0x29c>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
						break ;
 800169e:	e036      	b.n	800170e <T2_SignalsAction+0x27e>

						case SIG_W8 :
							if (STATE_NORMAL==Previous_state)
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <T2_SignalsAction+0x2a4>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d105      	bne.n	80016b6 <T2_SignalsAction+0x226>
							{
								Car_IdleSignalFunc() ;
 80016aa:	f000 fbf9 	bl	8001ea0 <Car_IdleSignalFunc>
								Current_state = STATE_NORMAL ;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <T2_SignalsAction+0x298>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e024      	b.n	8001700 <T2_SignalsAction+0x270>
							}
							else if (STATE_RIGHT==Previous_state)
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <T2_SignalsAction+0x2a4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d10d      	bne.n	80016dc <T2_SignalsAction+0x24c>
							{
								if (ENGINE_ENABLE==engine_state)
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <T2_SignalsAction+0x2a0>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <T2_SignalsAction+0x240>
								{
									Car_RightSignalFunc() ;
 80016ca:	f000 fb9f 	bl	8001e0c <Car_RightSignalFunc>
 80016ce:	e001      	b.n	80016d4 <T2_SignalsAction+0x244>
								}
								else
								{
									Car_IdleSignalFunc() ;
 80016d0:	f000 fbe6 	bl	8001ea0 <Car_IdleSignalFunc>
								}
								Current_state = STATE_RIGHT ;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <T2_SignalsAction+0x298>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e011      	b.n	8001700 <T2_SignalsAction+0x270>
							}
							else if (STATE_LEFT==Previous_state)
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <T2_SignalsAction+0x2a4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d10c      	bne.n	8001700 <T2_SignalsAction+0x270>
							{
								if (ENGINE_ENABLE==engine_state)
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <T2_SignalsAction+0x2a0>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <T2_SignalsAction+0x266>
								{
									Car_LeftSignalFunc() ;
 80016f0:	f000 fb9e 	bl	8001e30 <Car_LeftSignalFunc>
 80016f4:	e001      	b.n	80016fa <T2_SignalsAction+0x26a>
								}
								else
								{
									Car_IdleSignalFunc() ;
 80016f6:	f000 fbd3 	bl	8001ea0 <Car_IdleSignalFunc>
								}
								Current_state = STATE_LEFT ;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <T2_SignalsAction+0x298>)
 80016fc:	2202      	movs	r2, #2
 80016fe:	701a      	strb	r2, [r3, #0]
							}
							transition = SIG_NONE ;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <T2_SignalsAction+0x29c>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
						break ;
 8001706:	e002      	b.n	800170e <T2_SignalsAction+0x27e>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8001708:	f000 fbdc 	bl	8001ec4 <Car_NoneSignalFunc>
						break ;
 800170c:	bf00      	nop
					}
					break ;
 800170e:	e005      	b.n	800171c <T2_SignalsAction+0x28c>
					break ;
 8001710:	bf00      	nop
 8001712:	e004      	b.n	800171e <T2_SignalsAction+0x28e>
					break ;
 8001714:	bf00      	nop
 8001716:	e002      	b.n	800171e <T2_SignalsAction+0x28e>
					break ;
 8001718:	bf00      	nop
 800171a:	e000      	b.n	800171e <T2_SignalsAction+0x28e>
					break ;
 800171c:	bf00      	nop
			}

		vTaskDelay(250);
 800171e:	20fa      	movs	r0, #250	; 0xfa
 8001720:	f006 f95e 	bl	80079e0 <vTaskDelay>
		switch (Current_state)
 8001724:	e6b8      	b.n	8001498 <T2_SignalsAction+0x8>
 8001726:	bf00      	nop
 8001728:	20000084 	.word	0x20000084
 800172c:	20000086 	.word	0x20000086
 8001730:	20000000 	.word	0x20000000
 8001734:	20000085 	.word	0x20000085

08001738 <T3_WhiteFrontLightFlashing>:
	}

}

void T3_WhiteFrontLightFlashing (void* pvarg)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	flashing_t flash_state = FLASHING_DISABLE ;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
	while (1)
	{
		if (xSemaphoreTake(flashing_smphr,portMAX_DELAY))
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <T3_WhiteFrontLightFlashing+0x34>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	4618      	mov	r0, r3
 800174e:	f005 fd8f 	bl	8007270 <xQueueSemaphoreTake>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <T3_WhiteFrontLightFlashing+0x28>
		{
			flash_state ^= 0x01 ;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
		}

		Car_FlashingFunc(flash_state) ;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fbee 	bl	8001f44 <Car_FlashingFunc>
		if (xSemaphoreTake(flashing_smphr,portMAX_DELAY))
 8001768:	e7ec      	b.n	8001744 <T3_WhiteFrontLightFlashing+0xc>
 800176a:	bf00      	nop
 800176c:	20000088 	.word	0x20000088

08001770 <T4_HornBeeping>:
	}
}

void T4_HornBeeping (void* pvarg)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

	horn_t horn_status = HORN_DISABLE ;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
	while (1)
	{
		if (xSemaphoreTake(horn_smphr,portMAX_DELAY))
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <T4_HornBeeping+0x34>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fd73 	bl	8007270 <xQueueSemaphoreTake>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <T4_HornBeeping+0x28>
		{
			horn_status ^= 0x01 ;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	f083 0301 	eor.w	r3, r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
		}

		Car_Horn_Func(horn_status) ;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fc28 	bl	8001ff0 <Car_Horn_Func>
		if (xSemaphoreTake(horn_smphr,portMAX_DELAY))
 80017a0:	e7ec      	b.n	800177c <T4_HornBeeping+0xc>
 80017a2:	bf00      	nop
 80017a4:	2000008c 	.word	0x2000008c

080017a8 <T5_ChangeGear>:

	}
}

void T5_ChangeGear (void *pvarg)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(Gear_smphr,portMAX_DELAY))
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <T5_ChangeGear+0x54>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	4618      	mov	r0, r3
 80017ba:	f005 fd59 	bl	8007270 <xQueueSemaphoreTake>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f5      	beq.n	80017b0 <T5_ChangeGear+0x8>
		{
			if  (ENGINE_ENABLE==engine_state)
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <T5_ChangeGear+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <T5_ChangeGear+0x8>
			{

				gear_current ++ ;
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <T5_ChangeGear+0x5c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <T5_ChangeGear+0x5c>)
 80017da:	701a      	strb	r2, [r3, #0]

				if (GEAR_NONE==gear_current)
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <T5_ChangeGear+0x5c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d102      	bne.n	80017ec <T5_ChangeGear+0x44>
				{
					gear_current = GEAR_N ;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <T5_ChangeGear+0x5c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
				}

				Car_Gear_Func (gear_current) ;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <T5_ChangeGear+0x5c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fbc4 	bl	8001f80 <Car_Gear_Func>
		if (xSemaphoreTake(Gear_smphr,portMAX_DELAY))
 80017f8:	e7da      	b.n	80017b0 <T5_ChangeGear+0x8>
 80017fa:	bf00      	nop
 80017fc:	20000090 	.word	0x20000090
 8001800:	20000000 	.word	0x20000000
 8001804:	200000b0 	.word	0x200000b0

08001808 <T6_IncSpeed>:

	}
}

void T6_IncSpeed (void *pvarg)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(speedInc_smphr,portMAX_DELAY))
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <T6_IncSpeed+0x80>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	4618      	mov	r0, r3
 800181a:	f005 fd29 	bl	8007270 <xQueueSemaphoreTake>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f5      	beq.n	8001810 <T6_IncSpeed+0x8>
		{
			if  (ENGINE_ENABLE == engine_state)
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <T6_IncSpeed+0x84>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d127      	bne.n	800187e <T6_IncSpeed+0x76>
			{
				if (gear_current==GEAR_D)
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <T6_IncSpeed+0x88>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d102      	bne.n	800183e <T6_IncSpeed+0x36>
				{
					HAL_DC_Motors_Forward() ;
 8001838:	f7ff fa56 	bl	8000ce8 <HAL_DC_Motors_Forward>
 800183c:	e006      	b.n	800184c <T6_IncSpeed+0x44>
				}
				else if (gear_current==GEAR_R)
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <T6_IncSpeed+0x88>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d101      	bne.n	800184c <T6_IncSpeed+0x44>
				{
					HAL_DC_Motors_Backword() ;
 8001848:	f7ff fa60 	bl	8000d0c <HAL_DC_Motors_Backword>
				}
				Motor_Speed = Motor_Speed + 5 ;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <T6_IncSpeed+0x8c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	3305      	adds	r3, #5
 8001856:	b2db      	uxtb	r3, r3
 8001858:	b25a      	sxtb	r2, r3
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <T6_IncSpeed+0x8c>)
 800185c:	701a      	strb	r2, [r3, #0]
				if (Motor_Speed>100)
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <T6_IncSpeed+0x8c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b25b      	sxtb	r3, r3
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	dd02      	ble.n	800186e <T6_IncSpeed+0x66>
				{
					Motor_Speed = 100 ;
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <T6_IncSpeed+0x8c>)
 800186a:	2264      	movs	r2, #100	; 0x64
 800186c:	701a      	strb	r2, [r3, #0]
				}
				HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <T6_IncSpeed+0x8c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fa7c 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
 800187c:	e7c8      	b.n	8001810 <T6_IncSpeed+0x8>
			}
			else
			{
				Motor_Speed = SPEED_INIT_VALUE ;
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <T6_IncSpeed+0x8c>)
 8001880:	2237      	movs	r2, #55	; 0x37
 8001882:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(speedInc_smphr,portMAX_DELAY))
 8001884:	e7c4      	b.n	8001810 <T6_IncSpeed+0x8>
 8001886:	bf00      	nop
 8001888:	20000094 	.word	0x20000094
 800188c:	20000000 	.word	0x20000000
 8001890:	200000b0 	.word	0x200000b0
 8001894:	20000004 	.word	0x20000004

08001898 <T7_BrakeWheel>:

	}
}

void T7_BrakeWheel (void *pvarg)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(brake_smphr,portMAX_DELAY))
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <T7_BrakeWheel+0x90>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	4618      	mov	r0, r3
 80018aa:	f005 fce1 	bl	8007270 <xQueueSemaphoreTake>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f5      	beq.n	80018a0 <T7_BrakeWheel+0x8>
		{
			if  (ENGINE_ENABLE==engine_state)
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <T7_BrakeWheel+0x94>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d129      	bne.n	8001912 <T7_BrakeWheel+0x7a>
			{
				if (gear_current==GEAR_D)
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <T7_BrakeWheel+0x98>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d102      	bne.n	80018ce <T7_BrakeWheel+0x36>
				{
					HAL_DC_Motors_Forward() ;
 80018c8:	f7ff fa0e 	bl	8000ce8 <HAL_DC_Motors_Forward>
 80018cc:	e006      	b.n	80018dc <T7_BrakeWheel+0x44>
				}
				else if (gear_current==GEAR_R)
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <T7_BrakeWheel+0x98>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d101      	bne.n	80018dc <T7_BrakeWheel+0x44>
				{
					HAL_DC_Motors_Backword() ;
 80018d8:	f7ff fa18 	bl	8000d0c <HAL_DC_Motors_Backword>
				}
				Motor_Speed =Motor_Speed - 5 ;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <T7_BrakeWheel+0x9c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3b05      	subs	r3, #5
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	b25a      	sxtb	r2, r3
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <T7_BrakeWheel+0x9c>)
 80018ec:	701a      	strb	r2, [r3, #0]

				if (Motor_Speed<SPEED_INIT_VALUE)
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <T7_BrakeWheel+0x9c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	2b36      	cmp	r3, #54	; 0x36
 80018f6:	dc04      	bgt.n	8001902 <T7_BrakeWheel+0x6a>
				{
					Motor_Speed = SPEED_INIT_VALUE ;
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <T7_BrakeWheel+0x9c>)
 80018fa:	2237      	movs	r2, #55	; 0x37
 80018fc:	701a      	strb	r2, [r3, #0]
					HAL_DC_Motors_Stop() ;
 80018fe:	f7ff fa17 	bl	8000d30 <HAL_DC_Motors_Stop>
				}

				HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <T7_BrakeWheel+0x9c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b25b      	sxtb	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fa32 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
 8001910:	e7c6      	b.n	80018a0 <T7_BrakeWheel+0x8>
			}
			else
			{
				Motor_Speed = SPEED_INIT_VALUE ;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <T7_BrakeWheel+0x9c>)
 8001914:	2237      	movs	r2, #55	; 0x37
 8001916:	701a      	strb	r2, [r3, #0]
				HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <T7_BrakeWheel+0x9c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b25b      	sxtb	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fa27 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
		if (xSemaphoreTake(brake_smphr,portMAX_DELAY))
 8001926:	e7bb      	b.n	80018a0 <T7_BrakeWheel+0x8>
 8001928:	20000098 	.word	0x20000098
 800192c:	20000000 	.word	0x20000000
 8001930:	200000b0 	.word	0x200000b0
 8001934:	20000004 	.word	0x20000004

08001938 <T8_CarMoveRight>:

	}
}

void T8_CarMoveRight (void *pvarg)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(goRight_smphr,portMAX_DELAY))
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <T8_CarMoveRight+0x4c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	4618      	mov	r0, r3
 800194a:	f005 fc91 	bl	8007270 <xQueueSemaphoreTake>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f5      	beq.n	8001940 <T8_CarMoveRight+0x8>
		{
			servo_angle += 9 ;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <T8_CarMoveRight+0x50>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b25b      	sxtb	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3309      	adds	r3, #9
 800195e:	b2db      	uxtb	r3, r3
 8001960:	b25a      	sxtb	r2, r3
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <T8_CarMoveRight+0x50>)
 8001964:	701a      	strb	r2, [r3, #0]

			if (servo_angle>45)
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <T8_CarMoveRight+0x50>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b25b      	sxtb	r3, r3
 800196c:	2b2d      	cmp	r3, #45	; 0x2d
 800196e:	dd02      	ble.n	8001976 <T8_CarMoveRight+0x3e>
			{
				servo_angle = 45 ;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <T8_CarMoveRight+0x50>)
 8001972:	222d      	movs	r2, #45	; 0x2d
 8001974:	701a      	strb	r2, [r3, #0]
			}

			HAL_ServoMotor_Set_Angel(servo_angle) ;
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <T8_CarMoveRight+0x50>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b25b      	sxtb	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fa15 	bl	8000dac <HAL_ServoMotor_Set_Angel>
		if (xSemaphoreTake(goRight_smphr,portMAX_DELAY))
 8001982:	e7dd      	b.n	8001940 <T8_CarMoveRight+0x8>
 8001984:	2000009c 	.word	0x2000009c
 8001988:	200000b1 	.word	0x200000b1

0800198c <T9_CarMoveLeft>:

		}
	}
}
void T9_CarMoveLeft (void *pvarg)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(goLeft_smphr,portMAX_DELAY))
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <T9_CarMoveLeft+0x50>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	4618      	mov	r0, r3
 800199e:	f005 fc67 	bl	8007270 <xQueueSemaphoreTake>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f5      	beq.n	8001994 <T9_CarMoveLeft+0x8>
		{
			servo_angle -= 9 ;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <T9_CarMoveLeft+0x54>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3b09      	subs	r3, #9
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	b25a      	sxtb	r2, r3
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <T9_CarMoveLeft+0x54>)
 80019b8:	701a      	strb	r2, [r3, #0]

			if (servo_angle<-45)
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <T9_CarMoveLeft+0x54>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 80019c4:	da02      	bge.n	80019cc <T9_CarMoveLeft+0x40>
			{
				servo_angle = -45 ;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <T9_CarMoveLeft+0x54>)
 80019c8:	22d3      	movs	r2, #211	; 0xd3
 80019ca:	701a      	strb	r2, [r3, #0]
			}

			HAL_ServoMotor_Set_Angel(servo_angle) ;
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <T9_CarMoveLeft+0x54>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f9ea 	bl	8000dac <HAL_ServoMotor_Set_Angel>
		if (xSemaphoreTake(goLeft_smphr,portMAX_DELAY))
 80019d8:	e7dc      	b.n	8001994 <T9_CarMoveLeft+0x8>
 80019da:	bf00      	nop
 80019dc:	200000a0 	.word	0x200000a0
 80019e0:	200000b1 	.word	0x200000b1

080019e4 <T10_BreakAssistRun>:
		}
	}
}

void T10_BreakAssistRun (void *pvarg)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(assist_smphr,portMAX_DELAY))
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <T10_BreakAssistRun+0x30>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	4618      	mov	r0, r3
 80019f6:	f005 fc3b 	bl	8007270 <xQueueSemaphoreTake>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f5      	beq.n	80019ec <T10_BreakAssistRun+0x8>
		{
			assist_state ^= 0x01 ;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <T10_BreakAssistRun+0x34>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b02      	ldr	r3, [pc, #8]	; (8001a18 <T10_BreakAssistRun+0x34>)
 8001a0e:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(assist_smphr,portMAX_DELAY))
 8001a10:	e7ec      	b.n	80019ec <T10_BreakAssistRun+0x8>
 8001a12:	bf00      	nop
 8001a14:	200000a4 	.word	0x200000a4
 8001a18:	20000001 	.word	0x20000001

08001a1c <T11_RightParkRun>:
		}
	}
}

void T11_RightParkRun (void *pvarg)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(right_park_smphr,portMAX_DELAY))
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <T11_RightParkRun+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f005 fc1f 	bl	8007270 <xQueueSemaphoreTake>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f5      	beq.n	8001a24 <T11_RightParkRun+0x8>
		{
			if (LEFT_PARK_DISABLE == left_park_stat)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <T11_RightParkRun+0x6c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d1f0      	bne.n	8001a24 <T11_RightParkRun+0x8>
			{
				right_park_stat ^= 0x01 ;
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <T11_RightParkRun+0x70>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f083 0301 	eor.w	r3, r3, #1
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <T11_RightParkRun+0x70>)
 8001a50:	701a      	strb	r2, [r3, #0]
				park_state ^= 0x01 ;
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <T11_RightParkRun+0x74>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f083 0301 	eor.w	r3, r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <T11_RightParkRun+0x74>)
 8001a60:	701a      	strb	r2, [r3, #0]
				HAL_ServoMotor_Set_Angel(SERVO_INIT_ANGLE) ;
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff f9a2 	bl	8000dac <HAL_ServoMotor_Set_Angel>
				Motor_Speed = SPEED_INIT_VALUE+CAR_SPEED_TRIAL ;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <T11_RightParkRun+0x78>)
 8001a6a:	223e      	movs	r2, #62	; 0x3e
 8001a6c:	701a      	strb	r2, [r3, #0]
				HAL_DC_Motors_Set_Speed(Motor_Speed);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <T11_RightParkRun+0x78>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f97c 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
				HAL_DC_Motors_Forward() ;
 8001a7c:	f7ff f934 	bl	8000ce8 <HAL_DC_Motors_Forward>
		if (xSemaphoreTake(right_park_smphr,portMAX_DELAY))
 8001a80:	e7d0      	b.n	8001a24 <T11_RightParkRun+0x8>
 8001a82:	bf00      	nop
 8001a84:	200000a8 	.word	0x200000a8
 8001a88:	20000003 	.word	0x20000003
 8001a8c:	20000002 	.word	0x20000002
 8001a90:	20000005 	.word	0x20000005
 8001a94:	20000004 	.word	0x20000004

08001a98 <T12_LeftParkRun>:
		}
	}
}

void T12_LeftParkRun (void *pvarg)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(left_park_smphr,portMAX_DELAY))
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <T12_LeftParkRun+0x68>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f005 fbe1 	bl	8007270 <xQueueSemaphoreTake>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f5      	beq.n	8001aa0 <T12_LeftParkRun+0x8>
		{
			if (RIGHT_PARK_DISABLE == right_park_stat)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <T12_LeftParkRun+0x6c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d1f0      	bne.n	8001aa0 <T12_LeftParkRun+0x8>
			{
				left_park_stat ^= 0x01 ;
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <T12_LeftParkRun+0x70>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f083 0301 	eor.w	r3, r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <T12_LeftParkRun+0x70>)
 8001acc:	701a      	strb	r2, [r3, #0]
				park_state ^= 0x01 ;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <T12_LeftParkRun+0x74>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f083 0301 	eor.w	r3, r3, #1
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <T12_LeftParkRun+0x74>)
 8001adc:	701a      	strb	r2, [r3, #0]
				HAL_ServoMotor_Set_Angel(SERVO_INIT_ANGLE) ;
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff f964 	bl	8000dac <HAL_ServoMotor_Set_Angel>
				Motor_Speed = SPEED_INIT_VALUE+CAR_SPEED_TRIAL ;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <T12_LeftParkRun+0x78>)
 8001ae6:	223e      	movs	r2, #62	; 0x3e
 8001ae8:	701a      	strb	r2, [r3, #0]
				HAL_DC_Motors_Set_Speed(Motor_Speed);
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <T12_LeftParkRun+0x78>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f93e 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
				HAL_DC_Motors_Forward() ;
 8001af8:	f7ff f8f6 	bl	8000ce8 <HAL_DC_Motors_Forward>
		if (xSemaphoreTake(left_park_smphr,portMAX_DELAY))
 8001afc:	e7d0      	b.n	8001aa0 <T12_LeftParkRun+0x8>
 8001afe:	bf00      	nop
 8001b00:	200000ac 	.word	0x200000ac
 8001b04:	20000002 	.word	0x20000002
 8001b08:	20000003 	.word	0x20000003
 8001b0c:	20000005 	.word	0x20000005
 8001b10:	20000004 	.word	0x20000004

08001b14 <T13_ParkAlgorithmRun>:

	}
}

void T13_ParkAlgorithmRun (void *pvarg)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	static uint8_t servo_vice_counter = 0 ;
	static uint8_t fwd_flag = 0  ;
	while (1)
	{

		if (park_state == PARK_ENABLE)
 8001b1c:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <T13_ParkAlgorithmRun+0x1f4>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80eb 	bne.w	8001cfe <T13_ParkAlgorithmRun+0x1ea>
		{
			/* Right Park Procedure  */
			if (RIGHT_PARK_ENABLE==right_park_stat)
 8001b28:	4b78      	ldr	r3, [pc, #480]	; (8001d0c <T13_ParkAlgorithmRun+0x1f8>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80e3 	bne.w	8001cfa <T13_ParkAlgorithmRun+0x1e6>
			{
				Ultrasonic_Distance(USF,&Ultrasonic_Buffer[USF]) ;
 8001b34:	4976      	ldr	r1, [pc, #472]	; (8001d10 <T13_ParkAlgorithmRun+0x1fc>)
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 fd7a 	bl	8002630 <Ultrasonic_Distance>
				Ultrasonic_Distance(USFR,&Ultrasonic_Buffer[USFR]) ;
 8001b3c:	4975      	ldr	r1, [pc, #468]	; (8001d14 <T13_ParkAlgorithmRun+0x200>)
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f000 fd76 	bl	8002630 <Ultrasonic_Distance>
				Ultrasonic_Distance(USBR,&Ultrasonic_Buffer[USBR]) ;
 8001b44:	4974      	ldr	r1, [pc, #464]	; (8001d18 <T13_ParkAlgorithmRun+0x204>)
 8001b46:	2003      	movs	r0, #3
 8001b48:	f000 fd72 	bl	8002630 <Ultrasonic_Distance>
				if (1==park_slot_flag)
 8001b4c:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <T13_ParkAlgorithmRun+0x208>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	f040 8085 	bne.w	8001c60 <T13_ParkAlgorithmRun+0x14c>
				{
					servo_counter++ ;
 8001b56:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <T13_ParkAlgorithmRun+0x20c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <T13_ParkAlgorithmRun+0x20c>)
 8001b60:	701a      	strb	r2, [r3, #0]
					if (servo_counter<SERVO_COUNTER_TRIAL)
 8001b62:	4b6f      	ldr	r3, [pc, #444]	; (8001d20 <T13_ParkAlgorithmRun+0x20c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b1d      	cmp	r3, #29
 8001b68:	d815      	bhi.n	8001b96 <T13_ParkAlgorithmRun+0x82>
					{

						HAL_ServoMotor_Set_Angel(45);
 8001b6a:	202d      	movs	r0, #45	; 0x2d
 8001b6c:	f7ff f91e 	bl	8000dac <HAL_ServoMotor_Set_Angel>
						Motor_Speed = SPEED_INIT_VALUE + CAR_SPEED_TRIAL + 5 ;
 8001b70:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <T13_ParkAlgorithmRun+0x210>)
 8001b72:	2243      	movs	r2, #67	; 0x43
 8001b74:	701a      	strb	r2, [r3, #0]
						HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8001b76:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <T13_ParkAlgorithmRun+0x210>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f8f8 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
						HAL_DC_Motors_Backword() ;
 8001b84:	f7ff f8c2 	bl	8000d0c <HAL_DC_Motors_Backword>
						HAL_UART_Transmit(&huart3 ,"rotateR\r\n",9,50);
 8001b88:	2332      	movs	r3, #50	; 0x32
 8001b8a:	2209      	movs	r2, #9
 8001b8c:	4966      	ldr	r1, [pc, #408]	; (8001d28 <T13_ParkAlgorithmRun+0x214>)
 8001b8e:	4867      	ldr	r0, [pc, #412]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001b90:	f004 fc28 	bl	80063e4 <HAL_UART_Transmit>
 8001b94:	e0b3      	b.n	8001cfe <T13_ParkAlgorithmRun+0x1ea>

					}
					else
					{
						servo_vice_counter++ ;
 8001b96:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <T13_ParkAlgorithmRun+0x21c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <T13_ParkAlgorithmRun+0x21c>)
 8001ba0:	701a      	strb	r2, [r3, #0]
						if ((servo_vice_counter>SERVO_VICE_COUNTER_TRIAL)||(Ultrasonic_Buffer[USF] <10))
 8001ba2:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <T13_ParkAlgorithmRun+0x21c>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b16      	cmp	r3, #22
 8001ba8:	d804      	bhi.n	8001bb4 <T13_ParkAlgorithmRun+0xa0>
 8001baa:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <T13_ParkAlgorithmRun+0x1fc>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	d83e      	bhi.n	8001c32 <T13_ParkAlgorithmRun+0x11e>
						{
							/*Forward Right */
							HAL_DC_Motors_Set_Speed(Motor_Speed);
 8001bb4:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <T13_ParkAlgorithmRun+0x210>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f8d9 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
							HAL_DC_Motors_Forward() ;
 8001bc2:	f7ff f891 	bl	8000ce8 <HAL_DC_Motors_Forward>
							HAL_ServoMotor_Set_Angel(30);
 8001bc6:	201e      	movs	r0, #30
 8001bc8:	f7ff f8f0 	bl	8000dac <HAL_ServoMotor_Set_Angel>
							HAL_UART_Transmit(&huart3 ,"FWDR\r\n",6,50);
 8001bcc:	2332      	movs	r3, #50	; 0x32
 8001bce:	2206      	movs	r2, #6
 8001bd0:	4958      	ldr	r1, [pc, #352]	; (8001d34 <T13_ParkAlgorithmRun+0x220>)
 8001bd2:	4856      	ldr	r0, [pc, #344]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001bd4:	f004 fc06 	bl	80063e4 <HAL_UART_Transmit>
							vTaskDelay(500);
 8001bd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bdc:	f005 ff00 	bl	80079e0 <vTaskDelay>


							HAL_UART_Transmit(&huart3 ,"Finish\r\n",8,50);
 8001be0:	2332      	movs	r3, #50	; 0x32
 8001be2:	2208      	movs	r2, #8
 8001be4:	4954      	ldr	r1, [pc, #336]	; (8001d38 <T13_ParkAlgorithmRun+0x224>)
 8001be6:	4851      	ldr	r0, [pc, #324]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001be8:	f004 fbfc 	bl	80063e4 <HAL_UART_Transmit>
							park_slot_flag = 0 ;
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <T13_ParkAlgorithmRun+0x208>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
							right_park_stat ^= 0x01 ;
 8001bf2:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <T13_ParkAlgorithmRun+0x1f8>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f083 0301 	eor.w	r3, r3, #1
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <T13_ParkAlgorithmRun+0x1f8>)
 8001c00:	701a      	strb	r2, [r3, #0]
							park_state ^= 0x01 ;
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <T13_ParkAlgorithmRun+0x1f4>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f083 0301 	eor.w	r3, r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <T13_ParkAlgorithmRun+0x1f4>)
 8001c10:	701a      	strb	r2, [r3, #0]
							HAL_ServoMotor_Set_Angel(0) ;
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff f8ca 	bl	8000dac <HAL_ServoMotor_Set_Angel>
							HAL_DC_Motors_Stop() ;
 8001c18:	f7ff f88a 	bl	8000d30 <HAL_DC_Motors_Stop>
							Motor_Speed = SPEED_INIT_VALUE ;
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <T13_ParkAlgorithmRun+0x210>)
 8001c1e:	2237      	movs	r2, #55	; 0x37
 8001c20:	701a      	strb	r2, [r3, #0]
							HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8001c22:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <T13_ParkAlgorithmRun+0x210>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b25b      	sxtb	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f8a2 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
 8001c30:	e065      	b.n	8001cfe <T13_ParkAlgorithmRun+0x1ea>


						}
						else
						{
							Motor_Speed = SPEED_INIT_VALUE+CAR_SPEED_TRIAL  ;
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <T13_ParkAlgorithmRun+0x210>)
 8001c34:	223e      	movs	r2, #62	; 0x3e
 8001c36:	701a      	strb	r2, [r3, #0]
							HAL_DC_Motors_Set_Speed(Motor_Speed);
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <T13_ParkAlgorithmRun+0x210>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f897 	bl	8000d74 <HAL_DC_Motors_Set_Speed>
							HAL_DC_Motors_Backword() ;
 8001c46:	f7ff f861 	bl	8000d0c <HAL_DC_Motors_Backword>
							HAL_UART_Transmit(&huart3 ,"rotateL\r\n",9,50);
 8001c4a:	2332      	movs	r3, #50	; 0x32
 8001c4c:	2209      	movs	r2, #9
 8001c4e:	493b      	ldr	r1, [pc, #236]	; (8001d3c <T13_ParkAlgorithmRun+0x228>)
 8001c50:	4836      	ldr	r0, [pc, #216]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001c52:	f004 fbc7 	bl	80063e4 <HAL_UART_Transmit>
							HAL_ServoMotor_Set_Angel(-45);
 8001c56:	f06f 002c 	mvn.w	r0, #44	; 0x2c
 8001c5a:	f7ff f8a7 	bl	8000dac <HAL_ServoMotor_Set_Angel>
 8001c5e:	e04e      	b.n	8001cfe <T13_ParkAlgorithmRun+0x1ea>
						}

					}

				}
				else if (Ultrasonic_Buffer[USF] >BREAK_ASSIST_MAXIMUM_ACCEPTED_DIST)
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <T13_ParkAlgorithmRun+0x1fc>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	d944      	bls.n	8001cf4 <T13_ParkAlgorithmRun+0x1e0>
				{
					HAL_DC_Motors_Set_Speed(SPEED_INIT_VALUE+CAR_SPEED_TRIAL);
 8001c6a:	203e      	movs	r0, #62	; 0x3e
 8001c6c:	f7ff f882 	bl	8000d74 <HAL_DC_Motors_Set_Speed>

					HAL_UART_Transmit(&huart3 ,"USFR:",5,50);
 8001c70:	2332      	movs	r3, #50	; 0x32
 8001c72:	2205      	movs	r2, #5
 8001c74:	4932      	ldr	r1, [pc, #200]	; (8001d40 <T13_ParkAlgorithmRun+0x22c>)
 8001c76:	482d      	ldr	r0, [pc, #180]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001c78:	f004 fbb4 	bl	80063e4 <HAL_UART_Transmit>
					string_toIint(Ultrasonic_Buffer[USFR]) ;
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <T13_ParkAlgorithmRun+0x1fc>)
 8001c7e:	889b      	ldrh	r3, [r3, #4]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f8e4 	bl	8000e50 <string_toIint>
					HAL_UART_Transmit(&huart3 ,"\r\n",2,50);
 8001c88:	2332      	movs	r3, #50	; 0x32
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	492d      	ldr	r1, [pc, #180]	; (8001d44 <T13_ParkAlgorithmRun+0x230>)
 8001c8e:	4827      	ldr	r0, [pc, #156]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001c90:	f004 fba8 	bl	80063e4 <HAL_UART_Transmit>

					HAL_UART_Transmit(&huart3 ,"USBR:",5,50);
 8001c94:	2332      	movs	r3, #50	; 0x32
 8001c96:	2205      	movs	r2, #5
 8001c98:	492b      	ldr	r1, [pc, #172]	; (8001d48 <T13_ParkAlgorithmRun+0x234>)
 8001c9a:	4824      	ldr	r0, [pc, #144]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001c9c:	f004 fba2 	bl	80063e4 <HAL_UART_Transmit>
					string_toIint(Ultrasonic_Buffer[USBR]) ;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <T13_ParkAlgorithmRun+0x1fc>)
 8001ca2:	88db      	ldrh	r3, [r3, #6]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f8d2 	bl	8000e50 <string_toIint>
					HAL_UART_Transmit(&huart3 ,"\r\n",2,50);
 8001cac:	2332      	movs	r3, #50	; 0x32
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4924      	ldr	r1, [pc, #144]	; (8001d44 <T13_ParkAlgorithmRun+0x230>)
 8001cb2:	481e      	ldr	r0, [pc, #120]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001cb4:	f004 fb96 	bl	80063e4 <HAL_UART_Transmit>

					if ((Ultrasonic_Buffer[USFR]>CAR_ACCEPTED_PARK_DIST_WIDTH)&&(Ultrasonic_Buffer[USBR]>CAR_ACCEPTED_PARK_DIST_WIDTH))
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <T13_ParkAlgorithmRun+0x1fc>)
 8001cba:	889b      	ldrh	r3, [r3, #4]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b23      	cmp	r3, #35	; 0x23
 8001cc0:	d91d      	bls.n	8001cfe <T13_ParkAlgorithmRun+0x1ea>
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <T13_ParkAlgorithmRun+0x1fc>)
 8001cc4:	88db      	ldrh	r3, [r3, #6]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b23      	cmp	r3, #35	; 0x23
 8001cca:	d918      	bls.n	8001cfe <T13_ParkAlgorithmRun+0x1ea>
					{
						vTaskDelay(TIME_OUT_COUNTER) ;
 8001ccc:	f240 404c 	movw	r0, #1100	; 0x44c
 8001cd0:	f005 fe86 	bl	80079e0 <vTaskDelay>
						HAL_DC_Motors_Stop() ;
 8001cd4:	f7ff f82c 	bl	8000d30 <HAL_DC_Motors_Stop>
						vTaskDelay(STOPPAGE_TIME) ;
 8001cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cdc:	f005 fe80 	bl	80079e0 <vTaskDelay>

						park_slot_flag = 1 ;
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <T13_ParkAlgorithmRun+0x208>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]

						HAL_UART_Transmit(&huart3 ,"Slot founded\r\n",14,50);
 8001ce6:	2332      	movs	r3, #50	; 0x32
 8001ce8:	220e      	movs	r2, #14
 8001cea:	4918      	ldr	r1, [pc, #96]	; (8001d4c <T13_ParkAlgorithmRun+0x238>)
 8001cec:	480f      	ldr	r0, [pc, #60]	; (8001d2c <T13_ParkAlgorithmRun+0x218>)
 8001cee:	f004 fb79 	bl	80063e4 <HAL_UART_Transmit>
 8001cf2:	e004      	b.n	8001cfe <T13_ParkAlgorithmRun+0x1ea>
					}
				}
				else
				{
					HAL_DC_Motors_Stop() ;
 8001cf4:	f7ff f81c 	bl	8000d30 <HAL_DC_Motors_Stop>
 8001cf8:	e001      	b.n	8001cfe <T13_ParkAlgorithmRun+0x1ea>
			}



			/* Left Park Procedure  */
			else if (LEFT_PARK_ENABLE==left_park_stat)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <T13_ParkAlgorithmRun+0x23c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
			{

			}
		}
		vTaskDelay(50);
 8001cfe:	2032      	movs	r0, #50	; 0x32
 8001d00:	f005 fe6e 	bl	80079e0 <vTaskDelay>
		if (park_state == PARK_ENABLE)
 8001d04:	e70a      	b.n	8001b1c <T13_ParkAlgorithmRun+0x8>
 8001d06:	bf00      	nop
 8001d08:	20000005 	.word	0x20000005
 8001d0c:	20000002 	.word	0x20000002
 8001d10:	200000b4 	.word	0x200000b4
 8001d14:	200000b8 	.word	0x200000b8
 8001d18:	200000ba 	.word	0x200000ba
 8001d1c:	200000cd 	.word	0x200000cd
 8001d20:	200000ce 	.word	0x200000ce
 8001d24:	20000004 	.word	0x20000004
 8001d28:	08008d7c 	.word	0x08008d7c
 8001d2c:	200005bc 	.word	0x200005bc
 8001d30:	200000cf 	.word	0x200000cf
 8001d34:	08008d88 	.word	0x08008d88
 8001d38:	08008d90 	.word	0x08008d90
 8001d3c:	08008d9c 	.word	0x08008d9c
 8001d40:	08008da8 	.word	0x08008da8
 8001d44:	08008d70 	.word	0x08008d70
 8001d48:	08008db0 	.word	0x08008db0
 8001d4c:	08008db8 	.word	0x08008db8
 8001d50:	20000003 	.word	0x20000003

08001d54 <T14_GetUltrasonicRead>:

	}
}

void T14_GetUltrasonicRead (void *pvarg)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Ultrasonic_Distance(current_ultrasonic ,&Ultrasonic_Buffer[current_ultrasonic] );
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <T14_GetUltrasonicRead+0x6c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <T14_GetUltrasonicRead+0x6c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <T14_GetUltrasonicRead+0x70>)
 8001d6c:	440b      	add	r3, r1
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4610      	mov	r0, r2
 8001d72:	f000 fc5d 	bl	8002630 <Ultrasonic_Distance>
		current_ultrasonic++ ;
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <T14_GetUltrasonicRead+0x6c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <T14_GetUltrasonicRead+0x6c>)
 8001d82:	701a      	strb	r2, [r3, #0]
		if (current_ultrasonic == 6 )
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <T14_GetUltrasonicRead+0x6c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d114      	bne.n	8001db8 <T14_GetUltrasonicRead+0x64>
		{
			current_ultrasonic = USF ;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <T14_GetUltrasonicRead+0x6c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]

			for (uint8_t index = 0 ; index < 6 ; index++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e00b      	b.n	8001db2 <T14_GetUltrasonicRead+0x5e>
			{
				Important_Buffer[index] = Ultrasonic_Buffer[index] ;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <T14_GetUltrasonicRead+0x70>)
 8001da0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001da4:	b291      	uxth	r1, r2
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <T14_GetUltrasonicRead+0x74>)
 8001da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (uint8_t index = 0 ; index < 6 ; index++)
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	3301      	adds	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d9f0      	bls.n	8001d9a <T14_GetUltrasonicRead+0x46>
			}
		}
		vTaskDelay(50) ;
 8001db8:	2032      	movs	r0, #50	; 0x32
 8001dba:	f005 fe11 	bl	80079e0 <vTaskDelay>
		Ultrasonic_Distance(current_ultrasonic ,&Ultrasonic_Buffer[current_ultrasonic] );
 8001dbe:	e7cd      	b.n	8001d5c <T14_GetUltrasonicRead+0x8>
 8001dc0:	200000cc 	.word	0x200000cc
 8001dc4:	200000b4 	.word	0x200000b4
 8001dc8:	200000c0 	.word	0x200000c0

08001dcc <Car_EngineFunc>:



/*********************************** static function Implementation *********************************/
static void Car_EngineFunc(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	if (ENGINE_ENABLE==engine_state)
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <Car_EngineFunc+0x38>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <Car_EngineFunc+0x1c>
	{
		/* turn on engine indication led */
		HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <Car_EngineFunc+0x3c>)
 8001de2:	f002 f851 	bl	8003e88 <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 8001de6:	e00a      	b.n	8001dfe <Car_EngineFunc+0x32>
	else if (ENGINE_DISABLE==engine_state)
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <Car_EngineFunc+0x38>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <Car_EngineFunc+0x32>
		HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <Car_EngineFunc+0x3c>)
 8001dfa:	f002 f845 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000
 8001e08:	40020400 	.word	0x40020400

08001e0c <Car_RightSignalFunc>:

static void Car_RightSignalFunc(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDS_YELLOW_RIGHT_SIDE) ;
 8001e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <Car_RightSignalFunc+0x20>)
 8001e16:	f002 f850 	bl	8003eba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <Car_RightSignalFunc+0x20>)
 8001e22:	f002 f831 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40020400 	.word	0x40020400

08001e30 <Car_LeftSignalFunc>:

static void Car_LeftSignalFunc(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDS_YELLOW_LEFT_SIDE) ;
 8001e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <Car_LeftSignalFunc+0x20>)
 8001e3a:	f002 f83e 	bl	8003eba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <Car_LeftSignalFunc+0x20>)
 8001e46:	f002 f81f 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40020400 	.word	0x40020400

08001e54 <Car_WaitSignalFunc>:

static void Car_WaitSignalFunc(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	if (0==sync_flag)
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <Car_WaitSignalFunc+0x44>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10e      	bne.n	8001e80 <Car_WaitSignalFunc+0x2c>
	{
		HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8001e62:	2201      	movs	r2, #1
 8001e64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <Car_WaitSignalFunc+0x48>)
 8001e6a:	f002 f80d 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e74:	4809      	ldr	r0, [pc, #36]	; (8001e9c <Car_WaitSignalFunc+0x48>)
 8001e76:	f002 f807 	bl	8003e88 <HAL_GPIO_WritePin>
		sync_flag = 1 ;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <Car_WaitSignalFunc+0x44>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
	}
	/*Toggle Both Right and left signal leds */
	HAL_GPIO_TogglePin(LEDS_YELLOW_RIGHT_SIDE) ;
 8001e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <Car_WaitSignalFunc+0x48>)
 8001e86:	f002 f818 	bl	8003eba <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDS_YELLOW_LEFT_SIDE) ;
 8001e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e8e:	4803      	ldr	r0, [pc, #12]	; (8001e9c <Car_WaitSignalFunc+0x48>)
 8001e90:	f002 f813 	bl	8003eba <HAL_GPIO_TogglePin>
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000087 	.word	0x20000087
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <Car_IdleSignalFunc>:

static void Car_IdleSignalFunc(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	/*Turn off Right yellow signal leds*/
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <Car_IdleSignalFunc+0x20>)
 8001eac:	f001 ffec 	bl	8003e88 <HAL_GPIO_WritePin>
	/*Turn on left yellow signal leds*/
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb6:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <Car_IdleSignalFunc+0x20>)
 8001eb8:	f001 ffe6 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40020400 	.word	0x40020400

08001ec4 <Car_NoneSignalFunc>:

static void Car_NoneSignalFunc(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	switch (Current_state)
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <Car_NoneSignalFunc+0x74>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d82f      	bhi.n	8001f32 <Car_NoneSignalFunc+0x6e>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <Car_NoneSignalFunc+0x14>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001f11 	.word	0x08001f11
 8001ee4:	08001f2d 	.word	0x08001f2d
	{
		case STATE_NORMAL :
			Car_IdleSignalFunc() ;
 8001ee8:	f7ff ffda 	bl	8001ea0 <Car_IdleSignalFunc>
			sync_flag = 0 ;
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <Car_NoneSignalFunc+0x78>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
		break ;
 8001ef2:	e01e      	b.n	8001f32 <Car_NoneSignalFunc+0x6e>

		case STATE_RIGHT :
			if (ENGINE_ENABLE==engine_state)
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <Car_NoneSignalFunc+0x7c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <Car_NoneSignalFunc+0x40>
			{
				Car_RightSignalFunc() ;
 8001efe:	f7ff ff85 	bl	8001e0c <Car_RightSignalFunc>
 8001f02:	e001      	b.n	8001f08 <Car_NoneSignalFunc+0x44>
			}
			else
			{
				Car_IdleSignalFunc() ;
 8001f04:	f7ff ffcc 	bl	8001ea0 <Car_IdleSignalFunc>
			}
			sync_flag = 0 ;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <Car_NoneSignalFunc+0x78>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
		break ;
 8001f0e:	e010      	b.n	8001f32 <Car_NoneSignalFunc+0x6e>

		case SIG_LEFT :
			if (ENGINE_ENABLE==engine_state)
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <Car_NoneSignalFunc+0x7c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <Car_NoneSignalFunc+0x5c>
			{
				Car_LeftSignalFunc() ;
 8001f1a:	f7ff ff89 	bl	8001e30 <Car_LeftSignalFunc>
 8001f1e:	e001      	b.n	8001f24 <Car_NoneSignalFunc+0x60>
			}
			else
			{
				Car_IdleSignalFunc() ;
 8001f20:	f7ff ffbe 	bl	8001ea0 <Car_IdleSignalFunc>
			}
			sync_flag = 0 ;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <Car_NoneSignalFunc+0x78>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
		break ;
 8001f2a:	e002      	b.n	8001f32 <Car_NoneSignalFunc+0x6e>

		case SIG_W8 :
			Car_WaitSignalFunc() ;
 8001f2c:	f7ff ff92 	bl	8001e54 <Car_WaitSignalFunc>
		break ;
 8001f30:	bf00      	nop
	}
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000084 	.word	0x20000084
 8001f3c:	20000087 	.word	0x20000087
 8001f40:	20000000 	.word	0x20000000

08001f44 <Car_FlashingFunc>:


static void Car_FlashingFunc (flashing_t state)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
	if (FLASHING_DISABLE==state)
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <Car_FlashingFunc+0x1e>
	{
		HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING , GPIO_PIN_SET ) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5a:	4808      	ldr	r0, [pc, #32]	; (8001f7c <Car_FlashingFunc+0x38>)
 8001f5c:	f001 ff94 	bl	8003e88 <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 8001f60:	e008      	b.n	8001f74 <Car_FlashingFunc+0x30>
	else if(FLASHING_ENABLE==state)
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <Car_FlashingFunc+0x30>
		HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING , GPIO_PIN_RESET ) ;
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <Car_FlashingFunc+0x38>)
 8001f70:	f001 ff8a 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40020400 	.word	0x40020400

08001f80 <Car_Gear_Func>:


static void Car_Gear_Func (gear_t state)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
	HAL_DC_Motors_Stop() ;
 8001f8a:	f7fe fed1 	bl	8000d30 <HAL_DC_Motors_Stop>
	Motor_Speed = SPEED_INIT_VALUE ;
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <Car_Gear_Func+0x68>)
 8001f90:	2237      	movs	r2, #55	; 0x37
 8001f92:	701a      	strb	r2, [r3, #0]
	switch (state)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d016      	beq.n	8001fc8 <Car_Gear_Func+0x48>
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	dc1c      	bgt.n	8001fd8 <Car_Gear_Func+0x58>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <Car_Gear_Func+0x28>
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d008      	beq.n	8001fb8 <Car_Gear_Func+0x38>
 8001fa6:	e017      	b.n	8001fd8 <Car_Gear_Func+0x58>
	{
		case GEAR_N :
			HAL_DC_Motors_Stop() ;
 8001fa8:	f7fe fec2 	bl	8000d30 <HAL_DC_Motors_Stop>
			HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	2101      	movs	r1, #1
 8001fb0:	480e      	ldr	r0, [pc, #56]	; (8001fec <Car_Gear_Func+0x6c>)
 8001fb2:	f001 ff69 	bl	8003e88 <HAL_GPIO_WritePin>
		break ;
 8001fb6:	e012      	b.n	8001fde <Car_Gear_Func+0x5e>

		case GEAR_D :
			HAL_DC_Motors_Forward() ;
 8001fb8:	f7fe fe96 	bl	8000ce8 <HAL_DC_Motors_Forward>
			HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	480a      	ldr	r0, [pc, #40]	; (8001fec <Car_Gear_Func+0x6c>)
 8001fc2:	f001 ff61 	bl	8003e88 <HAL_GPIO_WritePin>
		break ;
 8001fc6:	e00a      	b.n	8001fde <Car_Gear_Func+0x5e>

		case GEAR_R :
			HAL_DC_Motors_Backword() ;
 8001fc8:	f7fe fea0 	bl	8000d0c <HAL_DC_Motors_Backword>
			HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4806      	ldr	r0, [pc, #24]	; (8001fec <Car_Gear_Func+0x6c>)
 8001fd2:	f001 ff59 	bl	8003e88 <HAL_GPIO_WritePin>
		break ;
 8001fd6:	e002      	b.n	8001fde <Car_Gear_Func+0x5e>

		default :
			HAL_DC_Motors_Stop() ;
 8001fd8:	f7fe feaa 	bl	8000d30 <HAL_DC_Motors_Stop>
		break ;
 8001fdc:	bf00      	nop

	}
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	40020400 	.word	0x40020400

08001ff0 <Car_Horn_Func>:


static void Car_Horn_Func (horn_t state)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	if (HORN_DISABLE==state)
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <Car_Horn_Func+0x1c>
	{
		HAL_GPIO_WritePin(BUZZER_PIN , GPIO_PIN_SET ) ;
 8002000:	2201      	movs	r2, #1
 8002002:	2104      	movs	r1, #4
 8002004:	4807      	ldr	r0, [pc, #28]	; (8002024 <Car_Horn_Func+0x34>)
 8002006:	f001 ff3f 	bl	8003e88 <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 800200a:	e007      	b.n	800201c <Car_Horn_Func+0x2c>
	else if(HORN_ENABLE==state)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d104      	bne.n	800201c <Car_Horn_Func+0x2c>
		HAL_GPIO_WritePin(BUZZER_PIN , GPIO_PIN_RESET ) ;
 8002012:	2200      	movs	r2, #0
 8002014:	2104      	movs	r1, #4
 8002016:	4803      	ldr	r0, [pc, #12]	; (8002024 <Car_Horn_Func+0x34>)
 8002018:	f001 ff36 	bl	8003e88 <HAL_GPIO_WritePin>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40020400 	.word	0x40020400

08002028 <UltrasonicInit>:




void UltrasonicInit(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800202c:	2100      	movs	r1, #0
 800202e:	480c      	ldr	r0, [pc, #48]	; (8002060 <UltrasonicInit+0x38>)
 8002030:	f003 f812 	bl	8005058 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8002034:	2104      	movs	r1, #4
 8002036:	480a      	ldr	r0, [pc, #40]	; (8002060 <UltrasonicInit+0x38>)
 8002038:	f003 f80e 	bl	8005058 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800203c:	2108      	movs	r1, #8
 800203e:	4808      	ldr	r0, [pc, #32]	; (8002060 <UltrasonicInit+0x38>)
 8002040:	f003 f80a 	bl	8005058 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8002044:	210c      	movs	r1, #12
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <UltrasonicInit+0x38>)
 8002048:	f003 f806 	bl	8005058 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800204c:	2100      	movs	r1, #0
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <UltrasonicInit+0x3c>)
 8002050:	f003 f802 	bl	8005058 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002054:	2104      	movs	r1, #4
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <UltrasonicInit+0x3c>)
 8002058:	f002 fffe 	bl	8005058 <HAL_TIM_IC_Start_IT>
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200003c4 	.word	0x200003c4
 8002064:	2000040c 	.word	0x2000040c

08002068 <delay>:


void delay (uint16_t time)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <delay+0x30>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 800207a:	bf00      	nop
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <delay+0x30>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	429a      	cmp	r2, r3
 8002086:	d3f9      	bcc.n	800207c <delay+0x14>
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200003c4 	.word	0x200003c4

0800209c <HAL_TIM_IC_CaptureCallback>:


// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <HAL_TIM_IC_CaptureCallback+0x258>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	f040 814e 	bne.w	800234c <HAL_TIM_IC_CaptureCallback+0x2b0>
		// This interrupt is from TIM1

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7f1b      	ldrb	r3, [r3, #28]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d14c      	bne.n	8002152 <HAL_TIM_IC_CaptureCallback+0xb6>
		{
			g_edgeDetect++;
 80020b8:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b8d      	ldr	r3, [pc, #564]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80020c4:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 80020c6:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d11c      	bne.n	800210a <HAL_TIM_IC_CaptureCallback+0x6e>
			{
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 80020d0:	4b8a      	ldr	r3, [pc, #552]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80020d8:	4b88      	ldr	r3, [pc, #544]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	4b87      	ldr	r3, [pc, #540]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020a 	bic.w	r2, r2, #10
 80020e6:	621a      	str	r2, [r3, #32]
 80020e8:	4b84      	ldr	r3, [pc, #528]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a1a      	ldr	r2, [r3, #32]
 80020ee:	4b83      	ldr	r3, [pc, #524]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0202 	orr.w	r2, r2, #2
 80020f6:	621a      	str	r2, [r3, #32]

				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80020f8:	4b80      	ldr	r3, [pc, #512]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	4b7f      	ldr	r3, [pc, #508]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0202 	orr.w	r2, r2, #2
 8002106:	60da      	str	r2, [r3, #12]


			}
		}
	}
}
 8002108:	e1c5      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 800210a:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	f040 81c0 	bne.w	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);  // read second value
 8002116:	2100      	movs	r1, #0
 8002118:	4878      	ldr	r0, [pc, #480]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800211a:	f003 fbdb 	bl	80058d4 <HAL_TIM_ReadCapturedValue>
 800211e:	4603      	mov	r3, r0
 8002120:	4a77      	ldr	r2, [pc, #476]	; (8002300 <HAL_TIM_IC_CaptureCallback+0x264>)
 8002122:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002124:	4b75      	ldr	r3, [pc, #468]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	4b74      	ldr	r3, [pc, #464]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 020a 	bic.w	r2, r2, #10
 8002132:	621a      	str	r2, [r3, #32]
 8002134:	4b71      	ldr	r3, [pc, #452]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a12      	ldr	r2, [r2, #32]
 800213e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8002140:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0202 	bic.w	r2, r2, #2
 800214e:	60da      	str	r2, [r3, #12]
}
 8002150:	e1a1      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7f1b      	ldrb	r3, [r3, #28]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d14c      	bne.n	80021f4 <HAL_TIM_IC_CaptureCallback+0x158>
			g_edgeDetect++;
 800215a:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002166:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8002168:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d11c      	bne.n	80021ac <HAL_TIM_IC_CaptureCallback+0x110>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8002172:	4b62      	ldr	r3, [pc, #392]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800217a:	4b60      	ldr	r3, [pc, #384]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002188:	621a      	str	r2, [r3, #32]
 800218a:	4b5c      	ldr	r3, [pc, #368]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a1a      	ldr	r2, [r3, #32]
 8002190:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0220 	orr.w	r2, r2, #32
 8002198:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 800219a:	4b58      	ldr	r3, [pc, #352]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b56      	ldr	r3, [pc, #344]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0204 	orr.w	r2, r2, #4
 80021a8:	60da      	str	r2, [r3, #12]
}
 80021aa:	e174      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 80021ac:	4b52      	ldr	r3, [pc, #328]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f040 816f 	bne.w	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);  // read second value
 80021b8:	2104      	movs	r1, #4
 80021ba:	4850      	ldr	r0, [pc, #320]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80021bc:	f003 fb8a 	bl	80058d4 <HAL_TIM_ReadCapturedValue>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_TIM_IC_CaptureCallback+0x264>)
 80021c4:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80021c6:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a1a      	ldr	r2, [r3, #32]
 80021cc:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021d4:	621a      	str	r2, [r3, #32]
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b48      	ldr	r3, [pc, #288]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a12      	ldr	r2, [r2, #32]
 80021e0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	4b44      	ldr	r3, [pc, #272]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0204 	bic.w	r2, r2, #4
 80021f0:	60da      	str	r2, [r3, #12]
}
 80021f2:	e150      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7f1b      	ldrb	r3, [r3, #28]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d14c      	bne.n	8002296 <HAL_TIM_IC_CaptureCallback+0x1fa>
			g_edgeDetect++;
 80021fc:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002208:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d11c      	bne.n	800224e <HAL_TIM_IC_CaptureCallback+0x1b2>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 800221c:	4b37      	ldr	r3, [pc, #220]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6a1a      	ldr	r2, [r3, #32]
 8002222:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800222a:	621a      	str	r2, [r3, #32]
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 800223c:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0208 	orr.w	r2, r2, #8
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	e123      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	f040 811e 	bne.w	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);  // read second value
 800225a:	2108      	movs	r1, #8
 800225c:	4827      	ldr	r0, [pc, #156]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800225e:	f003 fb39 	bl	80058d4 <HAL_TIM_ReadCapturedValue>
 8002262:	4603      	mov	r3, r0
 8002264:	4a26      	ldr	r2, [pc, #152]	; (8002300 <HAL_TIM_IC_CaptureCallback+0x264>)
 8002266:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a1a      	ldr	r2, [r3, #32]
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8002276:	621a      	str	r2, [r3, #32]
 8002278:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a12      	ldr	r2, [r2, #32]
 8002282:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0208 	bic.w	r2, r2, #8
 8002292:	60da      	str	r2, [r3, #12]
}
 8002294:	e0ff      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7f1b      	ldrb	r3, [r3, #28]
 800229a:	2b08      	cmp	r3, #8
 800229c:	f040 80fb 	bne.w	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
			g_edgeDetect++;
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80022ac:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d125      	bne.n	8002304 <HAL_TIM_IC_CaptureCallback+0x268>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6a1a      	ldr	r2, [r3, #32]
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80022ce:	621a      	str	r2, [r3, #32]
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022de:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x260>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0210 	orr.w	r2, r2, #16
 80022ee:	60da      	str	r2, [r3, #12]
}
 80022f0:	e0d1      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
 80022f2:	bf00      	nop
 80022f4:	40010000 	.word	0x40010000
 80022f8:	200000d4 	.word	0x200000d4
 80022fc:	200003c4 	.word	0x200003c4
 8002300:	200000d0 	.word	0x200000d0
			else if (g_edgeDetect==2)   // if the first is already captured
 8002304:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	f040 80c3 	bne.w	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);  // read second value
 8002310:	210c      	movs	r1, #12
 8002312:	4864      	ldr	r0, [pc, #400]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x408>)
 8002314:	f003 fade 	bl	80058d4 <HAL_TIM_ReadCapturedValue>
 8002318:	4603      	mov	r3, r0
 800231a:	4a63      	ldr	r2, [pc, #396]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x40c>)
 800231c:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 800231e:	4b61      	ldr	r3, [pc, #388]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x408>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x408>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800232c:	621a      	str	r2, [r3, #32]
 800232e:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x408>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x408>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a12      	ldr	r2, [r2, #32]
 8002338:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 800233a:	4b5a      	ldr	r3, [pc, #360]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x408>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x408>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0210 	bic.w	r2, r2, #16
 8002348:	60da      	str	r2, [r3, #12]
}
 800234a:	e0a4      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
	else if (htim->Instance == TIM2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	f040 809f 	bne.w	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7f1b      	ldrb	r3, [r3, #28]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d14b      	bne.n	80023f8 <HAL_TIM_IC_CaptureCallback+0x35c>
			g_edgeDetect++;
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 800236c:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d11c      	bne.n	80023b2 <HAL_TIM_IC_CaptureCallback+0x316>
				__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002380:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a1a      	ldr	r2, [r3, #32]
 8002386:	4b49      	ldr	r3, [pc, #292]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020a 	bic.w	r2, r2, #10
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0202 	orr.w	r2, r2, #2
 800239e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0202 	orr.w	r2, r2, #2
 80023ae:	60da      	str	r2, [r3, #12]
}
 80023b0:	e071      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 80023b2:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d16c      	bne.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);  // read second value
 80023bc:	2100      	movs	r1, #0
 80023be:	483b      	ldr	r0, [pc, #236]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023c0:	f003 fa88 	bl	80058d4 <HAL_TIM_ReadCapturedValue>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x40c>)
 80023c8:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80023ca:	4b38      	ldr	r3, [pc, #224]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 020a 	bic.w	r2, r2, #10
 80023d8:	621a      	str	r2, [r3, #32]
 80023da:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b33      	ldr	r3, [pc, #204]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a12      	ldr	r2, [r2, #32]
 80023e4:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0202 	bic.w	r2, r2, #2
 80023f4:	60da      	str	r2, [r3, #12]
}
 80023f6:	e04e      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7f1b      	ldrb	r3, [r3, #28]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d14a      	bne.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
			g_edgeDetect++;
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3301      	adds	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 800240c:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d11c      	bne.n	8002452 <HAL_TIM_IC_CaptureCallback+0x3b6>
				__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a1a      	ldr	r2, [r3, #32]
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800242e:	621a      	str	r2, [r3, #32]
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0220 	orr.w	r2, r2, #32
 800243e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0204 	orr.w	r2, r2, #4
 800244e:	60da      	str	r2, [r3, #12]
}
 8002450:	e021      	b.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d11c      	bne.n	8002496 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);  // read second value
 800245c:	2104      	movs	r1, #4
 800245e:	4813      	ldr	r0, [pc, #76]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002460:	f003 fa38 	bl	80058d4 <HAL_TIM_ReadCapturedValue>
 8002464:	4603      	mov	r3, r0
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8002468:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002478:	621a      	str	r2, [r3, #32]
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a12      	ldr	r2, [r2, #32]
 8002484:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x410>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0204 	bic.w	r2, r2, #4
 8002494:	60da      	str	r2, [r3, #12]
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200000d4 	.word	0x200000d4
 80024a4:	200003c4 	.word	0x200003c4
 80024a8:	200000d0 	.word	0x200000d0
 80024ac:	2000040c 	.word	0x2000040c

080024b0 <UltrasonicTrigger>:


void UltrasonicTrigger(ULTRASONIC_t Value)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
	switch(Value)
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	f200 80ab 	bhi.w	8002618 <UltrasonicTrigger+0x168>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <UltrasonicTrigger+0x18>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024e1 	.word	0x080024e1
 80024cc:	08002515 	.word	0x08002515
 80024d0:	08002549 	.word	0x08002549
 80024d4:	0800257d 	.word	0x0800257d
 80024d8:	080025b1 	.word	0x080025b1
 80024dc:	080025e5 	.word	0x080025e5
	{
	case USF:
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80024e0:	4b4f      	ldr	r3, [pc, #316]	; (8002620 <UltrasonicTrigger+0x170>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	4b4e      	ldr	r3, [pc, #312]	; (8002620 <UltrasonicTrigger+0x170>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0202 	orr.w	r2, r2, #2
 80024ee:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80024f0:	2201      	movs	r2, #1
 80024f2:	2101      	movs	r1, #1
 80024f4:	484b      	ldr	r0, [pc, #300]	; (8002624 <UltrasonicTrigger+0x174>)
 80024f6:	f001 fcc7 	bl	8003e88 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 80024fa:	200a      	movs	r0, #10
 80024fc:	f7ff fdb4 	bl	8002068 <delay>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002500:	4b47      	ldr	r3, [pc, #284]	; (8002620 <UltrasonicTrigger+0x170>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002508:	2200      	movs	r2, #0
 800250a:	2101      	movs	r1, #1
 800250c:	4845      	ldr	r0, [pc, #276]	; (8002624 <UltrasonicTrigger+0x174>)
 800250e:	f001 fcbb 	bl	8003e88 <HAL_GPIO_WritePin>

		break;
 8002512:	e081      	b.n	8002618 <UltrasonicTrigger+0x168>

	case USB:
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8002514:	4b42      	ldr	r3, [pc, #264]	; (8002620 <UltrasonicTrigger+0x170>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <UltrasonicTrigger+0x170>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0204 	orr.w	r2, r2, #4
 8002522:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002524:	2201      	movs	r2, #1
 8002526:	2102      	movs	r1, #2
 8002528:	483e      	ldr	r0, [pc, #248]	; (8002624 <UltrasonicTrigger+0x174>)
 800252a:	f001 fcad 	bl	8003e88 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 800252e:	200a      	movs	r0, #10
 8002530:	f7ff fd9a 	bl	8002068 <delay>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <UltrasonicTrigger+0x170>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);  // pull the TRIG pin low
 800253c:	2200      	movs	r2, #0
 800253e:	2102      	movs	r1, #2
 8002540:	4838      	ldr	r0, [pc, #224]	; (8002624 <UltrasonicTrigger+0x174>)
 8002542:	f001 fca1 	bl	8003e88 <HAL_GPIO_WritePin>

		break;
 8002546:	e067      	b.n	8002618 <UltrasonicTrigger+0x168>

	case USFR:
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <UltrasonicTrigger+0x170>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <UltrasonicTrigger+0x170>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0208 	orr.w	r2, r2, #8
 8002556:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002558:	2201      	movs	r2, #1
 800255a:	2104      	movs	r1, #4
 800255c:	4831      	ldr	r0, [pc, #196]	; (8002624 <UltrasonicTrigger+0x174>)
 800255e:	f001 fc93 	bl	8003e88 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 8002562:	200a      	movs	r0, #10
 8002564:	f7ff fd80 	bl	8002068 <delay>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002568:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <UltrasonicTrigger+0x170>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002570:	2200      	movs	r2, #0
 8002572:	2104      	movs	r1, #4
 8002574:	482b      	ldr	r0, [pc, #172]	; (8002624 <UltrasonicTrigger+0x174>)
 8002576:	f001 fc87 	bl	8003e88 <HAL_GPIO_WritePin>

		break;
 800257a:	e04d      	b.n	8002618 <UltrasonicTrigger+0x168>

	case USBR:
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <UltrasonicTrigger+0x170>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <UltrasonicTrigger+0x170>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0210 	orr.w	r2, r2, #16
 800258a:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_4, TRIG_PIN_4, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800258c:	2201      	movs	r2, #1
 800258e:	2108      	movs	r1, #8
 8002590:	4824      	ldr	r0, [pc, #144]	; (8002624 <UltrasonicTrigger+0x174>)
 8002592:	f001 fc79 	bl	8003e88 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 8002596:	200a      	movs	r0, #10
 8002598:	f7ff fd66 	bl	8002068 <delay>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <UltrasonicTrigger+0x170>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(TRIG_PORT_4, TRIG_PIN_4, GPIO_PIN_RESET);  // pull the TRIG pin low
 80025a4:	2200      	movs	r2, #0
 80025a6:	2108      	movs	r1, #8
 80025a8:	481e      	ldr	r0, [pc, #120]	; (8002624 <UltrasonicTrigger+0x174>)
 80025aa:	f001 fc6d 	bl	8003e88 <HAL_GPIO_WritePin>

		break;
 80025ae:	e033      	b.n	8002618 <UltrasonicTrigger+0x168>

	case USFL:
		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <UltrasonicTrigger+0x178>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <UltrasonicTrigger+0x178>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0202 	orr.w	r2, r2, #2
 80025be:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_5, TRIG_PIN_5, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80025c0:	2201      	movs	r2, #1
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	4819      	ldr	r0, [pc, #100]	; (800262c <UltrasonicTrigger+0x17c>)
 80025c6:	f001 fc5f 	bl	8003e88 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 80025ca:	200a      	movs	r0, #10
 80025cc:	f7ff fd4c 	bl	8002068 <delay>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <UltrasonicTrigger+0x178>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2200      	movs	r2, #0
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(TRIG_PORT_5, TRIG_PIN_5, GPIO_PIN_RESET);  // pull the TRIG pin low
 80025d8:	2200      	movs	r2, #0
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	4813      	ldr	r0, [pc, #76]	; (800262c <UltrasonicTrigger+0x17c>)
 80025de:	f001 fc53 	bl	8003e88 <HAL_GPIO_WritePin>

		break;
 80025e2:	e019      	b.n	8002618 <UltrasonicTrigger+0x168>

	case USBL:
		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <UltrasonicTrigger+0x178>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <UltrasonicTrigger+0x178>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0204 	orr.w	r2, r2, #4
 80025f2:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_6, TRIG_PIN_6, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80025f4:	2201      	movs	r2, #1
 80025f6:	2110      	movs	r1, #16
 80025f8:	480a      	ldr	r0, [pc, #40]	; (8002624 <UltrasonicTrigger+0x174>)
 80025fa:	f001 fc45 	bl	8003e88 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 80025fe:	200a      	movs	r0, #10
 8002600:	f7ff fd32 	bl	8002068 <delay>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <UltrasonicTrigger+0x178>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(TRIG_PORT_6, TRIG_PIN_6, GPIO_PIN_RESET);  // pull the TRIG pin low
 800260c:	2200      	movs	r2, #0
 800260e:	2110      	movs	r1, #16
 8002610:	4804      	ldr	r0, [pc, #16]	; (8002624 <UltrasonicTrigger+0x174>)
 8002612:	f001 fc39 	bl	8003e88 <HAL_GPIO_WritePin>

		break;
 8002616:	bf00      	nop
	}
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200003c4 	.word	0x200003c4
 8002624:	40020800 	.word	0x40020800
 8002628:	2000040c 	.word	0x2000040c
 800262c:	40020000 	.word	0x40020000

08002630 <Ultrasonic_Distance>:



void Ultrasonic_Distance(ULTRASONIC_t Value , uint16_t * DisUltrasonic)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]

	uint8_t _2_edgeCatched = 1 ;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]

	UltrasonicTrigger(Value);
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff34 	bl	80024b0 <UltrasonicTrigger>

	/*  wait until catch riging and failing edge for Echo */
	if((Value <= USBR) && (Value >= USF))
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	2b03      	cmp	r3, #3
 800264c:	f200 8084 	bhi.w	8002758 <Ultrasonic_Distance+0x128>
	{
		while(g_edgeDetect != 2)
 8002650:	e07b      	b.n	800274a <Ultrasonic_Distance+0x11a>
		{
			if(__HAL_TIM_GET_COUNTER(&htim1) > 20000)
 8002652:	4b7f      	ldr	r3, [pc, #508]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f644 6220 	movw	r2, #20000	; 0x4e20
 800265c:	4293      	cmp	r3, r2
 800265e:	d974      	bls.n	800274a <Ultrasonic_Distance+0x11a>
			{
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002660:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
				_2_edgeCatched = 0 ;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
				g_edgeDetect = 0 ;
 800266c:	4b79      	ldr	r3, [pc, #484]	; (8002854 <Ultrasonic_Distance+0x224>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
				switch(Value)
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	2b03      	cmp	r3, #3
 8002676:	f200 80c1 	bhi.w	80027fc <Ultrasonic_Distance+0x1cc>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <Ultrasonic_Distance+0x50>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	08002691 	.word	0x08002691
 8002684:	080026bf 	.word	0x080026bf
 8002688:	080026ed 	.word	0x080026ed
 800268c:	0800271b 	.word	0x0800271b
				{
				case USF :
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	4b6e      	ldr	r3, [pc, #440]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 020a 	bic.w	r2, r2, #10
 800269e:	621a      	str	r2, [r3, #32]
 80026a0:	4b6b      	ldr	r3, [pc, #428]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a12      	ldr	r2, [r2, #32]
 80026aa:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80026ac:	4b68      	ldr	r3, [pc, #416]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0202 	bic.w	r2, r2, #2
 80026ba:	60da      	str	r2, [r3, #12]
					break ;
 80026bc:	e044      	b.n	8002748 <Ultrasonic_Distance+0x118>
				case USB :
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80026be:	4b64      	ldr	r3, [pc, #400]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	4b62      	ldr	r3, [pc, #392]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026cc:	621a      	str	r2, [r3, #32]
 80026ce:	4b60      	ldr	r3, [pc, #384]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a12      	ldr	r2, [r2, #32]
 80026d8:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 80026da:	4b5d      	ldr	r3, [pc, #372]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0204 	bic.w	r2, r2, #4
 80026e8:	60da      	str	r2, [r3, #12]
					break ;
 80026ea:	e02d      	b.n	8002748 <Ultrasonic_Distance+0x118>
				case USFR :
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80026ec:	4b58      	ldr	r3, [pc, #352]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	4b57      	ldr	r3, [pc, #348]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80026fa:	621a      	str	r2, [r3, #32]
 80026fc:	4b54      	ldr	r3, [pc, #336]	; (8002850 <Ultrasonic_Distance+0x220>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a12      	ldr	r2, [r2, #32]
 8002706:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 8002708:	4b51      	ldr	r3, [pc, #324]	; (8002850 <Ultrasonic_Distance+0x220>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b50      	ldr	r3, [pc, #320]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0208 	bic.w	r2, r2, #8
 8002716:	60da      	str	r2, [r3, #12]
					break ;
 8002718:	e016      	b.n	8002748 <Ultrasonic_Distance+0x118>
				case USBR :
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 800271a:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <Ultrasonic_Distance+0x220>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6a1a      	ldr	r2, [r3, #32]
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8002728:	621a      	str	r2, [r3, #32]
 800272a:	4b49      	ldr	r3, [pc, #292]	; (8002850 <Ultrasonic_Distance+0x220>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a12      	ldr	r2, [r2, #32]
 8002734:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <Ultrasonic_Distance+0x220>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4b44      	ldr	r3, [pc, #272]	; (8002850 <Ultrasonic_Distance+0x220>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0210 	bic.w	r2, r2, #16
 8002744:	60da      	str	r2, [r3, #12]
					break ;
 8002746:	bf00      	nop
				}
				break;
 8002748:	e058      	b.n	80027fc <Ultrasonic_Distance+0x1cc>
		while(g_edgeDetect != 2)
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <Ultrasonic_Distance+0x224>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	f47f af7e 	bne.w	8002652 <Ultrasonic_Distance+0x22>
 8002756:	e052      	b.n	80027fe <Ultrasonic_Distance+0x1ce>
			}

		}
	}
	else if((Value == USBL) || (Value == USFL))
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d048      	beq.n	80027f0 <Ultrasonic_Distance+0x1c0>
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d14c      	bne.n	80027fe <Ultrasonic_Distance+0x1ce>
	{
		while(g_edgeDetect != 2)
 8002764:	e044      	b.n	80027f0 <Ultrasonic_Distance+0x1c0>
		{
			if(__HAL_TIM_GET_COUNTER(&htim2) > 20000)
 8002766:	4b3c      	ldr	r3, [pc, #240]	; (8002858 <Ultrasonic_Distance+0x228>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002770:	4293      	cmp	r3, r2
 8002772:	d93d      	bls.n	80027f0 <Ultrasonic_Distance+0x1c0>
			{
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002774:	4b38      	ldr	r3, [pc, #224]	; (8002858 <Ultrasonic_Distance+0x228>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
				_2_edgeCatched = 0 ;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
				g_edgeDetect = 0 ;
 8002780:	4b34      	ldr	r3, [pc, #208]	; (8002854 <Ultrasonic_Distance+0x224>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
				switch(Value)
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d002      	beq.n	8002792 <Ultrasonic_Distance+0x162>
 800278c:	2b05      	cmp	r3, #5
 800278e:	d017      	beq.n	80027c0 <Ultrasonic_Distance+0x190>
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
					__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
					break ;
				}

				break;
 8002790:	e035      	b.n	80027fe <Ultrasonic_Distance+0x1ce>
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <Ultrasonic_Distance+0x228>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <Ultrasonic_Distance+0x228>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 020a 	bic.w	r2, r2, #10
 80027a0:	621a      	str	r2, [r3, #32]
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a12      	ldr	r2, [r2, #32]
 80027ac:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0202 	bic.w	r2, r2, #2
 80027bc:	60da      	str	r2, [r3, #12]
					break ;
 80027be:	e016      	b.n	80027ee <Ultrasonic_Distance+0x1be>
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027ce:	621a      	str	r2, [r3, #32]
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6a12      	ldr	r2, [r2, #32]
 80027da:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <Ultrasonic_Distance+0x228>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0204 	bic.w	r2, r2, #4
 80027ea:	60da      	str	r2, [r3, #12]
					break ;
 80027ec:	bf00      	nop
				break;
 80027ee:	e006      	b.n	80027fe <Ultrasonic_Distance+0x1ce>
		while(g_edgeDetect != 2)
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <Ultrasonic_Distance+0x224>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d1b5      	bne.n	8002766 <Ultrasonic_Distance+0x136>
 80027fa:	e000      	b.n	80027fe <Ultrasonic_Distance+0x1ce>
				break;
 80027fc:	bf00      	nop
		}
	}


	/*  Make it equal zero to be able to perform same operation*/
    g_edgeDetect = 0 ;
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <Ultrasonic_Distance+0x224>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
    if(_2_edgeCatched == 1)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d114      	bne.n	8002834 <Ultrasonic_Distance+0x204>
    {
    	*DisUltrasonic = (uint32_t)g_TimeOfEcho / 57.5;
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <Ultrasonic_Distance+0x22c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe40 	bl	8000494 <__aeabi_ui2d>
 8002814:	a30c      	add	r3, pc, #48	; (adr r3, 8002848 <Ultrasonic_Distance+0x218>)
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f7fd ffdf 	bl	80007dc <__aeabi_ddiv>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	f7fe f8c1 	bl	80009ac <__aeabi_d2uiz>
 800282a:	4603      	mov	r3, r0
 800282c:	b29a      	uxth	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	801a      	strh	r2, [r3, #0]
    }




}
 8002832:	e003      	b.n	800283c <Ultrasonic_Distance+0x20c>
    	*DisUltrasonic = 400;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800283a:	801a      	strh	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f3af 8000 	nop.w
 8002848:	00000000 	.word	0x00000000
 800284c:	404cc000 	.word	0x404cc000
 8002850:	200003c4 	.word	0x200003c4
 8002854:	200000d4 	.word	0x200000d4
 8002858:	2000040c 	.word	0x2000040c
 800285c:	200000d0 	.word	0x200000d0

08002860 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <vApplicationGetIdleTaskMemory+0x2c>)
 8002870:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <vApplicationGetIdleTaskMemory+0x30>)
 8002876:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	200000dc 	.word	0x200000dc
 8002890:	2000017c 	.word	0x2000017c

08002894 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <MX_FREERTOS_Init+0x30>)
 800289c:	1d3c      	adds	r4, r7, #4
 800289e:	461d      	mov	r5, r3
 80028a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 fa08 	bl	8006cc6 <osThreadCreate>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <MX_FREERTOS_Init+0x34>)
 80028ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80028bc:	bf00      	nop
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bdb0      	pop	{r4, r5, r7, pc}
 80028c4:	08008dd4 	.word	0x08008dd4
 80028c8:	200000d8 	.word	0x200000d8

080028cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f004 fa42 	bl	8006d5e <osDelay>
 80028da:	e7fb      	b.n	80028d4 <StartDefaultTask+0x8>

080028dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <MX_GPIO_Init+0x13c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a47      	ldr	r2, [pc, #284]	; (8002a18 <MX_GPIO_Init+0x13c>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a39      	ldr	r2, [pc, #228]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <MX_GPIO_Init+0x13c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <MX_GPIO_Init+0x13c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a2b      	ldr	r2, [pc, #172]	; (8002a18 <MX_GPIO_Init+0x13c>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <MX_GPIO_Init+0x13c>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800297e:	2200      	movs	r2, #0
 8002980:	211f      	movs	r1, #31
 8002982:	4826      	ldr	r0, [pc, #152]	; (8002a1c <MX_GPIO_Init+0x140>)
 8002984:	f001 fa80 	bl	8003e88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8002988:	2200      	movs	r2, #0
 800298a:	21a0      	movs	r1, #160	; 0xa0
 800298c:	4824      	ldr	r0, [pc, #144]	; (8002a20 <MX_GPIO_Init+0x144>)
 800298e:	f001 fa7b 	bl	8003e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8002992:	2200      	movs	r2, #0
 8002994:	f24f 3137 	movw	r1, #62263	; 0xf337
 8002998:	4822      	ldr	r0, [pc, #136]	; (8002a24 <MX_GPIO_Init+0x148>)
 800299a:	f001 fa75 	bl	8003e88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800299e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4819      	ldr	r0, [pc, #100]	; (8002a1c <MX_GPIO_Init+0x140>)
 80029b6:	f001 f8d3 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80029ba:	231f      	movs	r3, #31
 80029bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029be:	2301      	movs	r3, #1
 80029c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ca:	f107 0314 	add.w	r3, r7, #20
 80029ce:	4619      	mov	r1, r3
 80029d0:	4812      	ldr	r0, [pc, #72]	; (8002a1c <MX_GPIO_Init+0x140>)
 80029d2:	f001 f8c5 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 80029d6:	23a0      	movs	r3, #160	; 0xa0
 80029d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	480c      	ldr	r0, [pc, #48]	; (8002a20 <MX_GPIO_Init+0x144>)
 80029ee:	f001 f8b7 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80029f2:	f24f 3337 	movw	r3, #62263	; 0xf337
 80029f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4806      	ldr	r0, [pc, #24]	; (8002a24 <MX_GPIO_Init+0x148>)
 8002a0c:	f001 f8a8 	bl	8003b60 <HAL_GPIO_Init>

}
 8002a10:	bf00      	nop
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40020400 	.word	0x40020400

08002a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a2e:	f000 ff73 	bl	8003918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a32:	f000 f8df 	bl	8002bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a36:	f7ff ff51 	bl	80028dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a3a:	f000 fd69 	bl	8003510 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002a3e:	f000 fa33 	bl	8002ea8 <MX_TIM1_Init>
  MX_UART4_Init();
 8002a42:	f000 fd11 	bl	8003468 <MX_UART4_Init>
  MX_TIM4_Init();
 8002a46:	f000 fb7b 	bl	8003140 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002a4a:	f000 faa5 	bl	8002f98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a4e:	f000 fb01 	bl	8003054 <MX_TIM3_Init>
  MX_UART5_Init();
 8002a52:	f000 fd33 	bl	80034bc <MX_UART5_Init>
  MX_USART3_UART_Init();
 8002a56:	f000 fd85 	bl	8003564 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002a5a:	f000 fdad 	bl	80035b8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  RC_SystemInit() ;
 8002a5e:	f7fe fa8d 	bl	8000f7c <RC_SystemInit>

  xTaskCreate(&T1_HandleUartReceive  		, "UART"     , 200 , NULL ,  15  , NULL    ) ;
 8002a62:	2300      	movs	r3, #0
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	230f      	movs	r3, #15
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	22c8      	movs	r2, #200	; 0xc8
 8002a6e:	4945      	ldr	r1, [pc, #276]	; (8002b84 <main+0x15c>)
 8002a70:	4845      	ldr	r0, [pc, #276]	; (8002b88 <main+0x160>)
 8002a72:	f004 fe68 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T2_SignalsAction				, "Signals"  , 200 , NULL ,  12  , NULL    ) ;
 8002a76:	2300      	movs	r3, #0
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	22c8      	movs	r2, #200	; 0xc8
 8002a82:	4942      	ldr	r1, [pc, #264]	; (8002b8c <main+0x164>)
 8002a84:	4842      	ldr	r0, [pc, #264]	; (8002b90 <main+0x168>)
 8002a86:	f004 fe5e 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T14_GetUltrasonicRead		, "ReadSonic", 200 , NULL ,  13  , NULL    ) ;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	230d      	movs	r3, #13
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2300      	movs	r3, #0
 8002a94:	22c8      	movs	r2, #200	; 0xc8
 8002a96:	493f      	ldr	r1, [pc, #252]	; (8002b94 <main+0x16c>)
 8002a98:	483f      	ldr	r0, [pc, #252]	; (8002b98 <main+0x170>)
 8002a9a:	f004 fe54 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T13_ParkAlgorithmRun			, "Algorithm", 200 , NULL ,  14  , NULL    ) ;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	230e      	movs	r3, #14
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	22c8      	movs	r2, #200	; 0xc8
 8002aaa:	493c      	ldr	r1, [pc, #240]	; (8002b9c <main+0x174>)
 8002aac:	483c      	ldr	r0, [pc, #240]	; (8002ba0 <main+0x178>)
 8002aae:	f004 fe4a 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T10_BreakAssistRun			, "Assist"	 , 200 , NULL ,  11  , NULL    ) ;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	230b      	movs	r3, #11
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2300      	movs	r3, #0
 8002abc:	22c8      	movs	r2, #200	; 0xc8
 8002abe:	4939      	ldr	r1, [pc, #228]	; (8002ba4 <main+0x17c>)
 8002ac0:	4839      	ldr	r0, [pc, #228]	; (8002ba8 <main+0x180>)
 8002ac2:	f004 fe40 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T11_RightParkRun				, "RPark"	 , 200 , NULL ,  10  , NULL    ) ;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	230a      	movs	r3, #10
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	22c8      	movs	r2, #200	; 0xc8
 8002ad2:	4936      	ldr	r1, [pc, #216]	; (8002bac <main+0x184>)
 8002ad4:	4836      	ldr	r0, [pc, #216]	; (8002bb0 <main+0x188>)
 8002ad6:	f004 fe36 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T12_LeftParkRun				, "LPark"	 , 200 , NULL ,  9   , NULL    ) ;
 8002ada:	2300      	movs	r3, #0
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	2309      	movs	r3, #9
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	22c8      	movs	r2, #200	; 0xc8
 8002ae6:	4933      	ldr	r1, [pc, #204]	; (8002bb4 <main+0x18c>)
 8002ae8:	4833      	ldr	r0, [pc, #204]	; (8002bb8 <main+0x190>)
 8002aea:	f004 fe2c 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T3_WhiteFrontLightFlashing	, "flashing" , 200 , NULL ,  8   , NULL    ) ;
 8002aee:	2300      	movs	r3, #0
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	2308      	movs	r3, #8
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2300      	movs	r3, #0
 8002af8:	22c8      	movs	r2, #200	; 0xc8
 8002afa:	4930      	ldr	r1, [pc, #192]	; (8002bbc <main+0x194>)
 8002afc:	4830      	ldr	r0, [pc, #192]	; (8002bc0 <main+0x198>)
 8002afe:	f004 fe22 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T4_HornBeeping				, "Horn"	 , 200 , NULL ,  7   , NULL    ) ;
 8002b02:	2300      	movs	r3, #0
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	2307      	movs	r3, #7
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	22c8      	movs	r2, #200	; 0xc8
 8002b0e:	492d      	ldr	r1, [pc, #180]	; (8002bc4 <main+0x19c>)
 8002b10:	482d      	ldr	r0, [pc, #180]	; (8002bc8 <main+0x1a0>)
 8002b12:	f004 fe18 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T5_ChangeGear				, "Gear"	 , 200 , NULL ,  6   , NULL    ) ;
 8002b16:	2300      	movs	r3, #0
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	22c8      	movs	r2, #200	; 0xc8
 8002b22:	492a      	ldr	r1, [pc, #168]	; (8002bcc <main+0x1a4>)
 8002b24:	482a      	ldr	r0, [pc, #168]	; (8002bd0 <main+0x1a8>)
 8002b26:	f004 fe0e 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T6_IncSpeed				    , "Inc"	 	 , 200 , NULL ,  5   , NULL    ) ;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2305      	movs	r3, #5
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	22c8      	movs	r2, #200	; 0xc8
 8002b36:	4927      	ldr	r1, [pc, #156]	; (8002bd4 <main+0x1ac>)
 8002b38:	4827      	ldr	r0, [pc, #156]	; (8002bd8 <main+0x1b0>)
 8002b3a:	f004 fe04 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T7_BrakeWheel				, "brake"	 , 200 , NULL ,  4   , NULL    ) ;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2304      	movs	r3, #4
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2300      	movs	r3, #0
 8002b48:	22c8      	movs	r2, #200	; 0xc8
 8002b4a:	4924      	ldr	r1, [pc, #144]	; (8002bdc <main+0x1b4>)
 8002b4c:	4824      	ldr	r0, [pc, #144]	; (8002be0 <main+0x1b8>)
 8002b4e:	f004 fdfa 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T8_CarMoveRight				, "Right"	 , 200 , NULL ,  3   , NULL    ) ;
 8002b52:	2300      	movs	r3, #0
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2303      	movs	r3, #3
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	22c8      	movs	r2, #200	; 0xc8
 8002b5e:	4921      	ldr	r1, [pc, #132]	; (8002be4 <main+0x1bc>)
 8002b60:	4821      	ldr	r0, [pc, #132]	; (8002be8 <main+0x1c0>)
 8002b62:	f004 fdf0 	bl	8007746 <xTaskCreate>
  xTaskCreate(&T9_CarMoveLeft				, "left"	 , 200 , NULL ,  2   , NULL    ) ;
 8002b66:	2300      	movs	r3, #0
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	22c8      	movs	r2, #200	; 0xc8
 8002b72:	491e      	ldr	r1, [pc, #120]	; (8002bec <main+0x1c4>)
 8002b74:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <main+0x1c8>)
 8002b76:	f004 fde6 	bl	8007746 <xTaskCreate>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002b7a:	f7ff fe8b 	bl	8002894 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b7e:	f004 f89b 	bl	8006cb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b82:	e7fe      	b.n	8002b82 <main+0x15a>
 8002b84:	08008df0 	.word	0x08008df0
 8002b88:	080010bd 	.word	0x080010bd
 8002b8c:	08008df8 	.word	0x08008df8
 8002b90:	08001491 	.word	0x08001491
 8002b94:	08008e00 	.word	0x08008e00
 8002b98:	08001d55 	.word	0x08001d55
 8002b9c:	08008e0c 	.word	0x08008e0c
 8002ba0:	08001b15 	.word	0x08001b15
 8002ba4:	08008e18 	.word	0x08008e18
 8002ba8:	080019e5 	.word	0x080019e5
 8002bac:	08008e20 	.word	0x08008e20
 8002bb0:	08001a1d 	.word	0x08001a1d
 8002bb4:	08008e28 	.word	0x08008e28
 8002bb8:	08001a99 	.word	0x08001a99
 8002bbc:	08008e30 	.word	0x08008e30
 8002bc0:	08001739 	.word	0x08001739
 8002bc4:	08008e3c 	.word	0x08008e3c
 8002bc8:	08001771 	.word	0x08001771
 8002bcc:	08008e44 	.word	0x08008e44
 8002bd0:	080017a9 	.word	0x080017a9
 8002bd4:	08008e4c 	.word	0x08008e4c
 8002bd8:	08001809 	.word	0x08001809
 8002bdc:	08008e50 	.word	0x08008e50
 8002be0:	08001899 	.word	0x08001899
 8002be4:	08008e58 	.word	0x08008e58
 8002be8:	08001939 	.word	0x08001939
 8002bec:	08008e60 	.word	0x08008e60
 8002bf0:	0800198d 	.word	0x0800198d

08002bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b094      	sub	sp, #80	; 0x50
 8002bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	2234      	movs	r2, #52	; 0x34
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f005 ffbe 	bl	8008b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	2300      	movs	r3, #0
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <SystemClock_Config+0xb4>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <SystemClock_Config+0xb4>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
 8002c28:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <SystemClock_Config+0xb4>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002c34:	2300      	movs	r3, #0
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <SystemClock_Config+0xb8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c40:	4a1a      	ldr	r2, [pc, #104]	; (8002cac <SystemClock_Config+0xb8>)
 8002c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <SystemClock_Config+0xb8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 fcbe 	bl	80045e8 <HAL_RCC_OscConfig>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002c72:	f000 f82f 	bl	8002cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c76:	230f      	movs	r3, #15
 8002c78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 f92d 	bl	8003ef0 <HAL_RCC_ClockConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002c9c:	f000 f81a 	bl	8002cd4 <Error_Handler>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3750      	adds	r7, #80	; 0x50
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40007000 	.word	0x40007000

08002cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cc2:	f000 fe4b 	bl	800395c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40002000 	.word	0x40002000

08002cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd8:	b672      	cpsid	i
}
 8002cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <Error_Handler+0x8>
	...

08002ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_MspInit+0x54>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_MspInit+0x54>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_MspInit+0x54>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_MspInit+0x54>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_MspInit+0x54>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_MspInit+0x54>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	210f      	movs	r1, #15
 8002d22:	f06f 0001 	mvn.w	r0, #1
 8002d26:	f000 fef1 	bl	8003b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	; 0x38
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <HAL_InitTick+0xe4>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	4a32      	ldr	r2, [pc, #200]	; (8002e1c <HAL_InitTick+0xe4>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6413      	str	r3, [r2, #64]	; 0x40
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_InitTick+0xe4>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d64:	f107 0210 	add.w	r2, r7, #16
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f9d8 	bl	8004124 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d7e:	f001 f9a9 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8002d82:	6378      	str	r0, [r7, #52]	; 0x34
 8002d84:	e004      	b.n	8002d90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d86:	f001 f9a5 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <HAL_InitTick+0xe8>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	0c9b      	lsrs	r3, r3, #18
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <HAL_InitTick+0xec>)
 8002da0:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_InitTick+0xf0>)
 8002da2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_InitTick+0xec>)
 8002da6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002daa:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_InitTick+0xec>)
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_InitTick+0xec>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_InitTick+0xec>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dbe:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_InitTick+0xec>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002dc4:	4817      	ldr	r0, [pc, #92]	; (8002e24 <HAL_InitTick+0xec>)
 8002dc6:	f001 fead 	bl	8004b24 <HAL_TIM_Base_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11b      	bne.n	8002e10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002dd8:	4812      	ldr	r0, [pc, #72]	; (8002e24 <HAL_InitTick+0xec>)
 8002dda:	f001 ff5b 	bl	8004c94 <HAL_TIM_Base_Start_IT>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002de4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d111      	bne.n	8002e10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002dec:	202d      	movs	r0, #45	; 0x2d
 8002dee:	f000 fea9 	bl	8003b44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d808      	bhi.n	8002e0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	202d      	movs	r0, #45	; 0x2d
 8002dfe:	f000 fe85 	bl	8003b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_InitTick+0xf4>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	e002      	b.n	8002e10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3738      	adds	r7, #56	; 0x38
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	2000037c 	.word	0x2000037c
 8002e28:	40002000 	.word	0x40002000
 8002e2c:	2000000c 	.word	0x2000000c

08002e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e34:	e7fe      	b.n	8002e34 <NMI_Handler+0x4>

08002e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3a:	e7fe      	b.n	8002e3a <HardFault_Handler+0x4>

08002e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <MemManage_Handler+0x4>

08002e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <BusFault_Handler+0x4>

08002e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <UsageFault_Handler+0x4>

08002e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <TIM1_CC_IRQHandler+0x10>)
 8002e62:	f002 fa21 	bl	80052a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200003c4 	.word	0x200003c4

08002e70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e76:	f002 fa17 	bl	80052a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000037c 	.word	0x2000037c

08002e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <SystemInit+0x20>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <SystemInit+0x20>)
 8002e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ec4:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002ec6:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <MX_TIM1_Init+0xec>)
 8002ec8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002ecc:	2208      	movs	r2, #8
 8002ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002ed8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002ef0:	4827      	ldr	r0, [pc, #156]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002ef2:	f002 f861 	bl	8004fb8 <HAL_TIM_IC_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002efc:	f7ff feea 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4820      	ldr	r0, [pc, #128]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002f10:	f003 f988 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002f1a:	f7ff fedb 	bl	8002cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f22:	2301      	movs	r3, #1
 8002f24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	2200      	movs	r2, #0
 8002f32:	4619      	mov	r1, r3
 8002f34:	4816      	ldr	r0, [pc, #88]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002f36:	f002 faa7 	bl	8005488 <HAL_TIM_IC_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002f40:	f7ff fec8 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f44:	463b      	mov	r3, r7
 8002f46:	2204      	movs	r2, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4811      	ldr	r0, [pc, #68]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002f4c:	f002 fa9c 	bl	8005488 <HAL_TIM_IC_ConfigChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8002f56:	f7ff febd 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480b      	ldr	r0, [pc, #44]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002f62:	f002 fa91 	bl	8005488 <HAL_TIM_IC_ConfigChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002f6c:	f7ff feb2 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002f70:	463b      	mov	r3, r7
 8002f72:	220c      	movs	r2, #12
 8002f74:	4619      	mov	r1, r3
 8002f76:	4806      	ldr	r0, [pc, #24]	; (8002f90 <MX_TIM1_Init+0xe8>)
 8002f78:	f002 fa86 	bl	8005488 <HAL_TIM_IC_ConfigChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8002f82:	f7ff fea7 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200003c4 	.word	0x200003c4
 8002f94:	40010000 	.word	0x40010000

08002f98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9e:	f107 0310 	add.w	r3, r7, #16
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002fa8:	463b      	mov	r3, r7
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fb4:	4b26      	ldr	r3, [pc, #152]	; (8003050 <MX_TIM2_Init+0xb8>)
 8002fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8002fbc:	4b24      	ldr	r3, [pc, #144]	; (8003050 <MX_TIM2_Init+0xb8>)
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc2:	4b23      	ldr	r3, [pc, #140]	; (8003050 <MX_TIM2_Init+0xb8>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65434;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <MX_TIM2_Init+0xb8>)
 8002fca:	f64f 729a 	movw	r2, #65434	; 0xff9a
 8002fce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <MX_TIM2_Init+0xb8>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <MX_TIM2_Init+0xb8>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002fdc:	481c      	ldr	r0, [pc, #112]	; (8003050 <MX_TIM2_Init+0xb8>)
 8002fde:	f001 ffeb 	bl	8004fb8 <HAL_TIM_IC_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fe8:	f7ff fe74 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff4:	f107 0310 	add.w	r3, r7, #16
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4815      	ldr	r0, [pc, #84]	; (8003050 <MX_TIM2_Init+0xb8>)
 8002ffc:	f003 f912 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003006:	f7ff fe65 	bl	8002cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800300a:	2300      	movs	r3, #0
 800300c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800300e:	2301      	movs	r3, #1
 8003010:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800301a:	463b      	mov	r3, r7
 800301c:	2200      	movs	r2, #0
 800301e:	4619      	mov	r1, r3
 8003020:	480b      	ldr	r0, [pc, #44]	; (8003050 <MX_TIM2_Init+0xb8>)
 8003022:	f002 fa31 	bl	8005488 <HAL_TIM_IC_ConfigChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800302c:	f7ff fe52 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	2204      	movs	r2, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4806      	ldr	r0, [pc, #24]	; (8003050 <MX_TIM2_Init+0xb8>)
 8003038:	f002 fa26 	bl	8005488 <HAL_TIM_IC_ConfigChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003042:	f7ff fe47 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000040c 	.word	0x2000040c

08003054 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003068:	f107 0320 	add.w	r3, r7, #32
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
 8003080:	615a      	str	r2, [r3, #20]
 8003082:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003084:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <MX_TIM3_Init+0xe4>)
 8003086:	4a2d      	ldr	r2, [pc, #180]	; (800313c <MX_TIM3_Init+0xe8>)
 8003088:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 800308a:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <MX_TIM3_Init+0xe4>)
 800308c:	2208      	movs	r2, #8
 800308e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <MX_TIM3_Init+0xe4>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <MX_TIM3_Init+0xe4>)
 8003098:	f644 6220 	movw	r2, #20000	; 0x4e20
 800309c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <MX_TIM3_Init+0xe4>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <MX_TIM3_Init+0xe4>)
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030aa:	4823      	ldr	r0, [pc, #140]	; (8003138 <MX_TIM3_Init+0xe4>)
 80030ac:	f001 fd3a 	bl	8004b24 <HAL_TIM_Base_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030b6:	f7ff fe0d 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030c4:	4619      	mov	r1, r3
 80030c6:	481c      	ldr	r0, [pc, #112]	; (8003138 <MX_TIM3_Init+0xe4>)
 80030c8:	f002 fb3c 	bl	8005744 <HAL_TIM_ConfigClockSource>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80030d2:	f7ff fdff 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030d6:	4818      	ldr	r0, [pc, #96]	; (8003138 <MX_TIM3_Init+0xe4>)
 80030d8:	f001 fe4c 	bl	8004d74 <HAL_TIM_PWM_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80030e2:	f7ff fdf7 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030ee:	f107 0320 	add.w	r3, r7, #32
 80030f2:	4619      	mov	r1, r3
 80030f4:	4810      	ldr	r0, [pc, #64]	; (8003138 <MX_TIM3_Init+0xe4>)
 80030f6:	f003 f895 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003100:	f7ff fde8 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003104:	2360      	movs	r3, #96	; 0x60
 8003106:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	2200      	movs	r2, #0
 8003118:	4619      	mov	r1, r3
 800311a:	4807      	ldr	r0, [pc, #28]	; (8003138 <MX_TIM3_Init+0xe4>)
 800311c:	f002 fa50 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003126:	f7ff fdd5 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800312a:	4803      	ldr	r0, [pc, #12]	; (8003138 <MX_TIM3_Init+0xe4>)
 800312c:	f000 f93a 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 8003130:	bf00      	nop
 8003132:	3738      	adds	r7, #56	; 0x38
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000454 	.word	0x20000454
 800313c:	40000400 	.word	0x40000400

08003140 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08e      	sub	sp, #56	; 0x38
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003154:	f107 0320 	add.w	r3, r7, #32
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
 800316c:	615a      	str	r2, [r3, #20]
 800316e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003170:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <MX_TIM4_Init+0xe4>)
 8003172:	4a2d      	ldr	r2, [pc, #180]	; (8003228 <MX_TIM4_Init+0xe8>)
 8003174:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8003176:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <MX_TIM4_Init+0xe4>)
 8003178:	2204      	movs	r2, #4
 800317a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	4b29      	ldr	r3, [pc, #164]	; (8003224 <MX_TIM4_Init+0xe4>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003182:	4b28      	ldr	r3, [pc, #160]	; (8003224 <MX_TIM4_Init+0xe4>)
 8003184:	2264      	movs	r2, #100	; 0x64
 8003186:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <MX_TIM4_Init+0xe4>)
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800318e:	4b25      	ldr	r3, [pc, #148]	; (8003224 <MX_TIM4_Init+0xe4>)
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003194:	4823      	ldr	r0, [pc, #140]	; (8003224 <MX_TIM4_Init+0xe4>)
 8003196:	f001 fcc5 	bl	8004b24 <HAL_TIM_Base_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80031a0:	f7ff fd98 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ae:	4619      	mov	r1, r3
 80031b0:	481c      	ldr	r0, [pc, #112]	; (8003224 <MX_TIM4_Init+0xe4>)
 80031b2:	f002 fac7 	bl	8005744 <HAL_TIM_ConfigClockSource>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80031bc:	f7ff fd8a 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80031c0:	4818      	ldr	r0, [pc, #96]	; (8003224 <MX_TIM4_Init+0xe4>)
 80031c2:	f001 fdd7 	bl	8004d74 <HAL_TIM_PWM_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80031cc:	f7ff fd82 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031d8:	f107 0320 	add.w	r3, r7, #32
 80031dc:	4619      	mov	r1, r3
 80031de:	4811      	ldr	r0, [pc, #68]	; (8003224 <MX_TIM4_Init+0xe4>)
 80031e0:	f003 f820 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80031ea:	f7ff fd73 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ee:	2360      	movs	r3, #96	; 0x60
 80031f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2200      	movs	r2, #0
 8003202:	4619      	mov	r1, r3
 8003204:	4807      	ldr	r0, [pc, #28]	; (8003224 <MX_TIM4_Init+0xe4>)
 8003206:	f002 f9db 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003210:	f7ff fd60 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <MX_TIM4_Init+0xe4>)
 8003216:	f000 f8c5 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 800321a:	bf00      	nop
 800321c:	3738      	adds	r7, #56	; 0x38
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000049c 	.word	0x2000049c
 8003228:	40000800 	.word	0x40000800

0800322c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a37      	ldr	r2, [pc, #220]	; (8003328 <HAL_TIM_IC_MspInit+0xfc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d135      	bne.n	80032ba <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	4a35      	ldr	r2, [pc, #212]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6453      	str	r3, [r2, #68]	; 0x44
 800325e:	4b33      	ldr	r3, [pc, #204]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a2e      	ldr	r2, [pc, #184]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003286:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003298:	2301      	movs	r3, #1
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4823      	ldr	r0, [pc, #140]	; (8003330 <HAL_TIM_IC_MspInit+0x104>)
 80032a4:	f000 fc5c 	bl	8003b60 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2105      	movs	r1, #5
 80032ac:	201b      	movs	r0, #27
 80032ae:	f000 fc2d 	bl	8003b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032b2:	201b      	movs	r0, #27
 80032b4:	f000 fc46 	bl	8003b44 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80032b8:	e031      	b.n	800331e <HAL_TIM_IC_MspInit+0xf2>
  else if(tim_icHandle->Instance==TIM2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c2:	d12c      	bne.n	800331e <HAL_TIM_IC_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	4a17      	ldr	r2, [pc, #92]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6413      	str	r3, [r2, #64]	; 0x40
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6313      	str	r3, [r2, #48]	; 0x30
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_TIM_IC_MspInit+0x100>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80032fc:	f248 0302 	movw	r3, #32770	; 0x8002
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800330e:	2301      	movs	r3, #1
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4619      	mov	r1, r3
 8003318:	4805      	ldr	r0, [pc, #20]	; (8003330 <HAL_TIM_IC_MspInit+0x104>)
 800331a:	f000 fc21 	bl	8003b60 <HAL_GPIO_Init>
}
 800331e:	bf00      	nop
 8003320:	3730      	adds	r7, #48	; 0x30
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40010000 	.word	0x40010000
 800332c:	40023800 	.word	0x40023800
 8003330:	40020000 	.word	0x40020000

08003334 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a15      	ldr	r2, [pc, #84]	; (8003398 <HAL_TIM_Base_MspInit+0x64>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_TIM_Base_MspInit+0x68>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a13      	ldr	r2, [pc, #76]	; (800339c <HAL_TIM_Base_MspInit+0x68>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_TIM_Base_MspInit+0x68>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003362:	e012      	b.n	800338a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <HAL_TIM_Base_MspInit+0x6c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10d      	bne.n	800338a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_TIM_Base_MspInit+0x68>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a09      	ldr	r2, [pc, #36]	; (800339c <HAL_TIM_Base_MspInit+0x68>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_TIM_Base_MspInit+0x68>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40000400 	.word	0x40000400
 800339c:	40023800 	.word	0x40023800
 80033a0:	40000800 	.word	0x40000800

080033a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <HAL_TIM_MspPostInit+0xb0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d11e      	bne.n	8003404 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_TIM_MspPostInit+0xb4>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a22      	ldr	r2, [pc, #136]	; (8003458 <HAL_TIM_MspPostInit+0xb4>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_TIM_MspPostInit+0xb4>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033e2:	2340      	movs	r3, #64	; 0x40
 80033e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e6:	2302      	movs	r3, #2
 80033e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033f2:	2302      	movs	r3, #2
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f6:	f107 0314 	add.w	r3, r7, #20
 80033fa:	4619      	mov	r1, r3
 80033fc:	4817      	ldr	r0, [pc, #92]	; (800345c <HAL_TIM_MspPostInit+0xb8>)
 80033fe:	f000 fbaf 	bl	8003b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003402:	e022      	b.n	800344a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a15      	ldr	r2, [pc, #84]	; (8003460 <HAL_TIM_MspPostInit+0xbc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d11d      	bne.n	800344a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_TIM_MspPostInit+0xb4>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a10      	ldr	r2, [pc, #64]	; (8003458 <HAL_TIM_MspPostInit+0xb4>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_TIM_MspPostInit+0xb4>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800342a:	2340      	movs	r3, #64	; 0x40
 800342c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800343a:	2302      	movs	r3, #2
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	4807      	ldr	r0, [pc, #28]	; (8003464 <HAL_TIM_MspPostInit+0xc0>)
 8003446:	f000 fb8b 	bl	8003b60 <HAL_GPIO_Init>
}
 800344a:	bf00      	nop
 800344c:	3728      	adds	r7, #40	; 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40000400 	.word	0x40000400
 8003458:	40023800 	.word	0x40023800
 800345c:	40020000 	.word	0x40020000
 8003460:	40000800 	.word	0x40000800
 8003464:	40020400 	.word	0x40020400

08003468 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_UART4_Init+0x4c>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <MX_UART4_Init+0x50>)
 8003470:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <MX_UART4_Init+0x4c>)
 8003474:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003478:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <MX_UART4_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_UART4_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <MX_UART4_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_UART4_Init+0x4c>)
 800348e:	220c      	movs	r2, #12
 8003490:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <MX_UART4_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <MX_UART4_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <MX_UART4_Init+0x4c>)
 80034a0:	f002 ff50 	bl	8006344 <HAL_UART_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80034aa:	f7ff fc13 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200004e4 	.word	0x200004e4
 80034b8:	40004c00 	.word	0x40004c00

080034bc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_UART5_Init+0x4c>)
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <MX_UART5_Init+0x50>)
 80034c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <MX_UART5_Init+0x4c>)
 80034c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_UART5_Init+0x4c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <MX_UART5_Init+0x4c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <MX_UART5_Init+0x4c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <MX_UART5_Init+0x4c>)
 80034e2:	220c      	movs	r2, #12
 80034e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <MX_UART5_Init+0x4c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <MX_UART5_Init+0x4c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <MX_UART5_Init+0x4c>)
 80034f4:	f002 ff26 	bl	8006344 <HAL_UART_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80034fe:	f7ff fbe9 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000052c 	.word	0x2000052c
 800350c:	40005000 	.word	0x40005000

08003510 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <MX_USART2_UART_Init+0x4c>)
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <MX_USART2_UART_Init+0x50>)
 8003518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <MX_USART2_UART_Init+0x4c>)
 800351c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <MX_USART2_UART_Init+0x4c>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <MX_USART2_UART_Init+0x4c>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <MX_USART2_UART_Init+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <MX_USART2_UART_Init+0x4c>)
 8003536:	220c      	movs	r2, #12
 8003538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <MX_USART2_UART_Init+0x4c>)
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <MX_USART2_UART_Init+0x4c>)
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003546:	4805      	ldr	r0, [pc, #20]	; (800355c <MX_USART2_UART_Init+0x4c>)
 8003548:	f002 fefc 	bl	8006344 <HAL_UART_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003552:	f7ff fbbf 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000574 	.word	0x20000574
 8003560:	40004400 	.word	0x40004400

08003564 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <MX_USART3_UART_Init+0x50>)
 800356c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 8003570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003574:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 8003584:	2200      	movs	r2, #0
 8003586:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 800358a:	220c      	movs	r2, #12
 800358c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800359a:	4805      	ldr	r0, [pc, #20]	; (80035b0 <MX_USART3_UART_Init+0x4c>)
 800359c:	f002 fed2 	bl	8006344 <HAL_UART_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035a6:	f7ff fb95 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200005bc 	.word	0x200005bc
 80035b4:	40004800 	.word	0x40004800

080035b8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <MX_USART6_UART_Init+0x50>)
 80035c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035de:	220c      	movs	r2, #12
 80035e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <MX_USART6_UART_Init+0x4c>)
 80035f0:	f002 fea8 	bl	8006344 <HAL_UART_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80035fa:	f7ff fb6b 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000604 	.word	0x20000604
 8003608:	40011400 	.word	0x40011400

0800360c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b094      	sub	sp, #80	; 0x50
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a9c      	ldr	r2, [pc, #624]	; (800389c <HAL_UART_MspInit+0x290>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d12d      	bne.n	800368a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
 8003632:	4b9b      	ldr	r3, [pc, #620]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a9a      	ldr	r2, [pc, #616]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b98      	ldr	r3, [pc, #608]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
 800364e:	4b94      	ldr	r3, [pc, #592]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a93      	ldr	r2, [pc, #588]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <HAL_UART_MspInit+0x294>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	637b      	str	r3, [r7, #52]	; 0x34
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003666:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003678:	2308      	movs	r3, #8
 800367a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800367c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003680:	4619      	mov	r1, r3
 8003682:	4888      	ldr	r0, [pc, #544]	; (80038a4 <HAL_UART_MspInit+0x298>)
 8003684:	f000 fa6c 	bl	8003b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003688:	e104      	b.n	8003894 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==UART5)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a86      	ldr	r2, [pc, #536]	; (80038a8 <HAL_UART_MspInit+0x29c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d14b      	bne.n	800372c <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
 8003698:	4b81      	ldr	r3, [pc, #516]	; (80038a0 <HAL_UART_MspInit+0x294>)
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	4a80      	ldr	r2, [pc, #512]	; (80038a0 <HAL_UART_MspInit+0x294>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	6413      	str	r3, [r2, #64]	; 0x40
 80036a4:	4b7e      	ldr	r3, [pc, #504]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b0:	2300      	movs	r3, #0
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b4:	4b7a      	ldr	r3, [pc, #488]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	4a79      	ldr	r2, [pc, #484]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6313      	str	r3, [r2, #48]	; 0x30
 80036c0:	4b77      	ldr	r3, [pc, #476]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d0:	4b73      	ldr	r3, [pc, #460]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4a72      	ldr	r2, [pc, #456]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80036d6:	f043 0308 	orr.w	r3, r3, #8
 80036da:	6313      	str	r3, [r2, #48]	; 0x30
 80036dc:	4b70      	ldr	r3, [pc, #448]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f6:	2303      	movs	r3, #3
 80036f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80036fa:	2308      	movs	r3, #8
 80036fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003702:	4619      	mov	r1, r3
 8003704:	4867      	ldr	r0, [pc, #412]	; (80038a4 <HAL_UART_MspInit+0x298>)
 8003706:	f000 fa2b 	bl	8003b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800370a:	2304      	movs	r3, #4
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003716:	2303      	movs	r3, #3
 8003718:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800371a:	2308      	movs	r3, #8
 800371c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800371e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003722:	4619      	mov	r1, r3
 8003724:	4861      	ldr	r0, [pc, #388]	; (80038ac <HAL_UART_MspInit+0x2a0>)
 8003726:	f000 fa1b 	bl	8003b60 <HAL_GPIO_Init>
}
 800372a:	e0b3      	b.n	8003894 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5f      	ldr	r2, [pc, #380]	; (80038b0 <HAL_UART_MspInit+0x2a4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d12c      	bne.n	8003790 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_UART_MspInit+0x294>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b56      	ldr	r3, [pc, #344]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	4b52      	ldr	r3, [pc, #328]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	4a51      	ldr	r2, [pc, #324]	; (80038a0 <HAL_UART_MspInit+0x294>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	623b      	str	r3, [r7, #32]
 800376c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800376e:	230c      	movs	r3, #12
 8003770:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377a:	2303      	movs	r3, #3
 800377c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800377e:	2307      	movs	r3, #7
 8003780:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003782:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003786:	4619      	mov	r1, r3
 8003788:	484a      	ldr	r0, [pc, #296]	; (80038b4 <HAL_UART_MspInit+0x2a8>)
 800378a:	f000 f9e9 	bl	8003b60 <HAL_GPIO_Init>
}
 800378e:	e081      	b.n	8003894 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a48      	ldr	r2, [pc, #288]	; (80038b8 <HAL_UART_MspInit+0x2ac>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d14b      	bne.n	8003832 <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART3_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a3f      	ldr	r2, [pc, #252]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b3d      	ldr	r3, [pc, #244]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a38      	ldr	r2, [pc, #224]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a31      	ldr	r2, [pc, #196]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <HAL_UART_MspInit+0x294>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037ee:	2320      	movs	r3, #32
 80037f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fa:	2303      	movs	r3, #3
 80037fc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037fe:	2307      	movs	r3, #7
 8003800:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003806:	4619      	mov	r1, r3
 8003808:	4826      	ldr	r0, [pc, #152]	; (80038a4 <HAL_UART_MspInit+0x298>)
 800380a:	f000 f9a9 	bl	8003b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800380e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003814:	2302      	movs	r3, #2
 8003816:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381c:	2303      	movs	r3, #3
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003820:	2307      	movs	r3, #7
 8003822:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003824:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003828:	4619      	mov	r1, r3
 800382a:	4824      	ldr	r0, [pc, #144]	; (80038bc <HAL_UART_MspInit+0x2b0>)
 800382c:	f000 f998 	bl	8003b60 <HAL_GPIO_Init>
}
 8003830:	e030      	b.n	8003894 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART6)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_UART_MspInit+0x2b4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d12b      	bne.n	8003894 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003846:	f043 0320 	orr.w	r3, r3, #32
 800384a:	6453      	str	r3, [r2, #68]	; 0x44
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HAL_UART_MspInit+0x294>)
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_UART_MspInit+0x294>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	4a0f      	ldr	r2, [pc, #60]	; (80038a0 <HAL_UART_MspInit+0x294>)
 8003862:	f043 0304 	orr.w	r3, r3, #4
 8003866:	6313      	str	r3, [r2, #48]	; 0x30
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <HAL_UART_MspInit+0x294>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003874:	23c0      	movs	r3, #192	; 0xc0
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003878:	2302      	movs	r3, #2
 800387a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003880:	2303      	movs	r3, #3
 8003882:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003884:	2308      	movs	r3, #8
 8003886:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003888:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800388c:	4619      	mov	r1, r3
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <HAL_UART_MspInit+0x298>)
 8003890:	f000 f966 	bl	8003b60 <HAL_GPIO_Init>
}
 8003894:	bf00      	nop
 8003896:	3750      	adds	r7, #80	; 0x50
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40004c00 	.word	0x40004c00
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40005000 	.word	0x40005000
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40020000 	.word	0x40020000
 80038b8:	40004800 	.word	0x40004800
 80038bc:	40020400 	.word	0x40020400
 80038c0:	40011400 	.word	0x40011400

080038c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80038c8:	f7ff fadc 	bl	8002e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038cc:	480c      	ldr	r0, [pc, #48]	; (8003900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038ce:	490d      	ldr	r1, [pc, #52]	; (8003904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d4:	e002      	b.n	80038dc <LoopCopyDataInit>

080038d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038da:	3304      	adds	r3, #4

080038dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e0:	d3f9      	bcc.n	80038d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038e4:	4c0a      	ldr	r4, [pc, #40]	; (8003910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038e8:	e001      	b.n	80038ee <LoopFillZerobss>

080038ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038ec:	3204      	adds	r2, #4

080038ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f0:	d3fb      	bcc.n	80038ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80038f2:	f005 f9a5 	bl	8008c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038f6:	f7ff f897 	bl	8002a28 <main>
  bx  lr    
 80038fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003904:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003908:	08008e98 	.word	0x08008e98
  ldr r2, =_sbss
 800390c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003910:	20004580 	.word	0x20004580

08003914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003914:	e7fe      	b.n	8003914 <ADC_IRQHandler>
	...

08003918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_Init+0x40>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <HAL_Init+0x40>)
 8003922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_Init+0x40>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <HAL_Init+0x40>)
 800392e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <HAL_Init+0x40>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a07      	ldr	r2, [pc, #28]	; (8003958 <HAL_Init+0x40>)
 800393a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003940:	2003      	movs	r0, #3
 8003942:	f000 f8d8 	bl	8003af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003946:	200f      	movs	r0, #15
 8003948:	f7ff f9f6 	bl	8002d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800394c:	f7ff f9c8 	bl	8002ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023c00 	.word	0x40023c00

0800395c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_IncTick+0x20>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_IncTick+0x24>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4413      	add	r3, r2
 800396c:	4a04      	ldr	r2, [pc, #16]	; (8003980 <HAL_IncTick+0x24>)
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000010 	.word	0x20000010
 8003980:	2000064c 	.word	0x2000064c

08003984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return uwTick;
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_GetTick+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	2000064c 	.word	0x2000064c

0800399c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b8:	4013      	ands	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ce:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	60d3      	str	r3, [r2, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <__NVIC_GetPriorityGrouping+0x18>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 0307 	and.w	r3, r3, #7
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	db0b      	blt.n	8003a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	4907      	ldr	r1, [pc, #28]	; (8003a38 <__NVIC_EnableIRQ+0x38>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2001      	movs	r0, #1
 8003a22:	fa00 f202 	lsl.w	r2, r0, r2
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000e100 	.word	0xe000e100

08003a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	6039      	str	r1, [r7, #0]
 8003a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db0a      	blt.n	8003a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	490c      	ldr	r1, [pc, #48]	; (8003a88 <__NVIC_SetPriority+0x4c>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a64:	e00a      	b.n	8003a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4908      	ldr	r1, [pc, #32]	; (8003a8c <__NVIC_SetPriority+0x50>)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	3b04      	subs	r3, #4
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	440b      	add	r3, r1
 8003a7a:	761a      	strb	r2, [r3, #24]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000e100 	.word	0xe000e100
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f1c3 0307 	rsb	r3, r3, #7
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	bf28      	it	cs
 8003aae:	2304      	movcs	r3, #4
 8003ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d902      	bls.n	8003ac0 <NVIC_EncodePriority+0x30>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3b03      	subs	r3, #3
 8003abe:	e000      	b.n	8003ac2 <NVIC_EncodePriority+0x32>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43d9      	mvns	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	4313      	orrs	r3, r2
         );
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff4c 	bl	800399c <__NVIC_SetPriorityGrouping>
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b1e:	f7ff ff61 	bl	80039e4 <__NVIC_GetPriorityGrouping>
 8003b22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f7ff ffb1 	bl	8003a90 <NVIC_EncodePriority>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff ff80 	bl	8003a3c <__NVIC_SetPriority>
}
 8003b3c:	bf00      	nop
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ff54 	bl	8003a00 <__NVIC_EnableIRQ>
}
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	; 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	e165      	b.n	8003e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	f040 8154 	bne.w	8003e42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d005      	beq.n	8003bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d130      	bne.n	8003c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 0201 	and.w	r2, r3, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d017      	beq.n	8003c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d123      	bne.n	8003ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	08da      	lsrs	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3208      	adds	r2, #8
 8003c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	220f      	movs	r2, #15
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3208      	adds	r2, #8
 8003c9e:	69b9      	ldr	r1, [r7, #24]
 8003ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	2203      	movs	r2, #3
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0203 	and.w	r2, r3, #3
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80ae 	beq.w	8003e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b5d      	ldr	r3, [pc, #372]	; (8003e60 <HAL_GPIO_Init+0x300>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	4a5c      	ldr	r2, [pc, #368]	; (8003e60 <HAL_GPIO_Init+0x300>)
 8003cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf6:	4b5a      	ldr	r3, [pc, #360]	; (8003e60 <HAL_GPIO_Init+0x300>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d02:	4a58      	ldr	r2, [pc, #352]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	3302      	adds	r3, #2
 8003d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	220f      	movs	r2, #15
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4f      	ldr	r2, [pc, #316]	; (8003e68 <HAL_GPIO_Init+0x308>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d025      	beq.n	8003d7a <HAL_GPIO_Init+0x21a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4e      	ldr	r2, [pc, #312]	; (8003e6c <HAL_GPIO_Init+0x30c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01f      	beq.n	8003d76 <HAL_GPIO_Init+0x216>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4d      	ldr	r2, [pc, #308]	; (8003e70 <HAL_GPIO_Init+0x310>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d019      	beq.n	8003d72 <HAL_GPIO_Init+0x212>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4c      	ldr	r2, [pc, #304]	; (8003e74 <HAL_GPIO_Init+0x314>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_GPIO_Init+0x20e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	; (8003e78 <HAL_GPIO_Init+0x318>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00d      	beq.n	8003d6a <HAL_GPIO_Init+0x20a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4a      	ldr	r2, [pc, #296]	; (8003e7c <HAL_GPIO_Init+0x31c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <HAL_GPIO_Init+0x206>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a49      	ldr	r2, [pc, #292]	; (8003e80 <HAL_GPIO_Init+0x320>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <HAL_GPIO_Init+0x202>
 8003d5e:	2306      	movs	r3, #6
 8003d60:	e00c      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d62:	2307      	movs	r3, #7
 8003d64:	e00a      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d66:	2305      	movs	r3, #5
 8003d68:	e008      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	e006      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e004      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e002      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	f002 0203 	and.w	r2, r2, #3
 8003d82:	0092      	lsls	r2, r2, #2
 8003d84:	4093      	lsls	r3, r2
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d8c:	4935      	ldr	r1, [pc, #212]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	3302      	adds	r3, #2
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d9a:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <HAL_GPIO_Init+0x324>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dbe:	4a31      	ldr	r2, [pc, #196]	; (8003e84 <HAL_GPIO_Init+0x324>)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_GPIO_Init+0x324>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003de8:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <HAL_GPIO_Init+0x324>)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dee:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <HAL_GPIO_Init+0x324>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e12:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <HAL_GPIO_Init+0x324>)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <HAL_GPIO_Init+0x324>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e3c:	4a11      	ldr	r2, [pc, #68]	; (8003e84 <HAL_GPIO_Init+0x324>)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3301      	adds	r3, #1
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	f67f ae96 	bls.w	8003b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	3724      	adds	r7, #36	; 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40013800 	.word	0x40013800
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	40020400 	.word	0x40020400
 8003e70:	40020800 	.word	0x40020800
 8003e74:	40020c00 	.word	0x40020c00
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40021400 	.word	0x40021400
 8003e80:	40021800 	.word	0x40021800
 8003e84:	40013c00 	.word	0x40013c00

08003e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	807b      	strh	r3, [r7, #2]
 8003e94:	4613      	mov	r3, r2
 8003e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e98:	787b      	ldrb	r3, [r7, #1]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea4:	e003      	b.n	8003eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	041a      	lsls	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	619a      	str	r2, [r3, #24]
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ecc:	887a      	ldrh	r2, [r7, #2]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	041a      	lsls	r2, r3, #16
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	400b      	ands	r3, r1
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	619a      	str	r2, [r3, #24]
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0cc      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f04:	4b68      	ldr	r3, [pc, #416]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d90c      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b65      	ldr	r3, [pc, #404]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b63      	ldr	r3, [pc, #396]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0b8      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f44:	4b59      	ldr	r3, [pc, #356]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a58      	ldr	r2, [pc, #352]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f5c:	4b53      	ldr	r3, [pc, #332]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4a52      	ldr	r2, [pc, #328]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f68:	4b50      	ldr	r3, [pc, #320]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	494d      	ldr	r1, [pc, #308]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d044      	beq.n	8004010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d119      	bne.n	8003fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e07f      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d003      	beq.n	8003fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e06f      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbe:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e067      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 0203 	bic.w	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4934      	ldr	r1, [pc, #208]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe0:	f7ff fcd0 	bl	8003984 <HAL_GetTick>
 8003fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe8:	f7ff fccc 	bl	8003984 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e04f      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffe:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 020c 	and.w	r2, r3, #12
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	429a      	cmp	r2, r3
 800400e:	d1eb      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004010:	4b25      	ldr	r3, [pc, #148]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d20c      	bcs.n	8004038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e032      	b.n	800409e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4916      	ldr	r1, [pc, #88]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	490e      	ldr	r1, [pc, #56]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004076:	f000 f887 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 800407a:	4602      	mov	r2, r0
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	490a      	ldr	r1, [pc, #40]	; (80040b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	5ccb      	ldrb	r3, [r1, r3]
 800408a:	fa22 f303 	lsr.w	r3, r2, r3
 800408e:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fe4e 	bl	8002d38 <HAL_InitTick>

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023c00 	.word	0x40023c00
 80040ac:	40023800 	.word	0x40023800
 80040b0:	08008e70 	.word	0x08008e70
 80040b4:	20000008 	.word	0x20000008
 80040b8:	2000000c 	.word	0x2000000c

080040bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000008 	.word	0x20000008

080040d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040d8:	f7ff fff0 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0a9b      	lsrs	r3, r3, #10
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4903      	ldr	r1, [pc, #12]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40023800 	.word	0x40023800
 80040f8:	08008e80 	.word	0x08008e80

080040fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004100:	f7ff ffdc 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0b5b      	lsrs	r3, r3, #13
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4903      	ldr	r1, [pc, #12]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40023800 	.word	0x40023800
 8004120:	08008e80 	.word	0x08008e80

08004124 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	220f      	movs	r2, #15
 8004132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0203 	and.w	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	08db      	lsrs	r3, r3, #3
 800415e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_RCC_GetClockConfig+0x60>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 020f 	and.w	r2, r3, #15
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	40023c00 	.word	0x40023c00

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800418c:	b0ae      	sub	sp, #184	; 0xb8
 800418e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ae:	4bcb      	ldr	r3, [pc, #812]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	f200 8206 	bhi.w	80045c8 <HAL_RCC_GetSysClockFreq+0x440>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041f9 	.word	0x080041f9
 80041c8:	080045c9 	.word	0x080045c9
 80041cc:	080045c9 	.word	0x080045c9
 80041d0:	080045c9 	.word	0x080045c9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	080045c9 	.word	0x080045c9
 80041dc:	080045c9 	.word	0x080045c9
 80041e0:	080045c9 	.word	0x080045c9
 80041e4:	08004209 	.word	0x08004209
 80041e8:	080045c9 	.word	0x080045c9
 80041ec:	080045c9 	.word	0x080045c9
 80041f0:	080045c9 	.word	0x080045c9
 80041f4:	080043f9 	.word	0x080043f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4bb9      	ldr	r3, [pc, #740]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80041fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80041fe:	e1e7      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004200:	4bb8      	ldr	r3, [pc, #736]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004206:	e1e3      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004208:	4bb4      	ldr	r3, [pc, #720]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004214:	4bb1      	ldr	r3, [pc, #708]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d071      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004220:	4bae      	ldr	r3, [pc, #696]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	099b      	lsrs	r3, r3, #6
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800422c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004242:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004246:	4622      	mov	r2, r4
 8004248:	462b      	mov	r3, r5
 800424a:	f04f 0000 	mov.w	r0, #0
 800424e:	f04f 0100 	mov.w	r1, #0
 8004252:	0159      	lsls	r1, r3, #5
 8004254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004258:	0150      	lsls	r0, r2, #5
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4621      	mov	r1, r4
 8004260:	1a51      	subs	r1, r2, r1
 8004262:	6439      	str	r1, [r7, #64]	; 0x40
 8004264:	4629      	mov	r1, r5
 8004266:	eb63 0301 	sbc.w	r3, r3, r1
 800426a:	647b      	str	r3, [r7, #68]	; 0x44
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004278:	4649      	mov	r1, r9
 800427a:	018b      	lsls	r3, r1, #6
 800427c:	4641      	mov	r1, r8
 800427e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004282:	4641      	mov	r1, r8
 8004284:	018a      	lsls	r2, r1, #6
 8004286:	4641      	mov	r1, r8
 8004288:	1a51      	subs	r1, r2, r1
 800428a:	63b9      	str	r1, [r7, #56]	; 0x38
 800428c:	4649      	mov	r1, r9
 800428e:	eb63 0301 	sbc.w	r3, r3, r1
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80042a0:	4649      	mov	r1, r9
 80042a2:	00cb      	lsls	r3, r1, #3
 80042a4:	4641      	mov	r1, r8
 80042a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042aa:	4641      	mov	r1, r8
 80042ac:	00ca      	lsls	r2, r1, #3
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	4622      	mov	r2, r4
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ba:	462b      	mov	r3, r5
 80042bc:	460a      	mov	r2, r1
 80042be:	eb42 0303 	adc.w	r3, r2, r3
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042d0:	4629      	mov	r1, r5
 80042d2:	024b      	lsls	r3, r1, #9
 80042d4:	4621      	mov	r1, r4
 80042d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042da:	4621      	mov	r1, r4
 80042dc:	024a      	lsls	r2, r1, #9
 80042de:	4610      	mov	r0, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80042f4:	f7fc fb7a 	bl	80009ec <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4613      	mov	r3, r2
 80042fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004302:	e067      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004304:	4b75      	ldr	r3, [pc, #468]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	099b      	lsrs	r3, r3, #6
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004310:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431c:	67bb      	str	r3, [r7, #120]	; 0x78
 800431e:	2300      	movs	r3, #0
 8004320:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004322:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004326:	4622      	mov	r2, r4
 8004328:	462b      	mov	r3, r5
 800432a:	f04f 0000 	mov.w	r0, #0
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	0159      	lsls	r1, r3, #5
 8004334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004338:	0150      	lsls	r0, r2, #5
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4621      	mov	r1, r4
 8004340:	1a51      	subs	r1, r2, r1
 8004342:	62b9      	str	r1, [r7, #40]	; 0x28
 8004344:	4629      	mov	r1, r5
 8004346:	eb63 0301 	sbc.w	r3, r3, r1
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004358:	4649      	mov	r1, r9
 800435a:	018b      	lsls	r3, r1, #6
 800435c:	4641      	mov	r1, r8
 800435e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004362:	4641      	mov	r1, r8
 8004364:	018a      	lsls	r2, r1, #6
 8004366:	4641      	mov	r1, r8
 8004368:	ebb2 0a01 	subs.w	sl, r2, r1
 800436c:	4649      	mov	r1, r9
 800436e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800437e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004386:	4692      	mov	sl, r2
 8004388:	469b      	mov	fp, r3
 800438a:	4623      	mov	r3, r4
 800438c:	eb1a 0303 	adds.w	r3, sl, r3
 8004390:	623b      	str	r3, [r7, #32]
 8004392:	462b      	mov	r3, r5
 8004394:	eb4b 0303 	adc.w	r3, fp, r3
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80043a6:	4629      	mov	r1, r5
 80043a8:	028b      	lsls	r3, r1, #10
 80043aa:	4621      	mov	r1, r4
 80043ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b0:	4621      	mov	r1, r4
 80043b2:	028a      	lsls	r2, r1, #10
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043bc:	2200      	movs	r2, #0
 80043be:	673b      	str	r3, [r7, #112]	; 0x70
 80043c0:	677a      	str	r2, [r7, #116]	; 0x74
 80043c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80043c6:	f7fc fb11 	bl	80009ec <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4613      	mov	r3, r2
 80043d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d4:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	3301      	adds	r3, #1
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80043e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043f6:	e0eb      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f8:	4b38      	ldr	r3, [pc, #224]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004404:	4b35      	ldr	r3, [pc, #212]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d06b      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004410:	4b32      	ldr	r3, [pc, #200]	; (80044dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	2200      	movs	r2, #0
 8004418:	66bb      	str	r3, [r7, #104]	; 0x68
 800441a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800441c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	663b      	str	r3, [r7, #96]	; 0x60
 8004424:	2300      	movs	r3, #0
 8004426:	667b      	str	r3, [r7, #100]	; 0x64
 8004428:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800442c:	4622      	mov	r2, r4
 800442e:	462b      	mov	r3, r5
 8004430:	f04f 0000 	mov.w	r0, #0
 8004434:	f04f 0100 	mov.w	r1, #0
 8004438:	0159      	lsls	r1, r3, #5
 800443a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800443e:	0150      	lsls	r0, r2, #5
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4621      	mov	r1, r4
 8004446:	1a51      	subs	r1, r2, r1
 8004448:	61b9      	str	r1, [r7, #24]
 800444a:	4629      	mov	r1, r5
 800444c:	eb63 0301 	sbc.w	r3, r3, r1
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800445e:	4659      	mov	r1, fp
 8004460:	018b      	lsls	r3, r1, #6
 8004462:	4651      	mov	r1, sl
 8004464:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004468:	4651      	mov	r1, sl
 800446a:	018a      	lsls	r2, r1, #6
 800446c:	4651      	mov	r1, sl
 800446e:	ebb2 0801 	subs.w	r8, r2, r1
 8004472:	4659      	mov	r1, fp
 8004474:	eb63 0901 	sbc.w	r9, r3, r1
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004484:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004488:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448c:	4690      	mov	r8, r2
 800448e:	4699      	mov	r9, r3
 8004490:	4623      	mov	r3, r4
 8004492:	eb18 0303 	adds.w	r3, r8, r3
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	462b      	mov	r3, r5
 800449a:	eb49 0303 	adc.w	r3, r9, r3
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80044ac:	4629      	mov	r1, r5
 80044ae:	024b      	lsls	r3, r1, #9
 80044b0:	4621      	mov	r1, r4
 80044b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044b6:	4621      	mov	r1, r4
 80044b8:	024a      	lsls	r2, r1, #9
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044c2:	2200      	movs	r2, #0
 80044c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80044c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044cc:	f7fc fa8e 	bl	80009ec <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4613      	mov	r3, r2
 80044d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044da:	e065      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x420>
 80044dc:	40023800 	.word	0x40023800
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e8:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	2200      	movs	r2, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	4611      	mov	r1, r2
 80044f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044f8:	653b      	str	r3, [r7, #80]	; 0x50
 80044fa:	2300      	movs	r3, #0
 80044fc:	657b      	str	r3, [r7, #84]	; 0x54
 80044fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004502:	4642      	mov	r2, r8
 8004504:	464b      	mov	r3, r9
 8004506:	f04f 0000 	mov.w	r0, #0
 800450a:	f04f 0100 	mov.w	r1, #0
 800450e:	0159      	lsls	r1, r3, #5
 8004510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004514:	0150      	lsls	r0, r2, #5
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4641      	mov	r1, r8
 800451c:	1a51      	subs	r1, r2, r1
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	4649      	mov	r1, r9
 8004522:	eb63 0301 	sbc.w	r3, r3, r1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004534:	4659      	mov	r1, fp
 8004536:	018b      	lsls	r3, r1, #6
 8004538:	4651      	mov	r1, sl
 800453a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800453e:	4651      	mov	r1, sl
 8004540:	018a      	lsls	r2, r1, #6
 8004542:	4651      	mov	r1, sl
 8004544:	1a54      	subs	r4, r2, r1
 8004546:	4659      	mov	r1, fp
 8004548:	eb63 0501 	sbc.w	r5, r3, r1
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	00eb      	lsls	r3, r5, #3
 8004556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800455a:	00e2      	lsls	r2, r4, #3
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
 8004560:	4643      	mov	r3, r8
 8004562:	18e3      	adds	r3, r4, r3
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	464b      	mov	r3, r9
 8004568:	eb45 0303 	adc.w	r3, r5, r3
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800457a:	4629      	mov	r1, r5
 800457c:	028b      	lsls	r3, r1, #10
 800457e:	4621      	mov	r1, r4
 8004580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004584:	4621      	mov	r1, r4
 8004586:	028a      	lsls	r2, r1, #10
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004590:	2200      	movs	r2, #0
 8004592:	64bb      	str	r3, [r7, #72]	; 0x48
 8004594:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004596:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800459a:	f7fc fa27 	bl	80009ec <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4613      	mov	r3, r2
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0f1b      	lsrs	r3, r3, #28
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80045b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045c6:	e003      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80045ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	37b8      	adds	r7, #184	; 0xb8
 80045d8:	46bd      	mov	sp, r7
 80045da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	00f42400 	.word	0x00f42400

080045e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e28d      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8083 	beq.w	800470e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004608:	4b94      	ldr	r3, [pc, #592]	; (800485c <HAL_RCC_OscConfig+0x274>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b04      	cmp	r3, #4
 8004612:	d019      	beq.n	8004648 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004614:	4b91      	ldr	r3, [pc, #580]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800461c:	2b08      	cmp	r3, #8
 800461e:	d106      	bne.n	800462e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004620:	4b8e      	ldr	r3, [pc, #568]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462c:	d00c      	beq.n	8004648 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462e:	4b8b      	ldr	r3, [pc, #556]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d112      	bne.n	8004660 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800463a:	4b88      	ldr	r3, [pc, #544]	; (800485c <HAL_RCC_OscConfig+0x274>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004646:	d10b      	bne.n	8004660 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4b84      	ldr	r3, [pc, #528]	; (800485c <HAL_RCC_OscConfig+0x274>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05b      	beq.n	800470c <HAL_RCC_OscConfig+0x124>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d157      	bne.n	800470c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e25a      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x90>
 800466a:	4b7c      	ldr	r3, [pc, #496]	; (800485c <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7b      	ldr	r2, [pc, #492]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e01d      	b.n	80046b4 <HAL_RCC_OscConfig+0xcc>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0xb4>
 8004682:	4b76      	ldr	r3, [pc, #472]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a75      	ldr	r2, [pc, #468]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b73      	ldr	r3, [pc, #460]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a72      	ldr	r2, [pc, #456]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0xcc>
 800469c:	4b6f      	ldr	r3, [pc, #444]	; (800485c <HAL_RCC_OscConfig+0x274>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a6e      	ldr	r2, [pc, #440]	; (800485c <HAL_RCC_OscConfig+0x274>)
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b6c      	ldr	r3, [pc, #432]	; (800485c <HAL_RCC_OscConfig+0x274>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a6b      	ldr	r2, [pc, #428]	; (800485c <HAL_RCC_OscConfig+0x274>)
 80046ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d013      	beq.n	80046e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7ff f962 	bl	8003984 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046c4:	f7ff f95e 	bl	8003984 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	; 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e21f      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	4b61      	ldr	r3, [pc, #388]	; (800485c <HAL_RCC_OscConfig+0x274>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0xdc>
 80046e2:	e014      	b.n	800470e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7ff f94e 	bl	8003984 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ec:	f7ff f94a 	bl	8003984 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e20b      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fe:	4b57      	ldr	r3, [pc, #348]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x104>
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d06f      	beq.n	80047fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800471a:	4b50      	ldr	r3, [pc, #320]	; (800485c <HAL_RCC_OscConfig+0x274>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b00      	cmp	r3, #0
 8004724:	d017      	beq.n	8004756 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004726:	4b4d      	ldr	r3, [pc, #308]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800472e:	2b08      	cmp	r3, #8
 8004730:	d105      	bne.n	800473e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004732:	4b4a      	ldr	r3, [pc, #296]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473e:	4b47      	ldr	r3, [pc, #284]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004746:	2b0c      	cmp	r3, #12
 8004748:	d11c      	bne.n	8004784 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b44      	ldr	r3, [pc, #272]	; (800485c <HAL_RCC_OscConfig+0x274>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d116      	bne.n	8004784 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	4b41      	ldr	r3, [pc, #260]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_RCC_OscConfig+0x186>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e1d3      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4937      	ldr	r1, [pc, #220]	; (800485c <HAL_RCC_OscConfig+0x274>)
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	e03a      	b.n	80047fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800478c:	4b34      	ldr	r3, [pc, #208]	; (8004860 <HAL_RCC_OscConfig+0x278>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7ff f8f7 	bl	8003984 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800479a:	f7ff f8f3 	bl	8003984 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1b4      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <HAL_RCC_OscConfig+0x274>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_RCC_OscConfig+0x274>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4925      	ldr	r1, [pc, #148]	; (800485c <HAL_RCC_OscConfig+0x274>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	e015      	b.n	80047fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_OscConfig+0x278>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7ff f8d6 	bl	8003984 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047dc:	f7ff f8d2 	bl	8003984 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e193      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x274>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d036      	beq.n	8004874 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480e:	4b15      	ldr	r3, [pc, #84]	; (8004864 <HAL_RCC_OscConfig+0x27c>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7ff f8b6 	bl	8003984 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481c:	f7ff f8b2 	bl	8003984 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e173      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_OscConfig+0x274>)
 8004830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x234>
 800483a:	e01b      	b.n	8004874 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_OscConfig+0x27c>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004842:	f7ff f89f 	bl	8003984 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004848:	e00e      	b.n	8004868 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484a:	f7ff f89b 	bl	8003984 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d907      	bls.n	8004868 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e15c      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
 800485c:	40023800 	.word	0x40023800
 8004860:	42470000 	.word	0x42470000
 8004864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	4b8a      	ldr	r3, [pc, #552]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ea      	bne.n	800484a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8097 	beq.w	80049b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b83      	ldr	r3, [pc, #524]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10f      	bne.n	80048b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	4b7f      	ldr	r3, [pc, #508]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4a7e      	ldr	r2, [pc, #504]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	; 0x40
 80048a2:	4b7c      	ldr	r3, [pc, #496]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b2:	4b79      	ldr	r3, [pc, #484]	; (8004a98 <HAL_RCC_OscConfig+0x4b0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d118      	bne.n	80048f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048be:	4b76      	ldr	r3, [pc, #472]	; (8004a98 <HAL_RCC_OscConfig+0x4b0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a75      	ldr	r2, [pc, #468]	; (8004a98 <HAL_RCC_OscConfig+0x4b0>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ca:	f7ff f85b 	bl	8003984 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d2:	f7ff f857 	bl	8003984 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e118      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	4b6c      	ldr	r3, [pc, #432]	; (8004a98 <HAL_RCC_OscConfig+0x4b0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x31e>
 80048f8:	4b66      	ldr	r3, [pc, #408]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	4a65      	ldr	r2, [pc, #404]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	; 0x70
 8004904:	e01c      	b.n	8004940 <HAL_RCC_OscConfig+0x358>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b05      	cmp	r3, #5
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x340>
 800490e:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a60      	ldr	r2, [pc, #384]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
 800491a:	4b5e      	ldr	r3, [pc, #376]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a5d      	ldr	r2, [pc, #372]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0x358>
 8004928:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	4a59      	ldr	r2, [pc, #356]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6713      	str	r3, [r2, #112]	; 0x70
 8004934:	4b57      	ldr	r3, [pc, #348]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	4a56      	ldr	r2, [pc, #344]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 800493a:	f023 0304 	bic.w	r3, r3, #4
 800493e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7ff f81c 	bl	8003984 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7ff f818 	bl	8003984 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0d7      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	4b4b      	ldr	r3, [pc, #300]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ee      	beq.n	8004950 <HAL_RCC_OscConfig+0x368>
 8004972:	e014      	b.n	800499e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7ff f806 	bl	8003984 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497a:	e00a      	b.n	8004992 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497c:	f7ff f802 	bl	8003984 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0c1      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	4b40      	ldr	r3, [pc, #256]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ee      	bne.n	800497c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a4:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 80049aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80ad 	beq.w	8004b14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ba:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d060      	beq.n	8004a88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d145      	bne.n	8004a5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ce:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <HAL_RCC_OscConfig+0x4b4>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fe ffd6 	bl	8003984 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fe ffd2 	bl	8003984 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e093      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	4b29      	ldr	r3, [pc, #164]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	019b      	lsls	r3, r3, #6
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	3b01      	subs	r3, #1
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	071b      	lsls	r3, r3, #28
 8004a26:	491b      	ldr	r1, [pc, #108]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_RCC_OscConfig+0x4b4>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fe ffa7 	bl	8003984 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fe ffa3 	bl	8003984 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e064      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x452>
 8004a58:	e05c      	b.n	8004b14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCC_OscConfig+0x4b4>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe ff90 	bl	8003984 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fe ff8c 	bl	8003984 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e04d      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_OscConfig+0x4ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x480>
 8004a86:	e045      	b.n	8004b14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e040      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000
 8004a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa0:	4b1f      	ldr	r3, [pc, #124]	; (8004b20 <HAL_RCC_OscConfig+0x538>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d030      	beq.n	8004b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d129      	bne.n	8004b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d122      	bne.n	8004b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d119      	bne.n	8004b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d10f      	bne.n	8004b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800

08004b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e041      	b.n	8004bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fe fbf2 	bl	8003334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f000 ff18 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d001      	beq.n	8004bdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e046      	b.n	8004c6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a23      	ldr	r2, [pc, #140]	; (8004c78 <HAL_TIM_Base_Start+0xb4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d022      	beq.n	8004c34 <HAL_TIM_Base_Start+0x70>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf6:	d01d      	beq.n	8004c34 <HAL_TIM_Base_Start+0x70>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <HAL_TIM_Base_Start+0xb8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d018      	beq.n	8004c34 <HAL_TIM_Base_Start+0x70>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <HAL_TIM_Base_Start+0xbc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <HAL_TIM_Base_Start+0x70>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_TIM_Base_Start+0xc0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <HAL_TIM_Base_Start+0x70>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_TIM_Base_Start+0xc4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <HAL_TIM_Base_Start+0x70>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <HAL_TIM_Base_Start+0xc8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_TIM_Base_Start+0x70>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <HAL_TIM_Base_Start+0xcc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d111      	bne.n	8004c58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d010      	beq.n	8004c68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0201 	orr.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c56:	e007      	b.n	8004c68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40010400 	.word	0x40010400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40001800 	.word	0x40001800

08004c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d001      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e04e      	b.n	8004d4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a23      	ldr	r2, [pc, #140]	; (8004d58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d01d      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a18      	ldr	r2, [pc, #96]	; (8004d70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d111      	bne.n	8004d38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d010      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e007      	b.n	8004d48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800
 8004d64:	40000c00 	.word	0x40000c00
 8004d68:	40010400 	.word	0x40010400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40001800 	.word	0x40001800

08004d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e041      	b.n	8004e0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f839 	bl	8004e12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f000 fdf0 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_TIM_PWM_Start+0x24>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e022      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d109      	bne.n	8004e66 <HAL_TIM_PWM_Start+0x3e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	bf14      	ite	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	2300      	moveq	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	e015      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d109      	bne.n	8004e80 <HAL_TIM_PWM_Start+0x58>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e008      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf14      	ite	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	2300      	moveq	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07c      	b.n	8004f94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <HAL_TIM_PWM_Start+0x82>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea8:	e013      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_PWM_Start+0x92>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb8:	e00b      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0xa2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec8:	e003      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f001 f97c 	bl	80061d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2d      	ldr	r2, [pc, #180]	; (8004f9c <HAL_TIM_PWM_Start+0x174>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0xcc>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <HAL_TIM_PWM_Start+0x178>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIM_PWM_Start+0xd0>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_TIM_PWM_Start+0xd2>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <HAL_TIM_PWM_Start+0x174>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_TIM_PWM_Start+0x17c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_TIM_PWM_Start+0x180>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <HAL_TIM_PWM_Start+0x184>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <HAL_TIM_PWM_Start+0x178>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_TIM_PWM_Start+0x188>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <HAL_TIM_PWM_Start+0x18c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d111      	bne.n	8004f82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d010      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f80:	e007      	b.n	8004f92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40001800 	.word	0x40001800

08004fb8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e041      	b.n	800504e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fe f924 	bl	800322c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fcce 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_TIM_IC_Start_IT+0x1e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005072:	b2db      	uxtb	r3, r3
 8005074:	e013      	b.n	800509e <HAL_TIM_IC_Start_IT+0x46>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d104      	bne.n	8005086 <HAL_TIM_IC_Start_IT+0x2e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e00b      	b.n	800509e <HAL_TIM_IC_Start_IT+0x46>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d104      	bne.n	8005096 <HAL_TIM_IC_Start_IT+0x3e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e003      	b.n	800509e <HAL_TIM_IC_Start_IT+0x46>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509c:	b2db      	uxtb	r3, r3
 800509e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d104      	bne.n	80050b0 <HAL_TIM_IC_Start_IT+0x58>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e013      	b.n	80050d8 <HAL_TIM_IC_Start_IT+0x80>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d104      	bne.n	80050c0 <HAL_TIM_IC_Start_IT+0x68>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e00b      	b.n	80050d8 <HAL_TIM_IC_Start_IT+0x80>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d104      	bne.n	80050d0 <HAL_TIM_IC_Start_IT+0x78>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e003      	b.n	80050d8 <HAL_TIM_IC_Start_IT+0x80>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050da:	7bbb      	ldrb	r3, [r7, #14]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d102      	bne.n	80050e6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050e0:	7b7b      	ldrb	r3, [r7, #13]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d001      	beq.n	80050ea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e0cc      	b.n	8005284 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_IC_Start_IT+0xa2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f8:	e013      	b.n	8005122 <HAL_TIM_IC_Start_IT+0xca>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d104      	bne.n	800510a <HAL_TIM_IC_Start_IT+0xb2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005108:	e00b      	b.n	8005122 <HAL_TIM_IC_Start_IT+0xca>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d104      	bne.n	800511a <HAL_TIM_IC_Start_IT+0xc2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005118:	e003      	b.n	8005122 <HAL_TIM_IC_Start_IT+0xca>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <HAL_TIM_IC_Start_IT+0xda>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005130:	e013      	b.n	800515a <HAL_TIM_IC_Start_IT+0x102>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d104      	bne.n	8005142 <HAL_TIM_IC_Start_IT+0xea>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005140:	e00b      	b.n	800515a <HAL_TIM_IC_Start_IT+0x102>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d104      	bne.n	8005152 <HAL_TIM_IC_Start_IT+0xfa>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005150:	e003      	b.n	800515a <HAL_TIM_IC_Start_IT+0x102>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d841      	bhi.n	80051e4 <HAL_TIM_IC_Start_IT+0x18c>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <HAL_TIM_IC_Start_IT+0x110>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	0800519d 	.word	0x0800519d
 800516c:	080051e5 	.word	0x080051e5
 8005170:	080051e5 	.word	0x080051e5
 8005174:	080051e5 	.word	0x080051e5
 8005178:	080051af 	.word	0x080051af
 800517c:	080051e5 	.word	0x080051e5
 8005180:	080051e5 	.word	0x080051e5
 8005184:	080051e5 	.word	0x080051e5
 8005188:	080051c1 	.word	0x080051c1
 800518c:	080051e5 	.word	0x080051e5
 8005190:	080051e5 	.word	0x080051e5
 8005194:	080051e5 	.word	0x080051e5
 8005198:	080051d3 	.word	0x080051d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0202 	orr.w	r2, r2, #2
 80051aa:	60da      	str	r2, [r3, #12]
      break;
 80051ac:	e01d      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0204 	orr.w	r2, r2, #4
 80051bc:	60da      	str	r2, [r3, #12]
      break;
 80051be:	e014      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0208 	orr.w	r2, r2, #8
 80051ce:	60da      	str	r2, [r3, #12]
      break;
 80051d0:	e00b      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0210 	orr.w	r2, r2, #16
 80051e0:	60da      	str	r2, [r3, #12]
      break;
 80051e2:	e002      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d148      	bne.n	8005282 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	6839      	ldr	r1, [r7, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 ffed 	bl	80061d8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a22      	ldr	r2, [pc, #136]	; (800528c <HAL_TIM_IC_Start_IT+0x234>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d022      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x1f6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005210:	d01d      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x1f6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <HAL_TIM_IC_Start_IT+0x238>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d018      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x1f6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <HAL_TIM_IC_Start_IT+0x23c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d013      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x1f6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIM_IC_Start_IT+0x240>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x1f6>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <HAL_TIM_IC_Start_IT+0x244>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x1f6>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_TIM_IC_Start_IT+0x248>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x1f6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <HAL_TIM_IC_Start_IT+0x24c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d111      	bne.n	8005272 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b06      	cmp	r3, #6
 800525e:	d010      	beq.n	8005282 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005270:	e007      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0201 	orr.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40010400 	.word	0x40010400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d020      	beq.n	800530c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01b      	beq.n	800530c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0202 	mvn.w	r2, #2
 80052dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fc fed2 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fb2e 	bl	800595c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fb35 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d020      	beq.n	8005358 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0204 	mvn.w	r2, #4
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc feac 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fb08 	bl	800595c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fb0f 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d020      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01b      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0208 	mvn.w	r2, #8
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2204      	movs	r2, #4
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc fe86 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fae2 	bl	800595c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fae9 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d020      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01b      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0210 	mvn.w	r2, #16
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2208      	movs	r2, #8
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fc fe60 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fabc 	bl	800595c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fac3 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00c      	beq.n	8005414 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0201 	mvn.w	r2, #1
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fd fc4e 	bl	8002cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 ff7c 	bl	8006330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fa94 	bl	8005984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0220 	mvn.w	r2, #32
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 ff4e 	bl	800631c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e088      	b.n	80055b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11b      	bne.n	80054ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80054c4:	f000 fcc4 	bl	8005e50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 020c 	bic.w	r2, r2, #12
 80054d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	619a      	str	r2, [r3, #24]
 80054ea:	e060      	b.n	80055ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d11c      	bne.n	800552c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005502:	f000 fd48 	bl	8005f96 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005514:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6999      	ldr	r1, [r3, #24]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	021a      	lsls	r2, r3, #8
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	619a      	str	r2, [r3, #24]
 800552a:	e040      	b.n	80055ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b08      	cmp	r3, #8
 8005530:	d11b      	bne.n	800556a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005542:	f000 fd95 	bl	8006070 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 020c 	bic.w	r2, r2, #12
 8005554:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69d9      	ldr	r1, [r3, #28]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	61da      	str	r2, [r3, #28]
 8005568:	e021      	b.n	80055ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b0c      	cmp	r3, #12
 800556e:	d11c      	bne.n	80055aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005580:	f000 fdb2 	bl	80060e8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005592:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69d9      	ldr	r1, [r3, #28]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	61da      	str	r2, [r3, #28]
 80055a8:	e001      	b.n	80055ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055da:	2302      	movs	r3, #2
 80055dc:	e0ae      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	f200 809f 	bhi.w	800572c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005629 	.word	0x08005629
 80055f8:	0800572d 	.word	0x0800572d
 80055fc:	0800572d 	.word	0x0800572d
 8005600:	0800572d 	.word	0x0800572d
 8005604:	08005669 	.word	0x08005669
 8005608:	0800572d 	.word	0x0800572d
 800560c:	0800572d 	.word	0x0800572d
 8005610:	0800572d 	.word	0x0800572d
 8005614:	080056ab 	.word	0x080056ab
 8005618:	0800572d 	.word	0x0800572d
 800561c:	0800572d 	.word	0x0800572d
 8005620:	0800572d 	.word	0x0800572d
 8005624:	080056eb 	.word	0x080056eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fa5e 	bl	8005af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0208 	orr.w	r2, r2, #8
 8005642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0204 	bic.w	r2, r2, #4
 8005652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6999      	ldr	r1, [r3, #24]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	619a      	str	r2, [r3, #24]
      break;
 8005666:	e064      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 faae 	bl	8005bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	619a      	str	r2, [r3, #24]
      break;
 80056a8:	e043      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fb03 	bl	8005cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0208 	orr.w	r2, r2, #8
 80056c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0204 	bic.w	r2, r2, #4
 80056d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69d9      	ldr	r1, [r3, #28]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	61da      	str	r2, [r3, #28]
      break;
 80056e8:	e023      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fb57 	bl	8005da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	021a      	lsls	r2, r3, #8
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	61da      	str	r2, [r3, #28]
      break;
 800572a:	e002      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	75fb      	strb	r3, [r7, #23]
      break;
 8005730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800573a:	7dfb      	ldrb	r3, [r7, #23]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIM_ConfigClockSource+0x1c>
 800575c:	2302      	movs	r3, #2
 800575e:	e0b4      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x186>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800577e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005798:	d03e      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0xd4>
 800579a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579e:	f200 8087 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a6:	f000 8086 	beq.w	80058b6 <HAL_TIM_ConfigClockSource+0x172>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d87f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b70      	cmp	r3, #112	; 0x70
 80057b2:	d01a      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0xa6>
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d87b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b60      	cmp	r3, #96	; 0x60
 80057ba:	d050      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x11a>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d877      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b50      	cmp	r3, #80	; 0x50
 80057c2:	d03c      	beq.n	800583e <HAL_TIM_ConfigClockSource+0xfa>
 80057c4:	2b50      	cmp	r3, #80	; 0x50
 80057c6:	d873      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d058      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x13a>
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d86f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d064      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057d4:	2b30      	cmp	r3, #48	; 0x30
 80057d6:	d86b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d060      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d867      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d05c      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d05a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	e062      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057fa:	f000 fccd 	bl	8006198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800580c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	609a      	str	r2, [r3, #8]
      break;
 8005816:	e04f      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005828:	f000 fcb6 	bl	8006198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583a:	609a      	str	r2, [r3, #8]
      break;
 800583c:	e03c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	461a      	mov	r2, r3
 800584c:	f000 fb74 	bl	8005f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2150      	movs	r1, #80	; 0x50
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fc83 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 800585c:	e02c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800586a:	461a      	mov	r2, r3
 800586c:	f000 fbd0 	bl	8006010 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2160      	movs	r1, #96	; 0x60
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fc73 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 800587c:	e01c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588a:	461a      	mov	r2, r3
 800588c:	f000 fb54 	bl	8005f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2140      	movs	r1, #64	; 0x40
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fc63 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 800589c:	e00c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f000 fc5a 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 80058ae:	e003      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
      break;
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d831      	bhi.n	800594c <HAL_TIM_ReadCapturedValue+0x78>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005925 	.word	0x08005925
 80058f4:	0800594d 	.word	0x0800594d
 80058f8:	0800594d 	.word	0x0800594d
 80058fc:	0800594d 	.word	0x0800594d
 8005900:	0800592f 	.word	0x0800592f
 8005904:	0800594d 	.word	0x0800594d
 8005908:	0800594d 	.word	0x0800594d
 800590c:	0800594d 	.word	0x0800594d
 8005910:	08005939 	.word	0x08005939
 8005914:	0800594d 	.word	0x0800594d
 8005918:	0800594d 	.word	0x0800594d
 800591c:	0800594d 	.word	0x0800594d
 8005920:	08005943 	.word	0x08005943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	60fb      	str	r3, [r7, #12]

      break;
 800592c:	e00f      	b.n	800594e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	60fb      	str	r3, [r7, #12]

      break;
 8005936:	e00a      	b.n	800594e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	60fb      	str	r3, [r7, #12]

      break;
 8005940:	e005      	b.n	800594e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	60fb      	str	r3, [r7, #12]

      break;
 800594a:	e000      	b.n	800594e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800594c:	bf00      	nop
  }

  return tmpreg;
 800594e:	68fb      	ldr	r3, [r7, #12]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a46      	ldr	r2, [pc, #280]	; (8005ac4 <TIM_Base_SetConfig+0x12c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d013      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d00f      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a43      	ldr	r2, [pc, #268]	; (8005ac8 <TIM_Base_SetConfig+0x130>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a42      	ldr	r2, [pc, #264]	; (8005acc <TIM_Base_SetConfig+0x134>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a41      	ldr	r2, [pc, #260]	; (8005ad0 <TIM_Base_SetConfig+0x138>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a40      	ldr	r2, [pc, #256]	; (8005ad4 <TIM_Base_SetConfig+0x13c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d108      	bne.n	80059ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a35      	ldr	r2, [pc, #212]	; (8005ac4 <TIM_Base_SetConfig+0x12c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d027      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a32      	ldr	r2, [pc, #200]	; (8005ac8 <TIM_Base_SetConfig+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d023      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a31      	ldr	r2, [pc, #196]	; (8005acc <TIM_Base_SetConfig+0x134>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01f      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a30      	ldr	r2, [pc, #192]	; (8005ad0 <TIM_Base_SetConfig+0x138>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <TIM_Base_SetConfig+0x13c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d017      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <TIM_Base_SetConfig+0x140>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2d      	ldr	r2, [pc, #180]	; (8005adc <TIM_Base_SetConfig+0x144>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ae0 <TIM_Base_SetConfig+0x148>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <TIM_Base_SetConfig+0x14c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <TIM_Base_SetConfig+0x150>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <TIM_Base_SetConfig+0x154>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a10      	ldr	r2, [pc, #64]	; (8005ac4 <TIM_Base_SetConfig+0x12c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_Base_SetConfig+0xf8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <TIM_Base_SetConfig+0x13c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d103      	bne.n	8005a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d105      	bne.n	8005ab6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	611a      	str	r2, [r3, #16]
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40010400 	.word	0x40010400
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40014400 	.word	0x40014400
 8005ae0:	40014800 	.word	0x40014800
 8005ae4:	40001800 	.word	0x40001800
 8005ae8:	40001c00 	.word	0x40001c00
 8005aec:	40002000 	.word	0x40002000

08005af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 0201 	bic.w	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f023 0302 	bic.w	r3, r3, #2
 8005b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <TIM_OC1_SetConfig+0xd8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC1_SetConfig+0x64>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <TIM_OC1_SetConfig+0xdc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10c      	bne.n	8005b6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 0308 	bic.w	r3, r3, #8
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 0304 	bic.w	r3, r3, #4
 8005b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <TIM_OC1_SetConfig+0xd8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC1_SetConfig+0x8e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a14      	ldr	r2, [pc, #80]	; (8005bcc <TIM_OC1_SetConfig+0xdc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d111      	bne.n	8005ba2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0210 	bic.w	r2, r3, #16
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0320 	bic.w	r3, r3, #32
 8005c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a22      	ldr	r2, [pc, #136]	; (8005cb4 <TIM_OC2_SetConfig+0xe4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC2_SetConfig+0x68>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a21      	ldr	r2, [pc, #132]	; (8005cb8 <TIM_OC2_SetConfig+0xe8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d10d      	bne.n	8005c54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a17      	ldr	r2, [pc, #92]	; (8005cb4 <TIM_OC2_SetConfig+0xe4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC2_SetConfig+0x94>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a16      	ldr	r2, [pc, #88]	; (8005cb8 <TIM_OC2_SetConfig+0xe8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d113      	bne.n	8005c8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40010400 	.word	0x40010400

08005cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <TIM_OC3_SetConfig+0xe0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d003      	beq.n	8005d22 <TIM_OC3_SetConfig+0x66>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a20      	ldr	r2, [pc, #128]	; (8005da0 <TIM_OC3_SetConfig+0xe4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10d      	bne.n	8005d3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a16      	ldr	r2, [pc, #88]	; (8005d9c <TIM_OC3_SetConfig+0xe0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC3_SetConfig+0x92>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <TIM_OC3_SetConfig+0xe4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d113      	bne.n	8005d76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40010400 	.word	0x40010400

08005da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	031b      	lsls	r3, r3, #12
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <TIM_OC4_SetConfig+0xa4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC4_SetConfig+0x68>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <TIM_OC4_SetConfig+0xa8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d109      	bne.n	8005e20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40010400 	.word	0x40010400

08005e50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f023 0201 	bic.w	r2, r3, #1
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a28      	ldr	r2, [pc, #160]	; (8005f1c <TIM_TI1_SetConfig+0xcc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01b      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d017      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4a25      	ldr	r2, [pc, #148]	; (8005f20 <TIM_TI1_SetConfig+0xd0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4a24      	ldr	r2, [pc, #144]	; (8005f24 <TIM_TI1_SetConfig+0xd4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00f      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <TIM_TI1_SetConfig+0xd8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <TIM_TI1_SetConfig+0xdc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <TIM_TI1_SetConfig+0xe0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a20      	ldr	r2, [pc, #128]	; (8005f34 <TIM_TI1_SetConfig+0xe4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <TIM_TI1_SetConfig+0x6a>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <TIM_TI1_SetConfig+0x6c>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e003      	b.n	8005eda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f023 030a 	bic.w	r3, r3, #10
 8005ef4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f003 030a 	and.w	r3, r3, #10
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40001800 	.word	0x40001800

08005f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 030a 	bic.w	r3, r3, #10
 8005f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b087      	sub	sp, #28
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f023 0210 	bic.w	r2, r3, #16
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f023 0210 	bic.w	r2, r3, #16
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800603a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	031b      	lsls	r3, r3, #12
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800604c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f023 0303 	bic.w	r3, r3, #3
 800609c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	621a      	str	r2, [r3, #32]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006114:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006126:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	031b      	lsls	r3, r3, #12
 800612c:	b29b      	uxth	r3, r3
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800613a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	031b      	lsls	r3, r3, #12
 8006140:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	f043 0307 	orr.w	r3, r3, #7
 8006184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	609a      	str	r2, [r3, #8]
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4313      	orrs	r3, r2
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	2201      	movs	r2, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1a      	ldr	r2, [r3, #32]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	43db      	mvns	r3, r3
 80061fa:	401a      	ands	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a1a      	ldr	r2, [r3, #32]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	fa01 f303 	lsl.w	r3, r1, r3
 8006210:	431a      	orrs	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006238:	2302      	movs	r3, #2
 800623a:	e05a      	b.n	80062f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a21      	ldr	r2, [pc, #132]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d022      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006288:	d01d      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d018      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1a      	ldr	r2, [pc, #104]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a18      	ldr	r2, [pc, #96]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a17      	ldr	r2, [pc, #92]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a15      	ldr	r2, [pc, #84]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d10c      	bne.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40010400 	.word	0x40010400
 8006314:	40014000 	.word	0x40014000
 8006318:	40001800 	.word	0x40001800

0800631c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e042      	b.n	80063dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fd f94e 	bl	800360c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2224      	movs	r2, #36	; 0x24
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fa09 	bl	80067a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800639c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695a      	ldr	r2, [r3, #20]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b20      	cmp	r3, #32
 8006402:	d175      	bne.n	80064f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_UART_Transmit+0x2c>
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e06e      	b.n	80064f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2221      	movs	r2, #33	; 0x21
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006422:	f7fd faaf 	bl	8003984 <HAL_GetTick>
 8006426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643c:	d108      	bne.n	8006450 <HAL_UART_Transmit+0x6c>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e003      	b.n	8006458 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006458:	e02e      	b.n	80064b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2200      	movs	r2, #0
 8006462:	2180      	movs	r1, #128	; 0x80
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f8df 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e03a      	b.n	80064f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006490:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	3302      	adds	r3, #2
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	e007      	b.n	80064aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	3301      	adds	r3, #1
 80064a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1cb      	bne.n	800645a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2200      	movs	r2, #0
 80064ca:	2140      	movs	r1, #64	; 0x40
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f8ab 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e006      	b.n	80064f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e000      	b.n	80064f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3720      	adds	r7, #32
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b08a      	sub	sp, #40	; 0x28
 80064fe:	af02      	add	r7, sp, #8
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b20      	cmp	r3, #32
 8006518:	f040 8081 	bne.w	800661e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_UART_Receive+0x2e>
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e079      	b.n	8006620 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2222      	movs	r2, #34	; 0x22
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006540:	f7fd fa20 	bl	8003984 <HAL_GetTick>
 8006544:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	88fa      	ldrh	r2, [r7, #6]
 8006550:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655a:	d108      	bne.n	800656e <HAL_UART_Receive+0x74>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	e003      	b.n	8006576 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006576:	e047      	b.n	8006608 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	2120      	movs	r1, #32
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f850 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e042      	b.n	8006620 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10c      	bne.n	80065ba <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	3302      	adds	r3, #2
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	e01f      	b.n	80065fa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	d007      	beq.n	80065d4 <HAL_UART_Receive+0xda>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <HAL_UART_Receive+0xe8>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e008      	b.n	80065f4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	3301      	adds	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1b2      	bne.n	8006578 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006638:	e03b      	b.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d037      	beq.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006642:	f7fd f99f 	bl	8003984 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	6a3a      	ldr	r2, [r7, #32]
 800664e:	429a      	cmp	r2, r3
 8006650:	d302      	bcc.n	8006658 <UART_WaitOnFlagUntilTimeout+0x30>
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e03a      	b.n	80066d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d023      	beq.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b80      	cmp	r3, #128	; 0x80
 800666e:	d020      	beq.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d01d      	beq.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b08      	cmp	r3, #8
 8006682:	d116      	bne.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f81d 	bl	80066da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2208      	movs	r2, #8
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e00f      	b.n	80066d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4013      	ands	r3, r2
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	bf0c      	ite	eq
 80066c2:	2301      	moveq	r3, #1
 80066c4:	2300      	movne	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d0b4      	beq.n	800663a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066da:	b480      	push	{r7}
 80066dc:	b095      	sub	sp, #84	; 0x54
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006702:	643a      	str	r2, [r7, #64]	; 0x40
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3314      	adds	r3, #20
 800671c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	61fb      	str	r3, [r7, #28]
   return(result);
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	64bb      	str	r3, [r7, #72]	; 0x48
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3314      	adds	r3, #20
 8006734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e5      	bne.n	8006716 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	2b01      	cmp	r3, #1
 8006750:	d119      	bne.n	8006786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	330c      	adds	r3, #12
 8006758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	60bb      	str	r3, [r7, #8]
   return(result);
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f023 0310 	bic.w	r3, r3, #16
 8006768:	647b      	str	r3, [r7, #68]	; 0x44
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	330c      	adds	r3, #12
 8006770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006772:	61ba      	str	r2, [r7, #24]
 8006774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6979      	ldr	r1, [r7, #20]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	613b      	str	r3, [r7, #16]
   return(result);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e5      	bne.n	8006752 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006794:	bf00      	nop
 8006796:	3754      	adds	r7, #84	; 0x54
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a4:	b0c0      	sub	sp, #256	; 0x100
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	68d9      	ldr	r1, [r3, #12]
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	ea40 0301 	orr.w	r3, r0, r1
 80067c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	431a      	orrs	r2, r3
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067f8:	f021 010c 	bic.w	r1, r1, #12
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006806:	430b      	orrs	r3, r1
 8006808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	6999      	ldr	r1, [r3, #24]
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	ea40 0301 	orr.w	r3, r0, r1
 8006826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4b8f      	ldr	r3, [pc, #572]	; (8006a6c <UART_SetConfig+0x2cc>)
 8006830:	429a      	cmp	r2, r3
 8006832:	d005      	beq.n	8006840 <UART_SetConfig+0xa0>
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b8d      	ldr	r3, [pc, #564]	; (8006a70 <UART_SetConfig+0x2d0>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d104      	bne.n	800684a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006840:	f7fd fc5c 	bl	80040fc <HAL_RCC_GetPCLK2Freq>
 8006844:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006848:	e003      	b.n	8006852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800684a:	f7fd fc43 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 800684e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800685c:	f040 810c 	bne.w	8006a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006864:	2200      	movs	r2, #0
 8006866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800686a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800686e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006872:	4622      	mov	r2, r4
 8006874:	462b      	mov	r3, r5
 8006876:	1891      	adds	r1, r2, r2
 8006878:	65b9      	str	r1, [r7, #88]	; 0x58
 800687a:	415b      	adcs	r3, r3
 800687c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800687e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006882:	4621      	mov	r1, r4
 8006884:	eb12 0801 	adds.w	r8, r2, r1
 8006888:	4629      	mov	r1, r5
 800688a:	eb43 0901 	adc.w	r9, r3, r1
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800689a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800689e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068a2:	4690      	mov	r8, r2
 80068a4:	4699      	mov	r9, r3
 80068a6:	4623      	mov	r3, r4
 80068a8:	eb18 0303 	adds.w	r3, r8, r3
 80068ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068b0:	462b      	mov	r3, r5
 80068b2:	eb49 0303 	adc.w	r3, r9, r3
 80068b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068ce:	460b      	mov	r3, r1
 80068d0:	18db      	adds	r3, r3, r3
 80068d2:	653b      	str	r3, [r7, #80]	; 0x50
 80068d4:	4613      	mov	r3, r2
 80068d6:	eb42 0303 	adc.w	r3, r2, r3
 80068da:	657b      	str	r3, [r7, #84]	; 0x54
 80068dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068e4:	f7fa f882 	bl	80009ec <__aeabi_uldivmod>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4b61      	ldr	r3, [pc, #388]	; (8006a74 <UART_SetConfig+0x2d4>)
 80068ee:	fba3 2302 	umull	r2, r3, r3, r2
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	011c      	lsls	r4, r3, #4
 80068f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006900:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006908:	4642      	mov	r2, r8
 800690a:	464b      	mov	r3, r9
 800690c:	1891      	adds	r1, r2, r2
 800690e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006910:	415b      	adcs	r3, r3
 8006912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006918:	4641      	mov	r1, r8
 800691a:	eb12 0a01 	adds.w	sl, r2, r1
 800691e:	4649      	mov	r1, r9
 8006920:	eb43 0b01 	adc.w	fp, r3, r1
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006938:	4692      	mov	sl, r2
 800693a:	469b      	mov	fp, r3
 800693c:	4643      	mov	r3, r8
 800693e:	eb1a 0303 	adds.w	r3, sl, r3
 8006942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006946:	464b      	mov	r3, r9
 8006948:	eb4b 0303 	adc.w	r3, fp, r3
 800694c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800695c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006964:	460b      	mov	r3, r1
 8006966:	18db      	adds	r3, r3, r3
 8006968:	643b      	str	r3, [r7, #64]	; 0x40
 800696a:	4613      	mov	r3, r2
 800696c:	eb42 0303 	adc.w	r3, r2, r3
 8006970:	647b      	str	r3, [r7, #68]	; 0x44
 8006972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800697a:	f7fa f837 	bl	80009ec <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4611      	mov	r1, r2
 8006984:	4b3b      	ldr	r3, [pc, #236]	; (8006a74 <UART_SetConfig+0x2d4>)
 8006986:	fba3 2301 	umull	r2, r3, r3, r1
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	2264      	movs	r2, #100	; 0x64
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	1acb      	subs	r3, r1, r3
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800699a:	4b36      	ldr	r3, [pc, #216]	; (8006a74 <UART_SetConfig+0x2d4>)
 800699c:	fba3 2302 	umull	r2, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069a8:	441c      	add	r4, r3
 80069aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	1891      	adds	r1, r2, r2
 80069c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80069c4:	415b      	adcs	r3, r3
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069cc:	4641      	mov	r1, r8
 80069ce:	1851      	adds	r1, r2, r1
 80069d0:	6339      	str	r1, [r7, #48]	; 0x30
 80069d2:	4649      	mov	r1, r9
 80069d4:	414b      	adcs	r3, r1
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069e4:	4659      	mov	r1, fp
 80069e6:	00cb      	lsls	r3, r1, #3
 80069e8:	4651      	mov	r1, sl
 80069ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ee:	4651      	mov	r1, sl
 80069f0:	00ca      	lsls	r2, r1, #3
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	4642      	mov	r2, r8
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a00:	464b      	mov	r3, r9
 8006a02:	460a      	mov	r2, r1
 8006a04:	eb42 0303 	adc.w	r3, r2, r3
 8006a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a20:	460b      	mov	r3, r1
 8006a22:	18db      	adds	r3, r3, r3
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a26:	4613      	mov	r3, r2
 8006a28:	eb42 0303 	adc.w	r3, r2, r3
 8006a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a36:	f7f9 ffd9 	bl	80009ec <__aeabi_uldivmod>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <UART_SetConfig+0x2d4>)
 8006a40:	fba3 1302 	umull	r1, r3, r3, r2
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	2164      	movs	r1, #100	; 0x64
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	3332      	adds	r3, #50	; 0x32
 8006a52:	4a08      	ldr	r2, [pc, #32]	; (8006a74 <UART_SetConfig+0x2d4>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f003 0207 	and.w	r2, r3, #7
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4422      	add	r2, r4
 8006a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a68:	e106      	b.n	8006c78 <UART_SetConfig+0x4d8>
 8006a6a:	bf00      	nop
 8006a6c:	40011000 	.word	0x40011000
 8006a70:	40011400 	.word	0x40011400
 8006a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	1891      	adds	r1, r2, r2
 8006a90:	6239      	str	r1, [r7, #32]
 8006a92:	415b      	adcs	r3, r3
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
 8006a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	1854      	adds	r4, r2, r1
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	eb43 0501 	adc.w	r5, r3, r1
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	00eb      	lsls	r3, r5, #3
 8006aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ab2:	00e2      	lsls	r2, r4, #3
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	4643      	mov	r3, r8
 8006aba:	18e3      	adds	r3, r4, r3
 8006abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	eb45 0303 	adc.w	r3, r5, r3
 8006ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	008b      	lsls	r3, r1, #2
 8006aea:	4621      	mov	r1, r4
 8006aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006af0:	4621      	mov	r1, r4
 8006af2:	008a      	lsls	r2, r1, #2
 8006af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006af8:	f7f9 ff78 	bl	80009ec <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4b60      	ldr	r3, [pc, #384]	; (8006c84 <UART_SetConfig+0x4e4>)
 8006b02:	fba3 2302 	umull	r2, r3, r3, r2
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	011c      	lsls	r4, r3, #4
 8006b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	464b      	mov	r3, r9
 8006b20:	1891      	adds	r1, r2, r2
 8006b22:	61b9      	str	r1, [r7, #24]
 8006b24:	415b      	adcs	r3, r3
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	1851      	adds	r1, r2, r1
 8006b30:	6139      	str	r1, [r7, #16]
 8006b32:	4649      	mov	r1, r9
 8006b34:	414b      	adcs	r3, r1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b44:	4659      	mov	r1, fp
 8006b46:	00cb      	lsls	r3, r1, #3
 8006b48:	4651      	mov	r1, sl
 8006b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4e:	4651      	mov	r1, sl
 8006b50:	00ca      	lsls	r2, r1, #3
 8006b52:	4610      	mov	r0, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	4642      	mov	r2, r8
 8006b5a:	189b      	adds	r3, r3, r2
 8006b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b60:	464b      	mov	r3, r9
 8006b62:	460a      	mov	r2, r1
 8006b64:	eb42 0303 	adc.w	r3, r2, r3
 8006b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b84:	4649      	mov	r1, r9
 8006b86:	008b      	lsls	r3, r1, #2
 8006b88:	4641      	mov	r1, r8
 8006b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8e:	4641      	mov	r1, r8
 8006b90:	008a      	lsls	r2, r1, #2
 8006b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b96:	f7f9 ff29 	bl	80009ec <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4b38      	ldr	r3, [pc, #224]	; (8006c84 <UART_SetConfig+0x4e4>)
 8006ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	2264      	movs	r2, #100	; 0x64
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	1acb      	subs	r3, r1, r3
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	3332      	adds	r3, #50	; 0x32
 8006bb4:	4a33      	ldr	r2, [pc, #204]	; (8006c84 <UART_SetConfig+0x4e4>)
 8006bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc0:	441c      	add	r4, r3
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	673b      	str	r3, [r7, #112]	; 0x70
 8006bca:	677a      	str	r2, [r7, #116]	; 0x74
 8006bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	1891      	adds	r1, r2, r2
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	415b      	adcs	r3, r3
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006be0:	4641      	mov	r1, r8
 8006be2:	1851      	adds	r1, r2, r1
 8006be4:	6039      	str	r1, [r7, #0]
 8006be6:	4649      	mov	r1, r9
 8006be8:	414b      	adcs	r3, r1
 8006bea:	607b      	str	r3, [r7, #4]
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	00cb      	lsls	r3, r1, #3
 8006bfc:	4651      	mov	r1, sl
 8006bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c02:	4651      	mov	r1, sl
 8006c04:	00ca      	lsls	r2, r1, #3
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c12:	464b      	mov	r3, r9
 8006c14:	460a      	mov	r2, r1
 8006c16:	eb42 0303 	adc.w	r3, r2, r3
 8006c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	663b      	str	r3, [r7, #96]	; 0x60
 8006c26:	667a      	str	r2, [r7, #100]	; 0x64
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c34:	4649      	mov	r1, r9
 8006c36:	008b      	lsls	r3, r1, #2
 8006c38:	4641      	mov	r1, r8
 8006c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3e:	4641      	mov	r1, r8
 8006c40:	008a      	lsls	r2, r1, #2
 8006c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c46:	f7f9 fed1 	bl	80009ec <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <UART_SetConfig+0x4e4>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	; 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	3332      	adds	r3, #50	; 0x32
 8006c62:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <UART_SetConfig+0x4e4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 020f 	and.w	r2, r3, #15
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4422      	add	r2, r4
 8006c76:	609a      	str	r2, [r3, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c84:	51eb851f 	.word	0x51eb851f

08006c88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c9a:	2b84      	cmp	r3, #132	; 0x84
 8006c9c:	d005      	beq.n	8006caa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3303      	adds	r3, #3
 8006ca8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006caa:	68fb      	ldr	r3, [r7, #12]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006cbc:	f000 fec4 	bl	8007a48 <vTaskStartScheduler>
  
  return osOK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc8:	b089      	sub	sp, #36	; 0x24
 8006cca:	af04      	add	r7, sp, #16
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d020      	beq.n	8006d1a <osThreadCreate+0x54>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01c      	beq.n	8006d1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685c      	ldr	r4, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691e      	ldr	r6, [r3, #16]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff ffc8 	bl	8006c88 <makeFreeRtosPriority>
 8006cf8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d02:	9202      	str	r2, [sp, #8]
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	9100      	str	r1, [sp, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 fcbc 	bl	800768c <xTaskCreateStatic>
 8006d14:	4603      	mov	r3, r0
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	e01c      	b.n	8006d54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685c      	ldr	r4, [r3, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d26:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff ffaa 	bl	8006c88 <makeFreeRtosPriority>
 8006d34:	4602      	mov	r2, r0
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	9200      	str	r2, [sp, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	4632      	mov	r2, r6
 8006d42:	4629      	mov	r1, r5
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fcfe 	bl	8007746 <xTaskCreate>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d001      	beq.n	8006d54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e000      	b.n	8006d56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d54:	68fb      	ldr	r3, [r7, #12]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <osDelay+0x16>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	e000      	b.n	8006d76 <osDelay+0x18>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fe32 	bl	80079e0 <vTaskDelay>
  
  return osOK;
 8006d7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f103 0208 	add.w	r2, r3, #8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f103 0208 	add.w	r2, r3, #8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f103 0208 	add.w	r2, r3, #8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	601a      	str	r2, [r3, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3e:	d103      	bne.n	8006e48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e00c      	b.n	8006e62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	e002      	b.n	8006e56 <vListInsert+0x2e>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d2f6      	bcs.n	8006e50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
}
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6892      	ldr	r2, [r2, #8]
 8006eb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6852      	ldr	r2, [r2, #4]
 8006eba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d103      	bne.n	8006ece <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	1e5a      	subs	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
	...

08006ef0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f1a:	f001 fcf3 	bl	8008904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	441a      	add	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	68f9      	ldr	r1, [r7, #12]
 8006f4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	441a      	add	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	22ff      	movs	r2, #255	; 0xff
 8006f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	22ff      	movs	r2, #255	; 0xff
 8006f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d114      	bne.n	8006f9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01a      	beq.n	8006fae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3310      	adds	r3, #16
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 ffb5 	bl	8007eec <xTaskRemoveFromEventList>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f88:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <xQueueGenericReset+0xcc>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	e009      	b.n	8006fae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3310      	adds	r3, #16
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fef1 	bl	8006d86 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3324      	adds	r3, #36	; 0x24
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff feec 	bl	8006d86 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fae:	f001 fcd9 	bl	8008964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fb2:	2301      	movs	r3, #1
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	; 0x28
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <xQueueGenericCreate+0x2a>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	613b      	str	r3, [r7, #16]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	3348      	adds	r3, #72	; 0x48
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 fd65 	bl	8008ac8 <pvPortMalloc>
 8006ffe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d011      	beq.n	800702a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	3348      	adds	r3, #72	; 0x48
 800700e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007018:	79fa      	ldrb	r2, [r7, #7]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4613      	mov	r3, r2
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f805 	bl	8007034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800702a:	69bb      	ldr	r3, [r7, #24]
	}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e002      	b.n	8007056 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007062:	2101      	movs	r1, #1
 8007064:	69b8      	ldr	r0, [r7, #24]
 8007066:	f7ff ff43 	bl	8006ef0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08e      	sub	sp, #56	; 0x38
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007082:	2300      	movs	r3, #0
 8007084:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <xQueueGenericSend+0x32>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d103      	bne.n	80070b4 <xQueueGenericSend+0x40>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <xQueueGenericSend+0x44>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <xQueueGenericSend+0x46>
 80070b8:	2300      	movs	r3, #0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <xQueueGenericSend+0x60>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d103      	bne.n	80070e2 <xQueueGenericSend+0x6e>
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <xQueueGenericSend+0x72>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <xQueueGenericSend+0x74>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xQueueGenericSend+0x8e>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	623b      	str	r3, [r7, #32]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007102:	f001 f8b3 	bl	800826c <xTaskGetSchedulerState>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <xQueueGenericSend+0x9e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <xQueueGenericSend+0xa2>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <xQueueGenericSend+0xa4>
 8007116:	2300      	movs	r3, #0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <xQueueGenericSend+0xbe>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	61fb      	str	r3, [r7, #28]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007132:	f001 fbe7 	bl	8008904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713e:	429a      	cmp	r2, r3
 8007140:	d302      	bcc.n	8007148 <xQueueGenericSend+0xd4>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d129      	bne.n	800719c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800714e:	f000 f9b3 	bl	80074b8 <prvCopyDataToQueue>
 8007152:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	d010      	beq.n	800717e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	3324      	adds	r3, #36	; 0x24
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fec3 	bl	8007eec <xTaskRemoveFromEventList>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d013      	beq.n	8007194 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800716c:	4b3f      	ldr	r3, [pc, #252]	; (800726c <xQueueGenericSend+0x1f8>)
 800716e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	e00a      	b.n	8007194 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007184:	4b39      	ldr	r3, [pc, #228]	; (800726c <xQueueGenericSend+0x1f8>)
 8007186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007194:	f001 fbe6 	bl	8008964 <vPortExitCritical>
				return pdPASS;
 8007198:	2301      	movs	r3, #1
 800719a:	e063      	b.n	8007264 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071a2:	f001 fbdf 	bl	8008964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e05c      	b.n	8007264 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fefb 	bl	8007fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071be:	f001 fbd1 	bl	8008964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071c2:	f000 fcab 	bl	8007b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071c6:	f001 fb9d 	bl	8008904 <vPortEnterCritical>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071d0:	b25b      	sxtb	r3, r3
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d103      	bne.n	80071e0 <xQueueGenericSend+0x16c>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d103      	bne.n	80071f6 <xQueueGenericSend+0x182>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f6:	f001 fbb5 	bl	8008964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071fa:	1d3a      	adds	r2, r7, #4
 80071fc:	f107 0314 	add.w	r3, r7, #20
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f000 feea 	bl	8007fdc <xTaskCheckForTimeOut>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d124      	bne.n	8007258 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800720e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007210:	f000 fa24 	bl	800765c <prvIsQueueFull>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d018      	beq.n	800724c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	3310      	adds	r3, #16
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4611      	mov	r1, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fe3e 	bl	8007ea4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722a:	f000 f9af 	bl	800758c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800722e:	f000 fc83 	bl	8007b38 <xTaskResumeAll>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	f47f af7c 	bne.w	8007132 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <xQueueGenericSend+0x1f8>)
 800723c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	e772      	b.n	8007132 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800724c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800724e:	f000 f99d 	bl	800758c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007252:	f000 fc71 	bl	8007b38 <xTaskResumeAll>
 8007256:	e76c      	b.n	8007132 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725a:	f000 f997 	bl	800758c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800725e:	f000 fc6b 	bl	8007b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007262:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007264:	4618      	mov	r0, r3
 8007266:	3738      	adds	r7, #56	; 0x38
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	e000ed04 	.word	0xe000ed04

08007270 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08e      	sub	sp, #56	; 0x38
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007282:	2300      	movs	r3, #0
 8007284:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	623b      	str	r3, [r7, #32]
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	61fb      	str	r3, [r7, #28]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072c0:	f000 ffd4 	bl	800826c <xTaskGetSchedulerState>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <xQueueSemaphoreTake+0x60>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <xQueueSemaphoreTake+0x64>
 80072d0:	2301      	movs	r3, #1
 80072d2:	e000      	b.n	80072d6 <xQueueSemaphoreTake+0x66>
 80072d4:	2300      	movs	r3, #0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10a      	bne.n	80072f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	61bb      	str	r3, [r7, #24]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072f0:	f001 fb08 	bl	8008904 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d024      	beq.n	800734a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	1e5a      	subs	r2, r3, #1
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007310:	f001 f954 	bl	80085bc <pvTaskIncrementMutexHeldCount>
 8007314:	4602      	mov	r2, r0
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00f      	beq.n	8007342 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	3310      	adds	r3, #16
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fde0 	bl	8007eec <xTaskRemoveFromEventList>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007332:	4b54      	ldr	r3, [pc, #336]	; (8007484 <xQueueSemaphoreTake+0x214>)
 8007334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007342:	f001 fb0f 	bl	8008964 <vPortExitCritical>
				return pdPASS;
 8007346:	2301      	movs	r3, #1
 8007348:	e097      	b.n	800747a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d111      	bne.n	8007374 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	617b      	str	r3, [r7, #20]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800736c:	f001 fafa 	bl	8008964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007370:	2300      	movs	r3, #0
 8007372:	e082      	b.n	800747a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800737a:	f107 030c 	add.w	r3, r7, #12
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fe16 	bl	8007fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007384:	2301      	movs	r3, #1
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007388:	f001 faec 	bl	8008964 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800738c:	f000 fbc6 	bl	8007b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007390:	f001 fab8 	bl	8008904 <vPortEnterCritical>
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800739a:	b25b      	sxtb	r3, r3
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d103      	bne.n	80073aa <xQueueSemaphoreTake+0x13a>
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073b0:	b25b      	sxtb	r3, r3
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d103      	bne.n	80073c0 <xQueueSemaphoreTake+0x150>
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c0:	f001 fad0 	bl	8008964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073c4:	463a      	mov	r2, r7
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4611      	mov	r1, r2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fe05 	bl	8007fdc <xTaskCheckForTimeOut>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d132      	bne.n	800743e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073da:	f000 f929 	bl	8007630 <prvIsQueueEmpty>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d026      	beq.n	8007432 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d109      	bne.n	8007400 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80073ec:	f001 fa8a 	bl	8008904 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 ff57 	bl	80082a8 <xTaskPriorityInherit>
 80073fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80073fc:	f001 fab2 	bl	8008964 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	3324      	adds	r3, #36	; 0x24
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fd4b 	bl	8007ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800740e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007410:	f000 f8bc 	bl	800758c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007414:	f000 fb90 	bl	8007b38 <xTaskResumeAll>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	f47f af68 	bne.w	80072f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007420:	4b18      	ldr	r3, [pc, #96]	; (8007484 <xQueueSemaphoreTake+0x214>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	e75e      	b.n	80072f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007434:	f000 f8aa 	bl	800758c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007438:	f000 fb7e 	bl	8007b38 <xTaskResumeAll>
 800743c:	e758      	b.n	80072f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800743e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007440:	f000 f8a4 	bl	800758c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007444:	f000 fb78 	bl	8007b38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800744a:	f000 f8f1 	bl	8007630 <prvIsQueueEmpty>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	f43f af4d 	beq.w	80072f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800745c:	f001 fa52 	bl	8008904 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007462:	f000 f811 	bl	8007488 <prvGetDisinheritPriorityAfterTimeout>
 8007466:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800746e:	4618      	mov	r0, r3
 8007470:	f001 f816 	bl	80084a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007474:	f001 fa76 	bl	8008964 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007478:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800747a:	4618      	mov	r0, r3
 800747c:	3738      	adds	r7, #56	; 0x38
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	e000ed04 	.word	0xe000ed04

08007488 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d006      	beq.n	80074a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1c3 0310 	rsb	r3, r3, #16
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e001      	b.n	80074aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074aa:	68fb      	ldr	r3, [r7, #12]
	}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10d      	bne.n	80074f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d14d      	bne.n	800757a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 ff56 	bl	8008394 <xTaskPriorityDisinherit>
 80074e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	e043      	b.n	800757a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d119      	bne.n	800752c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6858      	ldr	r0, [r3, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	461a      	mov	r2, r3
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	f001 fbc2 	bl	8008c8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	441a      	add	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	429a      	cmp	r2, r3
 8007520:	d32b      	bcc.n	800757a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	e026      	b.n	800757a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	68d8      	ldr	r0, [r3, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	461a      	mov	r2, r3
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	f001 fba8 	bl	8008c8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	425b      	negs	r3, r3
 8007546:	441a      	add	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d207      	bcs.n	8007568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	425b      	negs	r3, r3
 8007562:	441a      	add	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d105      	bne.n	800757a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3b01      	subs	r3, #1
 8007578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007582:	697b      	ldr	r3, [r7, #20]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007594:	f001 f9b6 	bl	8008904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075a0:	e011      	b.n	80075c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d012      	beq.n	80075d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3324      	adds	r3, #36	; 0x24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fc9c 	bl	8007eec <xTaskRemoveFromEventList>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075ba:	f000 fd71 	bl	80080a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	dce9      	bgt.n	80075a2 <prvUnlockQueue+0x16>
 80075ce:	e000      	b.n	80075d2 <prvUnlockQueue+0x46>
					break;
 80075d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	22ff      	movs	r2, #255	; 0xff
 80075d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80075da:	f001 f9c3 	bl	8008964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075de:	f001 f991 	bl	8008904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075ea:	e011      	b.n	8007610 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d012      	beq.n	800761a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3310      	adds	r3, #16
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fc77 	bl	8007eec <xTaskRemoveFromEventList>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007604:	f000 fd4c 	bl	80080a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	3b01      	subs	r3, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	dce9      	bgt.n	80075ec <prvUnlockQueue+0x60>
 8007618:	e000      	b.n	800761c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800761a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	22ff      	movs	r2, #255	; 0xff
 8007620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007624:	f001 f99e 	bl	8008964 <vPortExitCritical>
}
 8007628:	bf00      	nop
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007638:	f001 f964 	bl	8008904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d102      	bne.n	800764a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007644:	2301      	movs	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	e001      	b.n	800764e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800764e:	f001 f989 	bl	8008964 <vPortExitCritical>

	return xReturn;
 8007652:	68fb      	ldr	r3, [r7, #12]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007664:	f001 f94e 	bl	8008904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007670:	429a      	cmp	r2, r3
 8007672:	d102      	bne.n	800767a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007674:	2301      	movs	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	e001      	b.n	800767e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800767e:	f001 f971 	bl	8008964 <vPortExitCritical>

	return xReturn;
 8007682:	68fb      	ldr	r3, [r7, #12]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08e      	sub	sp, #56	; 0x38
 8007690:	af04      	add	r7, sp, #16
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	623b      	str	r3, [r7, #32]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	61fb      	str	r3, [r7, #28]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076d2:	23a0      	movs	r3, #160	; 0xa0
 80076d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2ba0      	cmp	r3, #160	; 0xa0
 80076da:	d00a      	beq.n	80076f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	61bb      	str	r3, [r7, #24]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01e      	beq.n	8007738 <xTaskCreateStatic+0xac>
 80076fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01b      	beq.n	8007738 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007708:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	2202      	movs	r2, #2
 800770e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007712:	2300      	movs	r3, #0
 8007714:	9303      	str	r3, [sp, #12]
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	9302      	str	r3, [sp, #8]
 800771a:	f107 0314 	add.w	r3, r7, #20
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f850 	bl	80077d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007732:	f000 f8eb 	bl	800790c <prvAddNewTaskToReadyList>
 8007736:	e001      	b.n	800773c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007738:	2300      	movs	r3, #0
 800773a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800773c:	697b      	ldr	r3, [r7, #20]
	}
 800773e:	4618      	mov	r0, r3
 8007740:	3728      	adds	r7, #40	; 0x28
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007746:	b580      	push	{r7, lr}
 8007748:	b08c      	sub	sp, #48	; 0x30
 800774a:	af04      	add	r7, sp, #16
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4618      	mov	r0, r3
 800775c:	f001 f9b4 	bl	8008ac8 <pvPortMalloc>
 8007760:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00e      	beq.n	8007786 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007768:	20a0      	movs	r0, #160	; 0xa0
 800776a:	f001 f9ad 	bl	8008ac8 <pvPortMalloc>
 800776e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	631a      	str	r2, [r3, #48]	; 0x30
 800777c:	e005      	b.n	800778a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800777e:	6978      	ldr	r0, [r7, #20]
 8007780:	f001 f9e8 	bl	8008b54 <vPortFree>
 8007784:	e001      	b.n	800778a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d017      	beq.n	80077c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007798:	88fa      	ldrh	r2, [r7, #6]
 800779a:	2300      	movs	r3, #0
 800779c:	9303      	str	r3, [sp, #12]
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	9302      	str	r3, [sp, #8]
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f80e 	bl	80077d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077b4:	69f8      	ldr	r0, [r7, #28]
 80077b6:	f000 f8a9 	bl	800790c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077ba:	2301      	movs	r3, #1
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e002      	b.n	80077c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077c0:	f04f 33ff 	mov.w	r3, #4294967295
 80077c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077c6:	69bb      	ldr	r3, [r7, #24]
	}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077e8:	3b01      	subs	r3, #1
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f023 0307 	bic.w	r3, r3, #7
 80077f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	617b      	str	r3, [r7, #20]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01f      	beq.n	800785e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800781e:	2300      	movs	r3, #0
 8007820:	61fb      	str	r3, [r7, #28]
 8007822:	e012      	b.n	800784a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4413      	add	r3, r2
 800782a:	7819      	ldrb	r1, [r3, #0]
 800782c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	3334      	adds	r3, #52	; 0x34
 8007834:	460a      	mov	r2, r1
 8007836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d006      	beq.n	8007852 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	2b0f      	cmp	r3, #15
 800784e:	d9e9      	bls.n	8007824 <prvInitialiseNewTask+0x54>
 8007850:	e000      	b.n	8007854 <prvInitialiseNewTask+0x84>
			{
				break;
 8007852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800785c:	e003      	b.n	8007866 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	2b0f      	cmp	r3, #15
 800786a:	d901      	bls.n	8007870 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800786c:	230f      	movs	r3, #15
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800787a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	2200      	movs	r2, #0
 8007880:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	3304      	adds	r3, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff fa9d 	bl	8006dc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	3318      	adds	r3, #24
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fa98 	bl	8006dc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800789a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	f1c3 0210 	rsb	r2, r3, #16
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078be:	334c      	adds	r3, #76	; 0x4c
 80078c0:	224c      	movs	r2, #76	; 0x4c
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 f95d 	bl	8008b84 <memset>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	4a0c      	ldr	r2, [pc, #48]	; (8007900 <prvInitialiseNewTask+0x130>)
 80078ce:	651a      	str	r2, [r3, #80]	; 0x50
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	4a0c      	ldr	r2, [pc, #48]	; (8007904 <prvInitialiseNewTask+0x134>)
 80078d4:	655a      	str	r2, [r3, #84]	; 0x54
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	4a0b      	ldr	r2, [pc, #44]	; (8007908 <prvInitialiseNewTask+0x138>)
 80078da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	68f9      	ldr	r1, [r7, #12]
 80078e0:	69b8      	ldr	r0, [r7, #24]
 80078e2:	f000 fee5 	bl	80086b0 <pxPortInitialiseStack>
 80078e6:	4602      	mov	r2, r0
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078f8:	bf00      	nop
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20004440 	.word	0x20004440
 8007904:	200044a8 	.word	0x200044a8
 8007908:	20004510 	.word	0x20004510

0800790c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007914:	f000 fff6 	bl	8008904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007918:	4b2a      	ldr	r3, [pc, #168]	; (80079c4 <prvAddNewTaskToReadyList+0xb8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3301      	adds	r3, #1
 800791e:	4a29      	ldr	r2, [pc, #164]	; (80079c4 <prvAddNewTaskToReadyList+0xb8>)
 8007920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007922:	4b29      	ldr	r3, [pc, #164]	; (80079c8 <prvAddNewTaskToReadyList+0xbc>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800792a:	4a27      	ldr	r2, [pc, #156]	; (80079c8 <prvAddNewTaskToReadyList+0xbc>)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007930:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <prvAddNewTaskToReadyList+0xb8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d110      	bne.n	800795a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007938:	f000 fbd6 	bl	80080e8 <prvInitialiseTaskLists>
 800793c:	e00d      	b.n	800795a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800793e:	4b23      	ldr	r3, [pc, #140]	; (80079cc <prvAddNewTaskToReadyList+0xc0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007946:	4b20      	ldr	r3, [pc, #128]	; (80079c8 <prvAddNewTaskToReadyList+0xbc>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d802      	bhi.n	800795a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007954:	4a1c      	ldr	r2, [pc, #112]	; (80079c8 <prvAddNewTaskToReadyList+0xbc>)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800795a:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <prvAddNewTaskToReadyList+0xc4>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <prvAddNewTaskToReadyList+0xc4>)
 8007962:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	2201      	movs	r2, #1
 800796a:	409a      	lsls	r2, r3
 800796c:	4b19      	ldr	r3, [pc, #100]	; (80079d4 <prvAddNewTaskToReadyList+0xc8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4313      	orrs	r3, r2
 8007972:	4a18      	ldr	r2, [pc, #96]	; (80079d4 <prvAddNewTaskToReadyList+0xc8>)
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <prvAddNewTaskToReadyList+0xcc>)
 8007984:	441a      	add	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3304      	adds	r3, #4
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f7ff fa27 	bl	8006de0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007992:	f000 ffe7 	bl	8008964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007996:	4b0d      	ldr	r3, [pc, #52]	; (80079cc <prvAddNewTaskToReadyList+0xc0>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00e      	beq.n	80079bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800799e:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <prvAddNewTaskToReadyList+0xbc>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d207      	bcs.n	80079bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079ac:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <prvAddNewTaskToReadyList+0xd0>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	20000804 	.word	0x20000804
 80079c8:	20000650 	.word	0x20000650
 80079cc:	20000810 	.word	0x20000810
 80079d0:	20000820 	.word	0x20000820
 80079d4:	2000080c 	.word	0x2000080c
 80079d8:	20000654 	.word	0x20000654
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d017      	beq.n	8007a22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079f2:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <vTaskDelay+0x60>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <vTaskDelay+0x30>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	60bb      	str	r3, [r7, #8]
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a10:	f000 f884 	bl	8007b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a14:	2100      	movs	r1, #0
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fde4 	bl	80085e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a1c:	f000 f88c 	bl	8007b38 <xTaskResumeAll>
 8007a20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d107      	bne.n	8007a38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <vTaskDelay+0x64>)
 8007a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	2000082c 	.word	0x2000082c
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a56:	463a      	mov	r2, r7
 8007a58:	1d39      	adds	r1, r7, #4
 8007a5a:	f107 0308 	add.w	r3, r7, #8
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fa fefe 	bl	8002860 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	9202      	str	r2, [sp, #8]
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	460a      	mov	r2, r1
 8007a76:	4921      	ldr	r1, [pc, #132]	; (8007afc <vTaskStartScheduler+0xb4>)
 8007a78:	4821      	ldr	r0, [pc, #132]	; (8007b00 <vTaskStartScheduler+0xb8>)
 8007a7a:	f7ff fe07 	bl	800768c <xTaskCreateStatic>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <vTaskStartScheduler+0xbc>)
 8007a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a84:	4b1f      	ldr	r3, [pc, #124]	; (8007b04 <vTaskStartScheduler+0xbc>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	e001      	b.n	8007a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d11b      	bne.n	8007ad4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	613b      	str	r3, [r7, #16]
}
 8007aae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ab0:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <vTaskStartScheduler+0xc0>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	334c      	adds	r3, #76	; 0x4c
 8007ab6:	4a15      	ldr	r2, [pc, #84]	; (8007b0c <vTaskStartScheduler+0xc4>)
 8007ab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007aba:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <vTaskStartScheduler+0xc8>)
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ac2:	4b14      	ldr	r3, [pc, #80]	; (8007b14 <vTaskStartScheduler+0xcc>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ac8:	4b13      	ldr	r3, [pc, #76]	; (8007b18 <vTaskStartScheduler+0xd0>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ace:	f000 fe77 	bl	80087c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ad2:	e00e      	b.n	8007af2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d10a      	bne.n	8007af2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	60fb      	str	r3, [r7, #12]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <vTaskStartScheduler+0xa8>
}
 8007af2:	bf00      	nop
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	08008e68 	.word	0x08008e68
 8007b00:	080080b9 	.word	0x080080b9
 8007b04:	20000828 	.word	0x20000828
 8007b08:	20000650 	.word	0x20000650
 8007b0c:	20000064 	.word	0x20000064
 8007b10:	20000824 	.word	0x20000824
 8007b14:	20000810 	.word	0x20000810
 8007b18:	20000808 	.word	0x20000808

08007b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b20:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <vTaskSuspendAll+0x18>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	4a03      	ldr	r2, [pc, #12]	; (8007b34 <vTaskSuspendAll+0x18>)
 8007b28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b2a:	bf00      	nop
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	2000082c 	.word	0x2000082c

08007b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b46:	4b41      	ldr	r3, [pc, #260]	; (8007c4c <xTaskResumeAll+0x114>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	603b      	str	r3, [r7, #0]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b64:	f000 fece 	bl	8008904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b68:	4b38      	ldr	r3, [pc, #224]	; (8007c4c <xTaskResumeAll+0x114>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a37      	ldr	r2, [pc, #220]	; (8007c4c <xTaskResumeAll+0x114>)
 8007b70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b72:	4b36      	ldr	r3, [pc, #216]	; (8007c4c <xTaskResumeAll+0x114>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d161      	bne.n	8007c3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b7a:	4b35      	ldr	r3, [pc, #212]	; (8007c50 <xTaskResumeAll+0x118>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d05d      	beq.n	8007c3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b82:	e02e      	b.n	8007be2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b84:	4b33      	ldr	r3, [pc, #204]	; (8007c54 <xTaskResumeAll+0x11c>)
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3318      	adds	r3, #24
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff f982 	bl	8006e9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff f97d 	bl	8006e9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	409a      	lsls	r2, r3
 8007ba8:	4b2b      	ldr	r3, [pc, #172]	; (8007c58 <xTaskResumeAll+0x120>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <xTaskResumeAll+0x120>)
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4a27      	ldr	r2, [pc, #156]	; (8007c5c <xTaskResumeAll+0x124>)
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f7ff f909 	bl	8006de0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	4b23      	ldr	r3, [pc, #140]	; (8007c60 <xTaskResumeAll+0x128>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d302      	bcc.n	8007be2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007bdc:	4b21      	ldr	r3, [pc, #132]	; (8007c64 <xTaskResumeAll+0x12c>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007be2:	4b1c      	ldr	r3, [pc, #112]	; (8007c54 <xTaskResumeAll+0x11c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1cc      	bne.n	8007b84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bf0:	f000 fb1c 	bl	800822c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <xTaskResumeAll+0x130>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d010      	beq.n	8007c22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c00:	f000 f836 	bl	8007c70 <xTaskIncrementTick>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <xTaskResumeAll+0x12c>)
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f1      	bne.n	8007c00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007c1c:	4b12      	ldr	r3, [pc, #72]	; (8007c68 <xTaskResumeAll+0x130>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c22:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <xTaskResumeAll+0x12c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <xTaskResumeAll+0x134>)
 8007c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c3e:	f000 fe91 	bl	8008964 <vPortExitCritical>

	return xAlreadyYielded;
 8007c42:	68bb      	ldr	r3, [r7, #8]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	2000082c 	.word	0x2000082c
 8007c50:	20000804 	.word	0x20000804
 8007c54:	200007c4 	.word	0x200007c4
 8007c58:	2000080c 	.word	0x2000080c
 8007c5c:	20000654 	.word	0x20000654
 8007c60:	20000650 	.word	0x20000650
 8007c64:	20000818 	.word	0x20000818
 8007c68:	20000814 	.word	0x20000814
 8007c6c:	e000ed04 	.word	0xe000ed04

08007c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c7a:	4b4e      	ldr	r3, [pc, #312]	; (8007db4 <xTaskIncrementTick+0x144>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f040 808e 	bne.w	8007da0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c84:	4b4c      	ldr	r3, [pc, #304]	; (8007db8 <xTaskIncrementTick+0x148>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c8c:	4a4a      	ldr	r2, [pc, #296]	; (8007db8 <xTaskIncrementTick+0x148>)
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d120      	bne.n	8007cda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c98:	4b48      	ldr	r3, [pc, #288]	; (8007dbc <xTaskIncrementTick+0x14c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	603b      	str	r3, [r7, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <xTaskIncrementTick+0x46>
 8007cb8:	4b40      	ldr	r3, [pc, #256]	; (8007dbc <xTaskIncrementTick+0x14c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	4b40      	ldr	r3, [pc, #256]	; (8007dc0 <xTaskIncrementTick+0x150>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a3e      	ldr	r2, [pc, #248]	; (8007dbc <xTaskIncrementTick+0x14c>)
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	4a3e      	ldr	r2, [pc, #248]	; (8007dc0 <xTaskIncrementTick+0x150>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	4b3d      	ldr	r3, [pc, #244]	; (8007dc4 <xTaskIncrementTick+0x154>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	4a3c      	ldr	r2, [pc, #240]	; (8007dc4 <xTaskIncrementTick+0x154>)
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	f000 faa9 	bl	800822c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cda:	4b3b      	ldr	r3, [pc, #236]	; (8007dc8 <xTaskIncrementTick+0x158>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d348      	bcc.n	8007d76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ce4:	4b35      	ldr	r3, [pc, #212]	; (8007dbc <xTaskIncrementTick+0x14c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cee:	4b36      	ldr	r3, [pc, #216]	; (8007dc8 <xTaskIncrementTick+0x158>)
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	601a      	str	r2, [r3, #0]
					break;
 8007cf6:	e03e      	b.n	8007d76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf8:	4b30      	ldr	r3, [pc, #192]	; (8007dbc <xTaskIncrementTick+0x14c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d203      	bcs.n	8007d18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d10:	4a2d      	ldr	r2, [pc, #180]	; (8007dc8 <xTaskIncrementTick+0x158>)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d16:	e02e      	b.n	8007d76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff f8bc 	bl	8006e9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d004      	beq.n	8007d34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff f8b3 	bl	8006e9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	2201      	movs	r2, #1
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	4b23      	ldr	r3, [pc, #140]	; (8007dcc <xTaskIncrementTick+0x15c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	4a22      	ldr	r2, [pc, #136]	; (8007dcc <xTaskIncrementTick+0x15c>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4a1f      	ldr	r2, [pc, #124]	; (8007dd0 <xTaskIncrementTick+0x160>)
 8007d54:	441a      	add	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7ff f83f 	bl	8006de0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	4b1b      	ldr	r3, [pc, #108]	; (8007dd4 <xTaskIncrementTick+0x164>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d3b9      	bcc.n	8007ce4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d74:	e7b6      	b.n	8007ce4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d76:	4b17      	ldr	r3, [pc, #92]	; (8007dd4 <xTaskIncrementTick+0x164>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	4914      	ldr	r1, [pc, #80]	; (8007dd0 <xTaskIncrementTick+0x160>)
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d901      	bls.n	8007d92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d92:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <xTaskIncrementTick+0x168>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	e004      	b.n	8007daa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007da0:	4b0e      	ldr	r3, [pc, #56]	; (8007ddc <xTaskIncrementTick+0x16c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3301      	adds	r3, #1
 8007da6:	4a0d      	ldr	r2, [pc, #52]	; (8007ddc <xTaskIncrementTick+0x16c>)
 8007da8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007daa:	697b      	ldr	r3, [r7, #20]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	2000082c 	.word	0x2000082c
 8007db8:	20000808 	.word	0x20000808
 8007dbc:	200007bc 	.word	0x200007bc
 8007dc0:	200007c0 	.word	0x200007c0
 8007dc4:	2000081c 	.word	0x2000081c
 8007dc8:	20000824 	.word	0x20000824
 8007dcc:	2000080c 	.word	0x2000080c
 8007dd0:	20000654 	.word	0x20000654
 8007dd4:	20000650 	.word	0x20000650
 8007dd8:	20000818 	.word	0x20000818
 8007ddc:	20000814 	.word	0x20000814

08007de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007de6:	4b29      	ldr	r3, [pc, #164]	; (8007e8c <vTaskSwitchContext+0xac>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dee:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <vTaskSwitchContext+0xb0>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007df4:	e044      	b.n	8007e80 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007df6:	4b26      	ldr	r3, [pc, #152]	; (8007e90 <vTaskSwitchContext+0xb0>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfc:	4b25      	ldr	r3, [pc, #148]	; (8007e94 <vTaskSwitchContext+0xb4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	fab3 f383 	clz	r3, r3
 8007e08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e0a:	7afb      	ldrb	r3, [r7, #11]
 8007e0c:	f1c3 031f 	rsb	r3, r3, #31
 8007e10:	617b      	str	r3, [r7, #20]
 8007e12:	4921      	ldr	r1, [pc, #132]	; (8007e98 <vTaskSwitchContext+0xb8>)
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	607b      	str	r3, [r7, #4]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <vTaskSwitchContext+0x5a>
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4a14      	ldr	r2, [pc, #80]	; (8007e98 <vTaskSwitchContext+0xb8>)
 8007e48:	4413      	add	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d104      	bne.n	8007e6c <vTaskSwitchContext+0x8c>
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	605a      	str	r2, [r3, #4]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <vTaskSwitchContext+0xbc>)
 8007e74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e76:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <vTaskSwitchContext+0xbc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	334c      	adds	r3, #76	; 0x4c
 8007e7c:	4a08      	ldr	r2, [pc, #32]	; (8007ea0 <vTaskSwitchContext+0xc0>)
 8007e7e:	6013      	str	r3, [r2, #0]
}
 8007e80:	bf00      	nop
 8007e82:	371c      	adds	r7, #28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	2000082c 	.word	0x2000082c
 8007e90:	20000818 	.word	0x20000818
 8007e94:	2000080c 	.word	0x2000080c
 8007e98:	20000654 	.word	0x20000654
 8007e9c:	20000650 	.word	0x20000650
 8007ea0:	20000064 	.word	0x20000064

08007ea4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	60fb      	str	r3, [r7, #12]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <vTaskPlaceOnEventList+0x44>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3318      	adds	r3, #24
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fe ffa8 	bl	8006e28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ed8:	2101      	movs	r1, #1
 8007eda:	6838      	ldr	r0, [r7, #0]
 8007edc:	f000 fb82 	bl	80085e4 <prvAddCurrentTaskToDelayedList>
}
 8007ee0:	bf00      	nop
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20000650 	.word	0x20000650

08007eec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	60fb      	str	r3, [r7, #12]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	3318      	adds	r3, #24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe ffbc 	bl	8006e9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f22:	4b1d      	ldr	r3, [pc, #116]	; (8007f98 <xTaskRemoveFromEventList+0xac>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d11c      	bne.n	8007f64 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe ffb3 	bl	8006e9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	2201      	movs	r2, #1
 8007f3a:	409a      	lsls	r2, r3
 8007f3c:	4b17      	ldr	r3, [pc, #92]	; (8007f9c <xTaskRemoveFromEventList+0xb0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	4a16      	ldr	r2, [pc, #88]	; (8007f9c <xTaskRemoveFromEventList+0xb0>)
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <xTaskRemoveFromEventList+0xb4>)
 8007f54:	441a      	add	r2, r3
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	f7fe ff3f 	bl	8006de0 <vListInsertEnd>
 8007f62:	e005      	b.n	8007f70 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	3318      	adds	r3, #24
 8007f68:	4619      	mov	r1, r3
 8007f6a:	480e      	ldr	r0, [pc, #56]	; (8007fa4 <xTaskRemoveFromEventList+0xb8>)
 8007f6c:	f7fe ff38 	bl	8006de0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f74:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <xTaskRemoveFromEventList+0xbc>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d905      	bls.n	8007f8a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f82:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <xTaskRemoveFromEventList+0xc0>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	e001      	b.n	8007f8e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f8e:	697b      	ldr	r3, [r7, #20]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	2000082c 	.word	0x2000082c
 8007f9c:	2000080c 	.word	0x2000080c
 8007fa0:	20000654 	.word	0x20000654
 8007fa4:	200007c4 	.word	0x200007c4
 8007fa8:	20000650 	.word	0x20000650
 8007fac:	20000818 	.word	0x20000818

08007fb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fb8:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <vTaskInternalSetTimeOutState+0x24>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <vTaskInternalSetTimeOutState+0x28>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	605a      	str	r2, [r3, #4]
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	2000081c 	.word	0x2000081c
 8007fd8:	20000808 	.word	0x20000808

08007fdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	613b      	str	r3, [r7, #16]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	60fb      	str	r3, [r7, #12]
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800801e:	f000 fc71 	bl	8008904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008022:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <xTaskCheckForTimeOut+0xbc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d102      	bne.n	8008042 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	e023      	b.n	800808a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	4b15      	ldr	r3, [pc, #84]	; (800809c <xTaskCheckForTimeOut+0xc0>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d007      	beq.n	800805e <xTaskCheckForTimeOut+0x82>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	429a      	cmp	r2, r3
 8008056:	d302      	bcc.n	800805e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008058:	2301      	movs	r3, #1
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	e015      	b.n	800808a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	429a      	cmp	r2, r3
 8008066:	d20b      	bcs.n	8008080 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ff9b 	bl	8007fb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	e004      	b.n	800808a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008086:	2301      	movs	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800808a:	f000 fc6b 	bl	8008964 <vPortExitCritical>

	return xReturn;
 800808e:	69fb      	ldr	r3, [r7, #28]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3720      	adds	r7, #32
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000808 	.word	0x20000808
 800809c:	2000081c 	.word	0x2000081c

080080a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080a4:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <vTaskMissedYield+0x14>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	601a      	str	r2, [r3, #0]
}
 80080aa:	bf00      	nop
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	20000818 	.word	0x20000818

080080b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080c0:	f000 f852 	bl	8008168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080c4:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <prvIdleTask+0x28>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d9f9      	bls.n	80080c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <prvIdleTask+0x2c>)
 80080ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080dc:	e7f0      	b.n	80080c0 <prvIdleTask+0x8>
 80080de:	bf00      	nop
 80080e0:	20000654 	.word	0x20000654
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080ee:	2300      	movs	r3, #0
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	e00c      	b.n	800810e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a12      	ldr	r2, [pc, #72]	; (8008148 <prvInitialiseTaskLists+0x60>)
 8008100:	4413      	add	r3, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fe3f 	bl	8006d86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3301      	adds	r3, #1
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b0f      	cmp	r3, #15
 8008112:	d9ef      	bls.n	80080f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008114:	480d      	ldr	r0, [pc, #52]	; (800814c <prvInitialiseTaskLists+0x64>)
 8008116:	f7fe fe36 	bl	8006d86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800811a:	480d      	ldr	r0, [pc, #52]	; (8008150 <prvInitialiseTaskLists+0x68>)
 800811c:	f7fe fe33 	bl	8006d86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008120:	480c      	ldr	r0, [pc, #48]	; (8008154 <prvInitialiseTaskLists+0x6c>)
 8008122:	f7fe fe30 	bl	8006d86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008126:	480c      	ldr	r0, [pc, #48]	; (8008158 <prvInitialiseTaskLists+0x70>)
 8008128:	f7fe fe2d 	bl	8006d86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800812c:	480b      	ldr	r0, [pc, #44]	; (800815c <prvInitialiseTaskLists+0x74>)
 800812e:	f7fe fe2a 	bl	8006d86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <prvInitialiseTaskLists+0x78>)
 8008134:	4a05      	ldr	r2, [pc, #20]	; (800814c <prvInitialiseTaskLists+0x64>)
 8008136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008138:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <prvInitialiseTaskLists+0x7c>)
 800813a:	4a05      	ldr	r2, [pc, #20]	; (8008150 <prvInitialiseTaskLists+0x68>)
 800813c:	601a      	str	r2, [r3, #0]
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20000654 	.word	0x20000654
 800814c:	20000794 	.word	0x20000794
 8008150:	200007a8 	.word	0x200007a8
 8008154:	200007c4 	.word	0x200007c4
 8008158:	200007d8 	.word	0x200007d8
 800815c:	200007f0 	.word	0x200007f0
 8008160:	200007bc 	.word	0x200007bc
 8008164:	200007c0 	.word	0x200007c0

08008168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800816e:	e019      	b.n	80081a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008170:	f000 fbc8 	bl	8008904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008174:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <prvCheckTasksWaitingTermination+0x50>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3304      	adds	r3, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fe8a 	bl	8006e9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008186:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <prvCheckTasksWaitingTermination+0x54>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3b01      	subs	r3, #1
 800818c:	4a0b      	ldr	r2, [pc, #44]	; (80081bc <prvCheckTasksWaitingTermination+0x54>)
 800818e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <prvCheckTasksWaitingTermination+0x58>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3b01      	subs	r3, #1
 8008196:	4a0a      	ldr	r2, [pc, #40]	; (80081c0 <prvCheckTasksWaitingTermination+0x58>)
 8008198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800819a:	f000 fbe3 	bl	8008964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f810 	bl	80081c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081a4:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <prvCheckTasksWaitingTermination+0x58>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e1      	bne.n	8008170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200007d8 	.word	0x200007d8
 80081bc:	20000804 	.word	0x20000804
 80081c0:	200007ec 	.word	0x200007ec

080081c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	334c      	adds	r3, #76	; 0x4c
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fcdf 	bl	8008b94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d108      	bne.n	80081f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fcb5 	bl	8008b54 <vPortFree>
				vPortFree( pxTCB );
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fcb2 	bl	8008b54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081f0:	e018      	b.n	8008224 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d103      	bne.n	8008204 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fca9 	bl	8008b54 <vPortFree>
	}
 8008202:	e00f      	b.n	8008224 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800820a:	2b02      	cmp	r3, #2
 800820c:	d00a      	beq.n	8008224 <prvDeleteTCB+0x60>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60fb      	str	r3, [r7, #12]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <prvDeleteTCB+0x5e>
	}
 8008224:	bf00      	nop
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008232:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <prvResetNextTaskUnblockTime+0x38>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d104      	bne.n	8008246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <prvResetNextTaskUnblockTime+0x3c>)
 800823e:	f04f 32ff 	mov.w	r2, #4294967295
 8008242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008244:	e008      	b.n	8008258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008246:	4b07      	ldr	r3, [pc, #28]	; (8008264 <prvResetNextTaskUnblockTime+0x38>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	4a04      	ldr	r2, [pc, #16]	; (8008268 <prvResetNextTaskUnblockTime+0x3c>)
 8008256:	6013      	str	r3, [r2, #0]
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	200007bc 	.word	0x200007bc
 8008268:	20000824 	.word	0x20000824

0800826c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008272:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <xTaskGetSchedulerState+0x34>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d102      	bne.n	8008280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800827a:	2301      	movs	r3, #1
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	e008      	b.n	8008292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008280:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <xTaskGetSchedulerState+0x38>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d102      	bne.n	800828e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008288:	2302      	movs	r3, #2
 800828a:	607b      	str	r3, [r7, #4]
 800828c:	e001      	b.n	8008292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800828e:	2300      	movs	r3, #0
 8008290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008292:	687b      	ldr	r3, [r7, #4]
	}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20000810 	.word	0x20000810
 80082a4:	2000082c 	.word	0x2000082c

080082a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d05e      	beq.n	800837c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	4b31      	ldr	r3, [pc, #196]	; (8008388 <xTaskPriorityInherit+0xe0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d24e      	bcs.n	800836a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	db06      	blt.n	80082e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d4:	4b2c      	ldr	r3, [pc, #176]	; (8008388 <xTaskPriorityInherit+0xe0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	f1c3 0210 	rsb	r2, r3, #16
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6959      	ldr	r1, [r3, #20]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a26      	ldr	r2, [pc, #152]	; (800838c <xTaskPriorityInherit+0xe4>)
 80082f4:	4413      	add	r3, r2
 80082f6:	4299      	cmp	r1, r3
 80082f8:	d12f      	bne.n	800835a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fdcb 	bl	8006e9a <uxListRemove>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	2201      	movs	r2, #1
 8008310:	fa02 f303 	lsl.w	r3, r2, r3
 8008314:	43da      	mvns	r2, r3
 8008316:	4b1e      	ldr	r3, [pc, #120]	; (8008390 <xTaskPriorityInherit+0xe8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4013      	ands	r3, r2
 800831c:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <xTaskPriorityInherit+0xe8>)
 800831e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008320:	4b19      	ldr	r3, [pc, #100]	; (8008388 <xTaskPriorityInherit+0xe0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	2201      	movs	r2, #1
 8008330:	409a      	lsls	r2, r3
 8008332:	4b17      	ldr	r3, [pc, #92]	; (8008390 <xTaskPriorityInherit+0xe8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4313      	orrs	r3, r2
 8008338:	4a15      	ldr	r2, [pc, #84]	; (8008390 <xTaskPriorityInherit+0xe8>)
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4a10      	ldr	r2, [pc, #64]	; (800838c <xTaskPriorityInherit+0xe4>)
 800834a:	441a      	add	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f7fe fd44 	bl	8006de0 <vListInsertEnd>
 8008358:	e004      	b.n	8008364 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800835a:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <xTaskPriorityInherit+0xe0>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	e008      	b.n	800837c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800836e:	4b06      	ldr	r3, [pc, #24]	; (8008388 <xTaskPriorityInherit+0xe0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	429a      	cmp	r2, r3
 8008376:	d201      	bcs.n	800837c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800837c:	68fb      	ldr	r3, [r7, #12]
	}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000650 	.word	0x20000650
 800838c:	20000654 	.word	0x20000654
 8008390:	2000080c 	.word	0x2000080c

08008394 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d06e      	beq.n	8008488 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083aa:	4b3a      	ldr	r3, [pc, #232]	; (8008494 <xTaskPriorityDisinherit+0x100>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d00a      	beq.n	80083ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	60fb      	str	r3, [r7, #12]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10a      	bne.n	80083e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	60bb      	str	r3, [r7, #8]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ec:	1e5a      	subs	r2, r3, #1
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d044      	beq.n	8008488 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008402:	2b00      	cmp	r3, #0
 8008404:	d140      	bne.n	8008488 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	3304      	adds	r3, #4
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fd45 	bl	8006e9a <uxListRemove>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d115      	bne.n	8008442 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841a:	491f      	ldr	r1, [pc, #124]	; (8008498 <xTaskPriorityDisinherit+0x104>)
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <xTaskPriorityDisinherit+0xae>
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	2201      	movs	r2, #1
 8008432:	fa02 f303 	lsl.w	r3, r2, r3
 8008436:	43da      	mvns	r2, r3
 8008438:	4b18      	ldr	r3, [pc, #96]	; (800849c <xTaskPriorityDisinherit+0x108>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4013      	ands	r3, r2
 800843e:	4a17      	ldr	r2, [pc, #92]	; (800849c <xTaskPriorityDisinherit+0x108>)
 8008440:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	f1c3 0210 	rsb	r2, r3, #16
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	2201      	movs	r2, #1
 800845c:	409a      	lsls	r2, r3
 800845e:	4b0f      	ldr	r3, [pc, #60]	; (800849c <xTaskPriorityDisinherit+0x108>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4313      	orrs	r3, r2
 8008464:	4a0d      	ldr	r2, [pc, #52]	; (800849c <xTaskPriorityDisinherit+0x108>)
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4a08      	ldr	r2, [pc, #32]	; (8008498 <xTaskPriorityDisinherit+0x104>)
 8008476:	441a      	add	r2, r3
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	3304      	adds	r3, #4
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f7fe fcae 	bl	8006de0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008488:	697b      	ldr	r3, [r7, #20]
	}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000650 	.word	0x20000650
 8008498:	20000654 	.word	0x20000654
 800849c:	2000080c 	.word	0x2000080c

080084a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80084ae:	2301      	movs	r3, #1
 80084b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d077      	beq.n	80085a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d902      	bls.n	80084e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	e002      	b.n	80084ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d058      	beq.n	80085a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d153      	bne.n	80085a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008500:	4b2b      	ldr	r3, [pc, #172]	; (80085b0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	429a      	cmp	r2, r3
 8008508:	d10a      	bne.n	8008520 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	60bb      	str	r3, [r7, #8]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	db04      	blt.n	800853e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f1c3 0210 	rsb	r2, r3, #16
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	6959      	ldr	r1, [r3, #20]
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4a19      	ldr	r2, [pc, #100]	; (80085b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800854e:	4413      	add	r3, r2
 8008550:	4299      	cmp	r1, r3
 8008552:	d129      	bne.n	80085a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	3304      	adds	r3, #4
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fc9e 	bl	8006e9a <uxListRemove>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	2201      	movs	r2, #1
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	43da      	mvns	r2, r3
 8008570:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4013      	ands	r3, r2
 8008576:	4a10      	ldr	r2, [pc, #64]	; (80085b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008578:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857e:	2201      	movs	r2, #1
 8008580:	409a      	lsls	r2, r3
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4313      	orrs	r3, r2
 8008588:	4a0b      	ldr	r2, [pc, #44]	; (80085b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4a06      	ldr	r2, [pc, #24]	; (80085b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800859a:	441a      	add	r2, r3
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	3304      	adds	r3, #4
 80085a0:	4619      	mov	r1, r3
 80085a2:	4610      	mov	r0, r2
 80085a4:	f7fe fc1c 	bl	8006de0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085a8:	bf00      	nop
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20000650 	.word	0x20000650
 80085b4:	20000654 	.word	0x20000654
 80085b8:	2000080c 	.word	0x2000080c

080085bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085ce:	3201      	adds	r2, #1
 80085d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80085d2:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085d4:	681b      	ldr	r3, [r3, #0]
	}
 80085d6:	4618      	mov	r0, r3
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20000650 	.word	0x20000650

080085e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085ee:	4b29      	ldr	r3, [pc, #164]	; (8008694 <prvAddCurrentTaskToDelayedList+0xb0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085f4:	4b28      	ldr	r3, [pc, #160]	; (8008698 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fc4d 	bl	8006e9a <uxListRemove>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10b      	bne.n	800861e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008606:	4b24      	ldr	r3, [pc, #144]	; (8008698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	2201      	movs	r2, #1
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	43da      	mvns	r2, r3
 8008614:	4b21      	ldr	r3, [pc, #132]	; (800869c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4013      	ands	r3, r2
 800861a:	4a20      	ldr	r2, [pc, #128]	; (800869c <prvAddCurrentTaskToDelayedList+0xb8>)
 800861c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d10a      	bne.n	800863c <prvAddCurrentTaskToDelayedList+0x58>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800862c:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3304      	adds	r3, #4
 8008632:	4619      	mov	r1, r3
 8008634:	481a      	ldr	r0, [pc, #104]	; (80086a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008636:	f7fe fbd3 	bl	8006de0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800863a:	e026      	b.n	800868a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008644:	4b14      	ldr	r3, [pc, #80]	; (8008698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d209      	bcs.n	8008668 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008654:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3304      	adds	r3, #4
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f7fe fbe1 	bl	8006e28 <vListInsert>
}
 8008666:	e010      	b.n	800868a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008668:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3304      	adds	r3, #4
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f7fe fbd7 	bl	8006e28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800867a:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	429a      	cmp	r2, r3
 8008682:	d202      	bcs.n	800868a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008684:	4a09      	ldr	r2, [pc, #36]	; (80086ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6013      	str	r3, [r2, #0]
}
 800868a:	bf00      	nop
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20000808 	.word	0x20000808
 8008698:	20000650 	.word	0x20000650
 800869c:	2000080c 	.word	0x2000080c
 80086a0:	200007f0 	.word	0x200007f0
 80086a4:	200007c0 	.word	0x200007c0
 80086a8:	200007bc 	.word	0x200007bc
 80086ac:	20000824 	.word	0x20000824

080086b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3b04      	subs	r3, #4
 80086c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3b04      	subs	r3, #4
 80086ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f023 0201 	bic.w	r2, r3, #1
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b04      	subs	r3, #4
 80086de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086e0:	4a0c      	ldr	r2, [pc, #48]	; (8008714 <pxPortInitialiseStack+0x64>)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b14      	subs	r3, #20
 80086ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3b04      	subs	r3, #4
 80086f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f06f 0202 	mvn.w	r2, #2
 80086fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3b20      	subs	r3, #32
 8008704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008706:	68fb      	ldr	r3, [r7, #12]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	08008719 	.word	0x08008719

08008718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008722:	4b12      	ldr	r3, [pc, #72]	; (800876c <prvTaskExitError+0x54>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d00a      	beq.n	8008742 <prvTaskExitError+0x2a>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60fb      	str	r3, [r7, #12]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <prvTaskExitError+0x28>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60bb      	str	r3, [r7, #8]
}
 8008754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008756:	bf00      	nop
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0fc      	beq.n	8008758 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800875e:	bf00      	nop
 8008760:	bf00      	nop
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20000014 	.word	0x20000014

08008770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <pxCurrentTCBConst2>)
 8008772:	6819      	ldr	r1, [r3, #0]
 8008774:	6808      	ldr	r0, [r1, #0]
 8008776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877a:	f380 8809 	msr	PSP, r0
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	f380 8811 	msr	BASEPRI, r0
 800878a:	4770      	bx	lr
 800878c:	f3af 8000 	nop.w

08008790 <pxCurrentTCBConst2>:
 8008790:	20000650 	.word	0x20000650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008798:	4808      	ldr	r0, [pc, #32]	; (80087bc <prvPortStartFirstTask+0x24>)
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	6800      	ldr	r0, [r0, #0]
 800879e:	f380 8808 	msr	MSP, r0
 80087a2:	f04f 0000 	mov.w	r0, #0
 80087a6:	f380 8814 	msr	CONTROL, r0
 80087aa:	b662      	cpsie	i
 80087ac:	b661      	cpsie	f
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	df00      	svc	0
 80087b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087ba:	bf00      	nop
 80087bc:	e000ed08 	.word	0xe000ed08

080087c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087c6:	4b46      	ldr	r3, [pc, #280]	; (80088e0 <xPortStartScheduler+0x120>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a46      	ldr	r2, [pc, #280]	; (80088e4 <xPortStartScheduler+0x124>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d10a      	bne.n	80087e6 <xPortStartScheduler+0x26>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	613b      	str	r3, [r7, #16]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087e6:	4b3e      	ldr	r3, [pc, #248]	; (80088e0 <xPortStartScheduler+0x120>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a3f      	ldr	r2, [pc, #252]	; (80088e8 <xPortStartScheduler+0x128>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d10a      	bne.n	8008806 <xPortStartScheduler+0x46>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	60fb      	str	r3, [r7, #12]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008806:	4b39      	ldr	r3, [pc, #228]	; (80088ec <xPortStartScheduler+0x12c>)
 8008808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	b2db      	uxtb	r3, r3
 8008810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	22ff      	movs	r2, #255	; 0xff
 8008816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008828:	b2da      	uxtb	r2, r3
 800882a:	4b31      	ldr	r3, [pc, #196]	; (80088f0 <xPortStartScheduler+0x130>)
 800882c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800882e:	4b31      	ldr	r3, [pc, #196]	; (80088f4 <xPortStartScheduler+0x134>)
 8008830:	2207      	movs	r2, #7
 8008832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008834:	e009      	b.n	800884a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008836:	4b2f      	ldr	r3, [pc, #188]	; (80088f4 <xPortStartScheduler+0x134>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3b01      	subs	r3, #1
 800883c:	4a2d      	ldr	r2, [pc, #180]	; (80088f4 <xPortStartScheduler+0x134>)
 800883e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	b2db      	uxtb	r3, r3
 8008848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008852:	2b80      	cmp	r3, #128	; 0x80
 8008854:	d0ef      	beq.n	8008836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008856:	4b27      	ldr	r3, [pc, #156]	; (80088f4 <xPortStartScheduler+0x134>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f1c3 0307 	rsb	r3, r3, #7
 800885e:	2b04      	cmp	r3, #4
 8008860:	d00a      	beq.n	8008878 <xPortStartScheduler+0xb8>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	60bb      	str	r3, [r7, #8]
}
 8008874:	bf00      	nop
 8008876:	e7fe      	b.n	8008876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008878:	4b1e      	ldr	r3, [pc, #120]	; (80088f4 <xPortStartScheduler+0x134>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <xPortStartScheduler+0x134>)
 8008880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008882:	4b1c      	ldr	r3, [pc, #112]	; (80088f4 <xPortStartScheduler+0x134>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800888a:	4a1a      	ldr	r2, [pc, #104]	; (80088f4 <xPortStartScheduler+0x134>)
 800888c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	b2da      	uxtb	r2, r3
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008896:	4b18      	ldr	r3, [pc, #96]	; (80088f8 <xPortStartScheduler+0x138>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a17      	ldr	r2, [pc, #92]	; (80088f8 <xPortStartScheduler+0x138>)
 800889c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088a2:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <xPortStartScheduler+0x138>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a14      	ldr	r2, [pc, #80]	; (80088f8 <xPortStartScheduler+0x138>)
 80088a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088ae:	f000 f8dd 	bl	8008a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088b2:	4b12      	ldr	r3, [pc, #72]	; (80088fc <xPortStartScheduler+0x13c>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088b8:	f000 f8fc 	bl	8008ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088bc:	4b10      	ldr	r3, [pc, #64]	; (8008900 <xPortStartScheduler+0x140>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a0f      	ldr	r2, [pc, #60]	; (8008900 <xPortStartScheduler+0x140>)
 80088c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80088c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088c8:	f7ff ff66 	bl	8008798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088cc:	f7ff fa88 	bl	8007de0 <vTaskSwitchContext>
	prvTaskExitError();
 80088d0:	f7ff ff22 	bl	8008718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	e000ed00 	.word	0xe000ed00
 80088e4:	410fc271 	.word	0x410fc271
 80088e8:	410fc270 	.word	0x410fc270
 80088ec:	e000e400 	.word	0xe000e400
 80088f0:	20000830 	.word	0x20000830
 80088f4:	20000834 	.word	0x20000834
 80088f8:	e000ed20 	.word	0xe000ed20
 80088fc:	20000014 	.word	0x20000014
 8008900:	e000ef34 	.word	0xe000ef34

08008904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	607b      	str	r3, [r7, #4]
}
 800891c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800891e:	4b0f      	ldr	r3, [pc, #60]	; (800895c <vPortEnterCritical+0x58>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	4a0d      	ldr	r2, [pc, #52]	; (800895c <vPortEnterCritical+0x58>)
 8008926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008928:	4b0c      	ldr	r3, [pc, #48]	; (800895c <vPortEnterCritical+0x58>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d10f      	bne.n	8008950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008930:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <vPortEnterCritical+0x5c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <vPortEnterCritical+0x4c>
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	603b      	str	r3, [r7, #0]
}
 800894c:	bf00      	nop
 800894e:	e7fe      	b.n	800894e <vPortEnterCritical+0x4a>
	}
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	20000014 	.word	0x20000014
 8008960:	e000ed04 	.word	0xe000ed04

08008964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800896a:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <vPortExitCritical+0x50>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <vPortExitCritical+0x24>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	607b      	str	r3, [r7, #4]
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008988:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <vPortExitCritical+0x50>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3b01      	subs	r3, #1
 800898e:	4a09      	ldr	r2, [pc, #36]	; (80089b4 <vPortExitCritical+0x50>)
 8008990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008992:	4b08      	ldr	r3, [pc, #32]	; (80089b4 <vPortExitCritical+0x50>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d105      	bne.n	80089a6 <vPortExitCritical+0x42>
 800899a:	2300      	movs	r3, #0
 800899c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80089a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20000014 	.word	0x20000014
	...

080089c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089c0:	f3ef 8009 	mrs	r0, PSP
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	4b15      	ldr	r3, [pc, #84]	; (8008a20 <pxCurrentTCBConst>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	f01e 0f10 	tst.w	lr, #16
 80089d0:	bf08      	it	eq
 80089d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089da:	6010      	str	r0, [r2, #0]
 80089dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089e4:	f380 8811 	msr	BASEPRI, r0
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f7ff f9f6 	bl	8007de0 <vTaskSwitchContext>
 80089f4:	f04f 0000 	mov.w	r0, #0
 80089f8:	f380 8811 	msr	BASEPRI, r0
 80089fc:	bc09      	pop	{r0, r3}
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	6808      	ldr	r0, [r1, #0]
 8008a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a06:	f01e 0f10 	tst.w	lr, #16
 8008a0a:	bf08      	it	eq
 8008a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a10:	f380 8809 	msr	PSP, r0
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	f3af 8000 	nop.w

08008a20 <pxCurrentTCBConst>:
 8008a20:	20000650 	.word	0x20000650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop

08008a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	607b      	str	r3, [r7, #4]
}
 8008a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a42:	f7ff f915 	bl	8007c70 <xTaskIncrementTick>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d003      	beq.n	8008a54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a4c:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <SysTick_Handler+0x40>)
 8008a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	2300      	movs	r3, #0
 8008a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f383 8811 	msr	BASEPRI, r3
}
 8008a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	e000ed04 	.word	0xe000ed04

08008a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a70:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <vPortSetupTimerInterrupt+0x34>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <vPortSetupTimerInterrupt+0x38>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <vPortSetupTimerInterrupt+0x3c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <vPortSetupTimerInterrupt+0x40>)
 8008a82:	fba2 2303 	umull	r2, r3, r2, r3
 8008a86:	099b      	lsrs	r3, r3, #6
 8008a88:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <vPortSetupTimerInterrupt+0x44>)
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a8e:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <vPortSetupTimerInterrupt+0x34>)
 8008a90:	2207      	movs	r2, #7
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	e000e010 	.word	0xe000e010
 8008aa4:	e000e018 	.word	0xe000e018
 8008aa8:	20000008 	.word	0x20000008
 8008aac:	10624dd3 	.word	0x10624dd3
 8008ab0:	e000e014 	.word	0xe000e014

08008ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ac4 <vPortEnableVFP+0x10>
 8008ab8:	6801      	ldr	r1, [r0, #0]
 8008aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008abe:	6001      	str	r1, [r0, #0]
 8008ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ac2:	bf00      	nop
 8008ac4:	e000ed88 	.word	0xe000ed88

08008ac8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d004      	beq.n	8008ae8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f023 0307 	bic.w	r3, r3, #7
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8008ae8:	f7ff f818 	bl	8007b1c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8008aec:	4b16      	ldr	r3, [pc, #88]	; (8008b48 <pvPortMalloc+0x80>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d105      	bne.n	8008b00 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008af4:	4b15      	ldr	r3, [pc, #84]	; (8008b4c <pvPortMalloc+0x84>)
 8008af6:	f023 0307 	bic.w	r3, r3, #7
 8008afa:	461a      	mov	r2, r3
 8008afc:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <pvPortMalloc+0x80>)
 8008afe:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008b00:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <pvPortMalloc+0x88>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4413      	add	r3, r2
 8008b08:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d813      	bhi.n	8008b38 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8008b10:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <pvPortMalloc+0x88>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	441a      	add	r2, r3
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <pvPortMalloc+0x88>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d90b      	bls.n	8008b38 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8008b20:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <pvPortMalloc+0x80>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <pvPortMalloc+0x88>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4413      	add	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8008b2c:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <pvPortMalloc+0x88>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4413      	add	r3, r2
 8008b34:	4a06      	ldr	r2, [pc, #24]	; (8008b50 <pvPortMalloc+0x88>)
 8008b36:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b38:	f7fe fffe 	bl	8007b38 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	2000443c 	.word	0x2000443c
 8008b4c:	20000840 	.word	0x20000840
 8008b50:	20004438 	.word	0x20004438

08008b54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <vPortFree+0x24>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60fb      	str	r3, [r7, #12]
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <vPortFree+0x22>
}
 8008b78:	bf00      	nop
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <memset>:
 8008b84:	4402      	add	r2, r0
 8008b86:	4603      	mov	r3, r0
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d100      	bne.n	8008b8e <memset+0xa>
 8008b8c:	4770      	bx	lr
 8008b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b92:	e7f9      	b.n	8008b88 <memset+0x4>

08008b94 <_reclaim_reent>:
 8008b94:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <_reclaim_reent+0xa8>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4283      	cmp	r3, r0
 8008b9a:	b570      	push	{r4, r5, r6, lr}
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	d04b      	beq.n	8008c38 <_reclaim_reent+0xa4>
 8008ba0:	69c3      	ldr	r3, [r0, #28]
 8008ba2:	b143      	cbz	r3, 8008bb6 <_reclaim_reent+0x22>
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d144      	bne.n	8008c34 <_reclaim_reent+0xa0>
 8008baa:	69e3      	ldr	r3, [r4, #28]
 8008bac:	6819      	ldr	r1, [r3, #0]
 8008bae:	b111      	cbz	r1, 8008bb6 <_reclaim_reent+0x22>
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 f879 	bl	8008ca8 <_free_r>
 8008bb6:	6961      	ldr	r1, [r4, #20]
 8008bb8:	b111      	cbz	r1, 8008bc0 <_reclaim_reent+0x2c>
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 f874 	bl	8008ca8 <_free_r>
 8008bc0:	69e1      	ldr	r1, [r4, #28]
 8008bc2:	b111      	cbz	r1, 8008bca <_reclaim_reent+0x36>
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 f86f 	bl	8008ca8 <_free_r>
 8008bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008bcc:	b111      	cbz	r1, 8008bd4 <_reclaim_reent+0x40>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 f86a 	bl	8008ca8 <_free_r>
 8008bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd6:	b111      	cbz	r1, 8008bde <_reclaim_reent+0x4a>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 f865 	bl	8008ca8 <_free_r>
 8008bde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008be0:	b111      	cbz	r1, 8008be8 <_reclaim_reent+0x54>
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 f860 	bl	8008ca8 <_free_r>
 8008be8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008bea:	b111      	cbz	r1, 8008bf2 <_reclaim_reent+0x5e>
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 f85b 	bl	8008ca8 <_free_r>
 8008bf2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008bf4:	b111      	cbz	r1, 8008bfc <_reclaim_reent+0x68>
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 f856 	bl	8008ca8 <_free_r>
 8008bfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008bfe:	b111      	cbz	r1, 8008c06 <_reclaim_reent+0x72>
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 f851 	bl	8008ca8 <_free_r>
 8008c06:	6a23      	ldr	r3, [r4, #32]
 8008c08:	b1b3      	cbz	r3, 8008c38 <_reclaim_reent+0xa4>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c10:	4718      	bx	r3
 8008c12:	5949      	ldr	r1, [r1, r5]
 8008c14:	b941      	cbnz	r1, 8008c28 <_reclaim_reent+0x94>
 8008c16:	3504      	adds	r5, #4
 8008c18:	69e3      	ldr	r3, [r4, #28]
 8008c1a:	2d80      	cmp	r5, #128	; 0x80
 8008c1c:	68d9      	ldr	r1, [r3, #12]
 8008c1e:	d1f8      	bne.n	8008c12 <_reclaim_reent+0x7e>
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 f841 	bl	8008ca8 <_free_r>
 8008c26:	e7c0      	b.n	8008baa <_reclaim_reent+0x16>
 8008c28:	680e      	ldr	r6, [r1, #0]
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 f83c 	bl	8008ca8 <_free_r>
 8008c30:	4631      	mov	r1, r6
 8008c32:	e7ef      	b.n	8008c14 <_reclaim_reent+0x80>
 8008c34:	2500      	movs	r5, #0
 8008c36:	e7ef      	b.n	8008c18 <_reclaim_reent+0x84>
 8008c38:	bd70      	pop	{r4, r5, r6, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000064 	.word	0x20000064

08008c40 <__libc_init_array>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	4d0d      	ldr	r5, [pc, #52]	; (8008c78 <__libc_init_array+0x38>)
 8008c44:	4c0d      	ldr	r4, [pc, #52]	; (8008c7c <__libc_init_array+0x3c>)
 8008c46:	1b64      	subs	r4, r4, r5
 8008c48:	10a4      	asrs	r4, r4, #2
 8008c4a:	2600      	movs	r6, #0
 8008c4c:	42a6      	cmp	r6, r4
 8008c4e:	d109      	bne.n	8008c64 <__libc_init_array+0x24>
 8008c50:	4d0b      	ldr	r5, [pc, #44]	; (8008c80 <__libc_init_array+0x40>)
 8008c52:	4c0c      	ldr	r4, [pc, #48]	; (8008c84 <__libc_init_array+0x44>)
 8008c54:	f000 f880 	bl	8008d58 <_init>
 8008c58:	1b64      	subs	r4, r4, r5
 8008c5a:	10a4      	asrs	r4, r4, #2
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	42a6      	cmp	r6, r4
 8008c60:	d105      	bne.n	8008c6e <__libc_init_array+0x2e>
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c68:	4798      	blx	r3
 8008c6a:	3601      	adds	r6, #1
 8008c6c:	e7ee      	b.n	8008c4c <__libc_init_array+0xc>
 8008c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c72:	4798      	blx	r3
 8008c74:	3601      	adds	r6, #1
 8008c76:	e7f2      	b.n	8008c5e <__libc_init_array+0x1e>
 8008c78:	08008e90 	.word	0x08008e90
 8008c7c:	08008e90 	.word	0x08008e90
 8008c80:	08008e90 	.word	0x08008e90
 8008c84:	08008e94 	.word	0x08008e94

08008c88 <__retarget_lock_acquire_recursive>:
 8008c88:	4770      	bx	lr

08008c8a <__retarget_lock_release_recursive>:
 8008c8a:	4770      	bx	lr

08008c8c <memcpy>:
 8008c8c:	440a      	add	r2, r1
 8008c8e:	4291      	cmp	r1, r2
 8008c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c94:	d100      	bne.n	8008c98 <memcpy+0xc>
 8008c96:	4770      	bx	lr
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ca2:	4291      	cmp	r1, r2
 8008ca4:	d1f9      	bne.n	8008c9a <memcpy+0xe>
 8008ca6:	bd10      	pop	{r4, pc}

08008ca8 <_free_r>:
 8008ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008caa:	2900      	cmp	r1, #0
 8008cac:	d044      	beq.n	8008d38 <_free_r+0x90>
 8008cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cb2:	9001      	str	r0, [sp, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f1a1 0404 	sub.w	r4, r1, #4
 8008cba:	bfb8      	it	lt
 8008cbc:	18e4      	addlt	r4, r4, r3
 8008cbe:	f000 f83f 	bl	8008d40 <__malloc_lock>
 8008cc2:	4a1e      	ldr	r2, [pc, #120]	; (8008d3c <_free_r+0x94>)
 8008cc4:	9801      	ldr	r0, [sp, #4]
 8008cc6:	6813      	ldr	r3, [r2, #0]
 8008cc8:	b933      	cbnz	r3, 8008cd8 <_free_r+0x30>
 8008cca:	6063      	str	r3, [r4, #4]
 8008ccc:	6014      	str	r4, [r2, #0]
 8008cce:	b003      	add	sp, #12
 8008cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cd4:	f000 b83a 	b.w	8008d4c <__malloc_unlock>
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	d908      	bls.n	8008cee <_free_r+0x46>
 8008cdc:	6825      	ldr	r5, [r4, #0]
 8008cde:	1961      	adds	r1, r4, r5
 8008ce0:	428b      	cmp	r3, r1
 8008ce2:	bf01      	itttt	eq
 8008ce4:	6819      	ldreq	r1, [r3, #0]
 8008ce6:	685b      	ldreq	r3, [r3, #4]
 8008ce8:	1949      	addeq	r1, r1, r5
 8008cea:	6021      	streq	r1, [r4, #0]
 8008cec:	e7ed      	b.n	8008cca <_free_r+0x22>
 8008cee:	461a      	mov	r2, r3
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	b10b      	cbz	r3, 8008cf8 <_free_r+0x50>
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	d9fa      	bls.n	8008cee <_free_r+0x46>
 8008cf8:	6811      	ldr	r1, [r2, #0]
 8008cfa:	1855      	adds	r5, r2, r1
 8008cfc:	42a5      	cmp	r5, r4
 8008cfe:	d10b      	bne.n	8008d18 <_free_r+0x70>
 8008d00:	6824      	ldr	r4, [r4, #0]
 8008d02:	4421      	add	r1, r4
 8008d04:	1854      	adds	r4, r2, r1
 8008d06:	42a3      	cmp	r3, r4
 8008d08:	6011      	str	r1, [r2, #0]
 8008d0a:	d1e0      	bne.n	8008cce <_free_r+0x26>
 8008d0c:	681c      	ldr	r4, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	6053      	str	r3, [r2, #4]
 8008d12:	440c      	add	r4, r1
 8008d14:	6014      	str	r4, [r2, #0]
 8008d16:	e7da      	b.n	8008cce <_free_r+0x26>
 8008d18:	d902      	bls.n	8008d20 <_free_r+0x78>
 8008d1a:	230c      	movs	r3, #12
 8008d1c:	6003      	str	r3, [r0, #0]
 8008d1e:	e7d6      	b.n	8008cce <_free_r+0x26>
 8008d20:	6825      	ldr	r5, [r4, #0]
 8008d22:	1961      	adds	r1, r4, r5
 8008d24:	428b      	cmp	r3, r1
 8008d26:	bf04      	itt	eq
 8008d28:	6819      	ldreq	r1, [r3, #0]
 8008d2a:	685b      	ldreq	r3, [r3, #4]
 8008d2c:	6063      	str	r3, [r4, #4]
 8008d2e:	bf04      	itt	eq
 8008d30:	1949      	addeq	r1, r1, r5
 8008d32:	6021      	streq	r1, [r4, #0]
 8008d34:	6054      	str	r4, [r2, #4]
 8008d36:	e7ca      	b.n	8008cce <_free_r+0x26>
 8008d38:	b003      	add	sp, #12
 8008d3a:	bd30      	pop	{r4, r5, pc}
 8008d3c:	2000457c 	.word	0x2000457c

08008d40 <__malloc_lock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__malloc_lock+0x8>)
 8008d42:	f7ff bfa1 	b.w	8008c88 <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	20004578 	.word	0x20004578

08008d4c <__malloc_unlock>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__malloc_unlock+0x8>)
 8008d4e:	f7ff bf9c 	b.w	8008c8a <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	20004578 	.word	0x20004578

08008d58 <_init>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr

08008d64 <_fini>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr
