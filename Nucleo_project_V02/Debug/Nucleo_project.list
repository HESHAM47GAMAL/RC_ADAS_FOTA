
Nucleo_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007b70  08007b70  00017b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c24  08007c24  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c2c  08007c2c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c30  08007c30  00017c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000450c  20000068  08007c9c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004574  08007c9c  00024574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017db4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003af6  00000000  00000000  00037e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6e  00000000  00000000  0003cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cb2  00000000  00000000  0003dcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000194dd  00000000  00000000  000629a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da998  00000000  00000000  0007be7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005418  00000000  00000000  00156818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0015bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b58 	.word	0x08007b58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08007b58 	.word	0x08007b58

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_DC_Motors_Forward>:
/************************************************************
 *Function Name : HAL_DC_Motors_Forward
 *Description 	: Rotate the DC Motors forward
 *
 ****************************************************/
void HAL_DC_Motors_Forward(void ){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	//----IN1 = H
	//----IN2 = L
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <HAL_DC_Motors_Forward+0x20>)
 8000518:	f002 fcdc 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <HAL_DC_Motors_Forward+0x20>)
 8000524:	f002 fcd6 	bl	8002ed4 <HAL_GPIO_WritePin>

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40020400 	.word	0x40020400

08000530 <HAL_DC_Motors_Backword>:
/**************************************************************
 *Function Name : HAL_DC_Motors_Backword
 *Description 	: Rotate the DC Motors forward
 *
 ****************************************************/
void HAL_DC_Motors_Backword(void ){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	//----IN1 = H
	//----IN2 = L
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <HAL_DC_Motors_Backword+0x20>)
 800053c:	f002 fcca 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <HAL_DC_Motors_Backword+0x20>)
 8000548:	f002 fcc4 	bl	8002ed4 <HAL_GPIO_WritePin>

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40020400 	.word	0x40020400

08000554 <HAL_DC_Motors_Stop>:
void HAL_DC_Motors_Stop (void ){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_1, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <HAL_DC_Motors_Stop+0x20>)
 8000560:	f002 fcb8 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAL_DC_Motor_Direc_2, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <HAL_DC_Motors_Stop+0x20>)
 800056c:	f002 fcb2 	bl	8002ed4 <HAL_GPIO_WritePin>

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40020400 	.word	0x40020400

08000578 <HAL_DC_Motor_Init>:
void HAL_DC_Motor_Init (void ){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&HAL_DC_Motor_Timer);
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <HAL_DC_Motor_Init+0x1c>)
 800057e:	f003 fb47 	bl	8003c10 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Init(&HAL_DC_Motor_Timer);
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <HAL_DC_Motor_Init+0x1c>)
 8000584:	f003 fc1c 	bl	8003dc0 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&HAL_DC_Motor_Timer, HAL_DC_Motor_Channel);
 8000588:	2100      	movs	r1, #0
 800058a:	4802      	ldr	r0, [pc, #8]	; (8000594 <HAL_DC_Motor_Init+0x1c>)
 800058c:	f003 fc72 	bl	8003e74 <HAL_TIM_PWM_Start>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000490 	.word	0x20000490

08000598 <HAL_DC_Motors_Set_Speed>:
void HAL_DC_Motors_Set_Speed (uint8_t Copy_DC_MotorSpeed_percentage){ // Percent
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]


	__HAL_TIM_SET_COMPARE(&HAL_DC_Motor_Timer,HAL_DC_Motor_Channel, Copy_DC_MotorSpeed_percentage);
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_DC_Motors_Set_Speed+0x20>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	79fa      	ldrb	r2, [r7, #7]
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34





}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000490 	.word	0x20000490

080005bc <HAL_ServoMotor_Init>:

void HAL_ServoMotor_Init (void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Init(&HAL_Servo_Motor_Timer);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <HAL_ServoMotor_Init+0x10>)
 80005c2:	f003 fbfd 	bl	8003dc0 <HAL_TIM_PWM_Init>

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000448 	.word	0x20000448

080005d0 <HAL_ServoMotor_Set_Angel>:

void HAL_ServoMotor_Set_Angel (int8_t Copy_ServoMotor_Angel){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]


	uint16_t  Campare_value;
	if (Copy_ServoMotor_Angel < 0 ){
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	da17      	bge.n	8000612 <HAL_ServoMotor_Set_Angel+0x42>

		Campare_value = ((((int32_t)50*Copy_ServoMotor_Angel)/9) + 1000);
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	2232      	movs	r2, #50	; 0x32
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	4a1f      	ldr	r2, [pc, #124]	; (800066c <HAL_ServoMotor_Set_Angel+0x9c>)
 80005ee:	fb82 1203 	smull	r1, r2, r2, r3
 80005f2:	1052      	asrs	r2, r2, #1
 80005f4:	17db      	asrs	r3, r3, #31
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005fe:	81fb      	strh	r3, [r7, #14]

		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, Campare_value);
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <HAL_ServoMotor_Set_Angel+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	89fa      	ldrh	r2, [r7, #14]
 8000606:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 8000608:	2100      	movs	r1, #0
 800060a:	4819      	ldr	r0, [pc, #100]	; (8000670 <HAL_ServoMotor_Set_Angel+0xa0>)
 800060c:	f003 fc32 	bl	8003e74 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
	}



}
 8000610:	e028      	b.n	8000664 <HAL_ServoMotor_Set_Angel+0x94>
	else if (Copy_ServoMotor_Angel > 0){
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	2b00      	cmp	r3, #0
 8000618:	dd17      	ble.n	800064a <HAL_ServoMotor_Set_Angel+0x7a>
		Campare_value = ((((int32_t)70*Copy_ServoMotor_Angel)/9) + 1000);
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2246      	movs	r2, #70	; 0x46
 8000620:	fb02 f303 	mul.w	r3, r2, r3
 8000624:	4a11      	ldr	r2, [pc, #68]	; (800066c <HAL_ServoMotor_Set_Angel+0x9c>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1052      	asrs	r2, r2, #1
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	b29b      	uxth	r3, r3
 8000632:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000636:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, Campare_value);
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <HAL_ServoMotor_Set_Angel+0xa0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	89fa      	ldrh	r2, [r7, #14]
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 8000640:	2100      	movs	r1, #0
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <HAL_ServoMotor_Set_Angel+0xa0>)
 8000644:	f003 fc16 	bl	8003e74 <HAL_TIM_PWM_Start>
}
 8000648:	e00c      	b.n	8000664 <HAL_ServoMotor_Set_Angel+0x94>
	else if (Copy_ServoMotor_Angel == 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d108      	bne.n	8000664 <HAL_ServoMotor_Set_Angel+0x94>
		__HAL_TIM_SET_COMPARE(&HAL_Servo_Motor_Timer,HAL_Servo_Motor_Channel, 1000);
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_ServoMotor_Set_Angel+0xa0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&HAL_Servo_Motor_Timer, HAL_Servo_Motor_Channel);
 800065c:	2100      	movs	r1, #0
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <HAL_ServoMotor_Set_Angel+0xa0>)
 8000660:	f003 fc08 	bl	8003e74 <HAL_TIM_PWM_Start>
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	38e38e39 	.word	0x38e38e39
 8000670:	20000448 	.word	0x20000448

08000674 <RC_SystemInit>:
			HAL_UART_Transmit(&huart4 ,"\r\n",2,50);
}


void RC_SystemInit (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	flashing_smphr     =  xSemaphoreCreateBinary() ;
 8000678:	2203      	movs	r2, #3
 800067a:	2100      	movs	r1, #0
 800067c:	2001      	movs	r0, #1
 800067e:	f005 fb9d 	bl	8005dbc <xQueueGenericCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a3f      	ldr	r2, [pc, #252]	; (8000784 <RC_SystemInit+0x110>)
 8000686:	6013      	str	r3, [r2, #0]
	horn_smphr         =  xSemaphoreCreateBinary() ;
 8000688:	2203      	movs	r2, #3
 800068a:	2100      	movs	r1, #0
 800068c:	2001      	movs	r0, #1
 800068e:	f005 fb95 	bl	8005dbc <xQueueGenericCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <RC_SystemInit+0x114>)
 8000696:	6013      	str	r3, [r2, #0]
	Gear_smphr         =  xSemaphoreCreateBinary() ;
 8000698:	2203      	movs	r2, #3
 800069a:	2100      	movs	r1, #0
 800069c:	2001      	movs	r0, #1
 800069e:	f005 fb8d 	bl	8005dbc <xQueueGenericCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a39      	ldr	r2, [pc, #228]	; (800078c <RC_SystemInit+0x118>)
 80006a6:	6013      	str	r3, [r2, #0]
	speedInc_smphr     =  xSemaphoreCreateBinary() ;
 80006a8:	2203      	movs	r2, #3
 80006aa:	2100      	movs	r1, #0
 80006ac:	2001      	movs	r0, #1
 80006ae:	f005 fb85 	bl	8005dbc <xQueueGenericCreate>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a36      	ldr	r2, [pc, #216]	; (8000790 <RC_SystemInit+0x11c>)
 80006b6:	6013      	str	r3, [r2, #0]
	brake_smphr        =  xSemaphoreCreateBinary() ;
 80006b8:	2203      	movs	r2, #3
 80006ba:	2100      	movs	r1, #0
 80006bc:	2001      	movs	r0, #1
 80006be:	f005 fb7d 	bl	8005dbc <xQueueGenericCreate>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a33      	ldr	r2, [pc, #204]	; (8000794 <RC_SystemInit+0x120>)
 80006c6:	6013      	str	r3, [r2, #0]
	goRight_smphr  	   =  xSemaphoreCreateBinary() ;
 80006c8:	2203      	movs	r2, #3
 80006ca:	2100      	movs	r1, #0
 80006cc:	2001      	movs	r0, #1
 80006ce:	f005 fb75 	bl	8005dbc <xQueueGenericCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <RC_SystemInit+0x124>)
 80006d6:	6013      	str	r3, [r2, #0]
	goLeft_smphr       =  xSemaphoreCreateBinary() ;
 80006d8:	2203      	movs	r2, #3
 80006da:	2100      	movs	r1, #0
 80006dc:	2001      	movs	r0, #1
 80006de:	f005 fb6d 	bl	8005dbc <xQueueGenericCreate>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a2d      	ldr	r2, [pc, #180]	; (800079c <RC_SystemInit+0x128>)
 80006e6:	6013      	str	r3, [r2, #0]
	assist_smphr       =  xSemaphoreCreateBinary() ;
 80006e8:	2203      	movs	r2, #3
 80006ea:	2100      	movs	r1, #0
 80006ec:	2001      	movs	r0, #1
 80006ee:	f005 fb65 	bl	8005dbc <xQueueGenericCreate>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <RC_SystemInit+0x12c>)
 80006f6:	6013      	str	r3, [r2, #0]
	right_park_smphr   =  xSemaphoreCreateBinary() ;
 80006f8:	2203      	movs	r2, #3
 80006fa:	2100      	movs	r1, #0
 80006fc:	2001      	movs	r0, #1
 80006fe:	f005 fb5d 	bl	8005dbc <xQueueGenericCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <RC_SystemInit+0x130>)
 8000706:	6013      	str	r3, [r2, #0]
	left_park_smphr    =  xSemaphoreCreateBinary() ;
 8000708:	2203      	movs	r2, #3
 800070a:	2100      	movs	r1, #0
 800070c:	2001      	movs	r0, #1
 800070e:	f005 fb55 	bl	8005dbc <xQueueGenericCreate>
 8000712:	4603      	mov	r3, r0
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <RC_SystemInit+0x134>)
 8000716:	6013      	str	r3, [r2, #0]

	HAL_ServoMotor_Init() ;
 8000718:	f7ff ff50 	bl	80005bc <HAL_ServoMotor_Init>
	HAL_ServoMotor_Set_Angel(0) ;
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff57 	bl	80005d0 <HAL_ServoMotor_Set_Angel>

	HAL_DC_Motor_Init() ;
 8000722:	f7ff ff29 	bl	8000578 <HAL_DC_Motor_Init>
	HAL_DC_Motors_Stop() ;
 8000726:	f7ff ff15 	bl	8000554 <HAL_DC_Motors_Stop>
	HAL_DC_Motors_Set_Speed(0) ;
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff ff34 	bl	8000598 <HAL_DC_Motors_Set_Speed>




	HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000736:	481d      	ldr	r0, [pc, #116]	; (80007ac <RC_SystemInit+0x138>)
 8000738:	f002 fbcc 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000742:	481a      	ldr	r0, [pc, #104]	; (80007ac <RC_SystemInit+0x138>)
 8000744:	f002 fbc6 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074e:	4817      	ldr	r0, [pc, #92]	; (80007ac <RC_SystemInit+0x138>)
 8000750:	f002 fbc0 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING,GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <RC_SystemInit+0x138>)
 800075c:	f002 fbba 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2102      	movs	r1, #2
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <RC_SystemInit+0x138>)
 8000766:	f002 fbb5 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2101      	movs	r1, #1
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <RC_SystemInit+0x138>)
 8000770:	f002 fbb0 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_PIN,GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2104      	movs	r1, #4
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <RC_SystemInit+0x138>)
 800077a:	f002 fbab 	bl	8002ed4 <HAL_GPIO_WritePin>

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000088 	.word	0x20000088
 8000788:	2000008c 	.word	0x2000008c
 800078c:	20000090 	.word	0x20000090
 8000790:	20000094 	.word	0x20000094
 8000794:	20000098 	.word	0x20000098
 8000798:	2000009c 	.word	0x2000009c
 800079c:	200000a0 	.word	0x200000a0
 80007a0:	200000a4 	.word	0x200000a4
 80007a4:	200000a8 	.word	0x200000a8
 80007a8:	200000ac 	.word	0x200000ac
 80007ac:	40020400 	.word	0x40020400

080007b0 <T1_HandleUartReceive>:


void T1_HandleUartReceive (void* pvarg)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef l_retval = HAL_OK ;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]
	uint8_t data ;

	while (1)
	{
		/* handle break assist */
		if ((ENGINE_ENABLE==engine_state)&&(BREAK_ASSIST_ENABLE==assist_state))
 80007bc:	4bc4      	ldr	r3, [pc, #784]	; (8000ad0 <T1_HandleUartReceive+0x320>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d12d      	bne.n	8000822 <T1_HandleUartReceive+0x72>
 80007c6:	4bc3      	ldr	r3, [pc, #780]	; (8000ad4 <T1_HandleUartReceive+0x324>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d128      	bne.n	8000822 <T1_HandleUartReceive+0x72>
		{
			/* Compare current front ultrasonic distance with maximum accepted value
			  if current val is less than maximum accepted value stop car you are crashing    */
			if (gear_current==GEAR_D)
 80007d0:	4bc1      	ldr	r3, [pc, #772]	; (8000ad8 <T1_HandleUartReceive+0x328>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d10f      	bne.n	80007fa <T1_HandleUartReceive+0x4a>
			{
				if (Important_Buffer[USF]<BREAK_ASSIST_MAXIMUM_ACCEPTED_DIST)
 80007da:	4bc0      	ldr	r3, [pc, #768]	; (8000adc <T1_HandleUartReceive+0x32c>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	2b0e      	cmp	r3, #14
 80007e2:	d802      	bhi.n	80007ea <T1_HandleUartReceive+0x3a>
				{
					HAL_DC_Motors_Stop() ;
 80007e4:	f7ff feb6 	bl	8000554 <HAL_DC_Motors_Stop>
 80007e8:	e01b      	b.n	8000822 <T1_HandleUartReceive+0x72>
				}
				else
				{
					HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 80007ea:	4bbd      	ldr	r3, [pc, #756]	; (8000ae0 <T1_HandleUartReceive+0x330>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fed0 	bl	8000598 <HAL_DC_Motors_Set_Speed>
 80007f8:	e013      	b.n	8000822 <T1_HandleUartReceive+0x72>
			}

			/* Compare current Back ultrasonic distance with maximum accepted value
				if current val is less than maximum accepted value stop car you are crashing    */

			else if (gear_current==GEAR_R)
 80007fa:	4bb7      	ldr	r3, [pc, #732]	; (8000ad8 <T1_HandleUartReceive+0x328>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b02      	cmp	r3, #2
 8000802:	d10e      	bne.n	8000822 <T1_HandleUartReceive+0x72>
			{
				if (Important_Buffer[USB]<BREAK_ASSIST_MAXIMUM_ACCEPTED_DIST)
 8000804:	4bb5      	ldr	r3, [pc, #724]	; (8000adc <T1_HandleUartReceive+0x32c>)
 8000806:	885b      	ldrh	r3, [r3, #2]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2b0e      	cmp	r3, #14
 800080c:	d802      	bhi.n	8000814 <T1_HandleUartReceive+0x64>
				{
					HAL_DC_Motors_Stop() ;
 800080e:	f7ff fea1 	bl	8000554 <HAL_DC_Motors_Stop>
 8000812:	e006      	b.n	8000822 <T1_HandleUartReceive+0x72>
				}
				else
				{
					HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8000814:	4bb2      	ldr	r3, [pc, #712]	; (8000ae0 <T1_HandleUartReceive+0x330>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b25b      	sxtb	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff febb 	bl	8000598 <HAL_DC_Motors_Set_Speed>

		}
		/*string_toIint(Motor_Speed) ;
		string_toIint(servo_angle) ;*/
		/* handle UART receive */
		l_retval = HAL_UART_Receive(&huart4 ,&data,1,100 ) ;
 8000822:	f107 010e 	add.w	r1, r7, #14
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	2201      	movs	r2, #1
 800082a:	48ae      	ldr	r0, [pc, #696]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 800082c:	f004 fd63 	bl	80052f6 <HAL_UART_Receive>
 8000830:	4603      	mov	r3, r0
 8000832:	73fb      	strb	r3, [r7, #15]
		if (l_retval==HAL_OK)
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	2b00      	cmp	r3, #0
 8000838:	f040 8145 	bne.w	8000ac6 <T1_HandleUartReceive+0x316>
		{
			switch (data)
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	3b41      	subs	r3, #65	; 0x41
 8000840:	2b31      	cmp	r3, #49	; 0x31
 8000842:	f200 813a 	bhi.w	8000aba <T1_HandleUartReceive+0x30a>
 8000846:	a201      	add	r2, pc, #4	; (adr r2, 800084c <T1_HandleUartReceive+0x9c>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	08000a9d 	.word	0x08000a9d
 8000850:	080009fd 	.word	0x080009fd
 8000854:	08000abb 	.word	0x08000abb
 8000858:	08000a7f 	.word	0x08000a7f
 800085c:	08000915 	.word	0x08000915
 8000860:	0800097b 	.word	0x0800097b
 8000864:	080009b7 	.word	0x080009b7
 8000868:	08000999 	.word	0x08000999
 800086c:	08000abb 	.word	0x08000abb
 8000870:	08000abb 	.word	0x08000abb
 8000874:	08000abb 	.word	0x08000abb
 8000878:	08000939 	.word	0x08000939
 800087c:	08000abb 	.word	0x08000abb
 8000880:	08000abb 	.word	0x08000abb
 8000884:	08000abb 	.word	0x08000abb
 8000888:	08000abb 	.word	0x08000abb
 800088c:	08000abb 	.word	0x08000abb
 8000890:	0800094f 	.word	0x0800094f
 8000894:	08000a61 	.word	0x08000a61
 8000898:	08000abb 	.word	0x08000abb
 800089c:	08000abb 	.word	0x08000abb
 80008a0:	08000abb 	.word	0x08000abb
 80008a4:	08000965 	.word	0x08000965
 80008a8:	08000abb 	.word	0x08000abb
 80008ac:	08000abb 	.word	0x08000abb
 80008b0:	08000abb 	.word	0x08000abb
 80008b4:	08000abb 	.word	0x08000abb
 80008b8:	08000abb 	.word	0x08000abb
 80008bc:	08000abb 	.word	0x08000abb
 80008c0:	08000abb 	.word	0x08000abb
 80008c4:	08000abb 	.word	0x08000abb
 80008c8:	08000abb 	.word	0x08000abb
 80008cc:	08000abb 	.word	0x08000abb
 80008d0:	08000abb 	.word	0x08000abb
 80008d4:	08000abb 	.word	0x08000abb
 80008d8:	08000abb 	.word	0x08000abb
 80008dc:	08000abb 	.word	0x08000abb
 80008e0:	080009d5 	.word	0x080009d5
 80008e4:	08000abb 	.word	0x08000abb
 80008e8:	08000abb 	.word	0x08000abb
 80008ec:	08000abb 	.word	0x08000abb
 80008f0:	08000abb 	.word	0x08000abb
 80008f4:	08000abb 	.word	0x08000abb
 80008f8:	08000a43 	.word	0x08000a43
 80008fc:	08000abb 	.word	0x08000abb
 8000900:	08000abb 	.word	0x08000abb
 8000904:	08000abb 	.word	0x08000abb
 8000908:	08000abb 	.word	0x08000abb
 800090c:	08000abb 	.word	0x08000abb
 8000910:	08000a25 	.word	0x08000a25
			{
				case MSG_START_ENGINE :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000914:	f107 010e 	add.w	r1, r7, #14
 8000918:	2332      	movs	r3, #50	; 0x32
 800091a:	2201      	movs	r2, #1
 800091c:	4871      	ldr	r0, [pc, #452]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 800091e:	f004 fc5f 	bl	80051e0 <HAL_UART_Transmit>
					engine_state ^= 0x01 ;
 8000922:	4b6b      	ldr	r3, [pc, #428]	; (8000ad0 <T1_HandleUartReceive+0x320>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f083 0301 	eor.w	r3, r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b68      	ldr	r3, [pc, #416]	; (8000ad0 <T1_HandleUartReceive+0x320>)
 8000930:	701a      	strb	r2, [r3, #0]
					Car_EngineFunc() ;
 8000932:	f000 fc91 	bl	8001258 <Car_EngineFunc>
				break ;
 8000936:	e0c6      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_LEFT_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000938:	f107 010e 	add.w	r1, r7, #14
 800093c:	2332      	movs	r3, #50	; 0x32
 800093e:	2201      	movs	r2, #1
 8000940:	4868      	ldr	r0, [pc, #416]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000942:	f004 fc4d 	bl	80051e0 <HAL_UART_Transmit>
					transition = SIG_LEFT ;
 8000946:	4b68      	ldr	r3, [pc, #416]	; (8000ae8 <T1_HandleUartReceive+0x338>)
 8000948:	2202      	movs	r2, #2
 800094a:	701a      	strb	r2, [r3, #0]
				break ;
 800094c:	e0bb      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_RIGHT_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 800094e:	f107 010e 	add.w	r1, r7, #14
 8000952:	2332      	movs	r3, #50	; 0x32
 8000954:	2201      	movs	r2, #1
 8000956:	4863      	ldr	r0, [pc, #396]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000958:	f004 fc42 	bl	80051e0 <HAL_UART_Transmit>
					transition = SIG_RIGHT ;
 800095c:	4b62      	ldr	r3, [pc, #392]	; (8000ae8 <T1_HandleUartReceive+0x338>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
				break ;
 8000962:	e0b0      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_WAITING_SIGNAL :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000964:	f107 010e 	add.w	r1, r7, #14
 8000968:	2332      	movs	r3, #50	; 0x32
 800096a:	2201      	movs	r2, #1
 800096c:	485d      	ldr	r0, [pc, #372]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 800096e:	f004 fc37 	bl	80051e0 <HAL_UART_Transmit>
					transition = SIG_W8 ;
 8000972:	4b5d      	ldr	r3, [pc, #372]	; (8000ae8 <T1_HandleUartReceive+0x338>)
 8000974:	2203      	movs	r2, #3
 8000976:	701a      	strb	r2, [r3, #0]
				break ;
 8000978:	e0a5      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_FLASHING_LIGHT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 800097a:	f107 010e 	add.w	r1, r7, #14
 800097e:	2332      	movs	r3, #50	; 0x32
 8000980:	2201      	movs	r2, #1
 8000982:	4858      	ldr	r0, [pc, #352]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000984:	f004 fc2c 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(flashing_smphr) ;
 8000988:	4b58      	ldr	r3, [pc, #352]	; (8000aec <T1_HandleUartReceive+0x33c>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	f005 fa6d 	bl	8005e70 <xQueueGenericSend>
				break ;
 8000996:	e096      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_HORN_BEEPING :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000998:	f107 010e 	add.w	r1, r7, #14
 800099c:	2332      	movs	r3, #50	; 0x32
 800099e:	2201      	movs	r2, #1
 80009a0:	4850      	ldr	r0, [pc, #320]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 80009a2:	f004 fc1d 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(horn_smphr) ;
 80009a6:	4b52      	ldr	r3, [pc, #328]	; (8000af0 <T1_HandleUartReceive+0x340>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	f005 fa5e 	bl	8005e70 <xQueueGenericSend>
				break ;
 80009b4:	e087      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_GEAR_CHANGE :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80009b6:	f107 010e 	add.w	r1, r7, #14
 80009ba:	2332      	movs	r3, #50	; 0x32
 80009bc:	2201      	movs	r2, #1
 80009be:	4849      	ldr	r0, [pc, #292]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 80009c0:	f004 fc0e 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(Gear_smphr) ;
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <T1_HandleUartReceive+0x344>)
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	2300      	movs	r3, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	f005 fa4f 	bl	8005e70 <xQueueGenericSend>
				break ;
 80009d2:	e078      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_GO_FWD :
					HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2102      	movs	r1, #2
 80009d8:	4847      	ldr	r0, [pc, #284]	; (8000af8 <T1_HandleUartReceive+0x348>)
 80009da:	f002 fa7b 	bl	8002ed4 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 80009de:	f107 010e 	add.w	r1, r7, #14
 80009e2:	2332      	movs	r3, #50	; 0x32
 80009e4:	2201      	movs	r2, #1
 80009e6:	483f      	ldr	r0, [pc, #252]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 80009e8:	f004 fbfa 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(speedInc_smphr) ;
 80009ec:	4b43      	ldr	r3, [pc, #268]	; (8000afc <T1_HandleUartReceive+0x34c>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	2300      	movs	r3, #0
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	f005 fa3b 	bl	8005e70 <xQueueGenericSend>
				break ;
 80009fa:	e064      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_BRAKE_BUTTON :
					HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2102      	movs	r1, #2
 8000a00:	483d      	ldr	r0, [pc, #244]	; (8000af8 <T1_HandleUartReceive+0x348>)
 8000a02:	f002 fa67 	bl	8002ed4 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000a06:	f107 010e 	add.w	r1, r7, #14
 8000a0a:	2332      	movs	r3, #50	; 0x32
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4835      	ldr	r0, [pc, #212]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000a10:	f004 fbe6 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(brake_smphr) ;
 8000a14:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <T1_HandleUartReceive+0x350>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f005 fa27 	bl	8005e70 <xQueueGenericSend>
				break ;
 8000a22:	e050      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_GO_RIGHT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000a24:	f107 010e 	add.w	r1, r7, #14
 8000a28:	2332      	movs	r3, #50	; 0x32
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000a2e:	f004 fbd7 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(goRight_smphr) ;
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <T1_HandleUartReceive+0x354>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f005 fa18 	bl	8005e70 <xQueueGenericSend>
				break ;
 8000a40:	e041      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_GO_LEFT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000a42:	f107 010e 	add.w	r1, r7, #14
 8000a46:	2332      	movs	r3, #50	; 0x32
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4826      	ldr	r0, [pc, #152]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000a4c:	f004 fbc8 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(goLeft_smphr) ;
 8000a50:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <T1_HandleUartReceive+0x358>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	2300      	movs	r3, #0
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f005 fa09 	bl	8005e70 <xQueueGenericSend>
				break ;
 8000a5e:	e032      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_BRAKE_ASSIST :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000a60:	f107 010e 	add.w	r1, r7, #14
 8000a64:	2332      	movs	r3, #50	; 0x32
 8000a66:	2201      	movs	r2, #1
 8000a68:	481e      	ldr	r0, [pc, #120]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000a6a:	f004 fbb9 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(assist_smphr) ;
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <T1_HandleUartReceive+0x35c>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	2300      	movs	r3, #0
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	f005 f9fa 	bl	8005e70 <xQueueGenericSend>
				break ;
 8000a7c:	e023      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_AUTO_PARKING_RIGHT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000a7e:	f107 010e 	add.w	r1, r7, #14
 8000a82:	2332      	movs	r3, #50	; 0x32
 8000a84:	2201      	movs	r2, #1
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000a88:	f004 fbaa 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(right_park_smphr) ;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <T1_HandleUartReceive+0x360>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	f005 f9eb 	bl	8005e70 <xQueueGenericSend>
				break ;
 8000a9a:	e014      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				case MSG_AUTO_PARKING_LEFT :
					HAL_UART_Transmit(&huart4 ,&data,1,50);
 8000a9c:	f107 010e 	add.w	r1, r7, #14
 8000aa0:	2332      	movs	r3, #50	; 0x32
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <T1_HandleUartReceive+0x334>)
 8000aa6:	f004 fb9b 	bl	80051e0 <HAL_UART_Transmit>
					xSemaphoreGive(left_park_smphr) ;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <T1_HandleUartReceive+0x364>)
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f005 f9dc 	bl	8005e70 <xQueueGenericSend>
				break ;
 8000ab8:	e005      	b.n	8000ac6 <T1_HandleUartReceive+0x316>

				default :
					HAL_GPIO_WritePin(LEDS_BACK_RED_BRAKE,GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2102      	movs	r1, #2
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <T1_HandleUartReceive+0x348>)
 8000ac0:	f002 fa08 	bl	8002ed4 <HAL_GPIO_WritePin>
				break ;
 8000ac4:	bf00      	nop

			}

		}

		vTaskDelay(50);
 8000ac6:	2032      	movs	r0, #50	; 0x32
 8000ac8:	f005 fe88 	bl	80067dc <vTaskDelay>
		if ((ENGINE_ENABLE==engine_state)&&(BREAK_ASSIST_ENABLE==assist_state))
 8000acc:	e676      	b.n	80007bc <T1_HandleUartReceive+0xc>
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000001 	.word	0x20000001
 8000ad8:	200000b0 	.word	0x200000b0
 8000adc:	200000b4 	.word	0x200000b4
 8000ae0:	20000004 	.word	0x20000004
 8000ae4:	200004d8 	.word	0x200004d8
 8000ae8:	20000086 	.word	0x20000086
 8000aec:	20000088 	.word	0x20000088
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	20000090 	.word	0x20000090
 8000af8:	40020400 	.word	0x40020400
 8000afc:	20000094 	.word	0x20000094
 8000b00:	20000098 	.word	0x20000098
 8000b04:	2000009c 	.word	0x2000009c
 8000b08:	200000a0 	.word	0x200000a0
 8000b0c:	200000a4 	.word	0x200000a4
 8000b10:	200000a8 	.word	0x200000a8
 8000b14:	200000ac 	.word	0x200000ac

08000b18 <T2_SignalsAction>:
	}
}


void T2_SignalsAction (void* pvarg)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	while(1)
	{

		switch (Current_state)
 8000b20:	4ba3      	ldr	r3, [pc, #652]	; (8000db0 <T2_SignalsAction+0x298>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	f200 813d 	bhi.w	8000da6 <T2_SignalsAction+0x28e>
 8000b2c:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <T2_SignalsAction+0x1c>)
 8000b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b32:	bf00      	nop
 8000b34:	08000b45 	.word	0x08000b45
 8000b38:	08000bcd 	.word	0x08000bcd
 8000b3c:	08000c45 	.word	0x08000c45
 8000b40:	08000cbd 	.word	0x08000cbd
			{
				case STATE_NORMAL :
					switch (transition)
 8000b44:	4b9b      	ldr	r3, [pc, #620]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	f200 8124 	bhi.w	8000d98 <T2_SignalsAction+0x280>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <T2_SignalsAction+0x40>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000bc5 	.word	0x08000bc5
 8000b5c:	08000b69 	.word	0x08000b69
 8000b60:	08000b8b 	.word	0x08000b8b
 8000b64:	08000bad 	.word	0x08000bad
					{
						case SIG_RIGHT :
							if (ENGINE_ENABLE==engine_state)
 8000b68:	4b93      	ldr	r3, [pc, #588]	; (8000db8 <T2_SignalsAction+0x2a0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d102      	bne.n	8000b78 <T2_SignalsAction+0x60>
							{
								Car_RightSignalFunc() ;
 8000b72:	f000 fb91 	bl	8001298 <Car_RightSignalFunc>
 8000b76:	e001      	b.n	8000b7c <T2_SignalsAction+0x64>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8000b78:	f000 fbd8 	bl	800132c <Car_IdleSignalFunc>
							}
							Current_state = STATE_RIGHT ;
 8000b7c:	4b8c      	ldr	r3, [pc, #560]	; (8000db0 <T2_SignalsAction+0x298>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000b82:	4b8c      	ldr	r3, [pc, #560]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
						break ;
 8000b88:	e01f      	b.n	8000bca <T2_SignalsAction+0xb2>

						case SIG_LEFT :
							if (ENGINE_ENABLE==engine_state)
 8000b8a:	4b8b      	ldr	r3, [pc, #556]	; (8000db8 <T2_SignalsAction+0x2a0>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <T2_SignalsAction+0x82>
							{
								Car_LeftSignalFunc() ;
 8000b94:	f000 fb92 	bl	80012bc <Car_LeftSignalFunc>
 8000b98:	e001      	b.n	8000b9e <T2_SignalsAction+0x86>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8000b9a:	f000 fbc7 	bl	800132c <Car_IdleSignalFunc>
							}

							Current_state = STATE_LEFT ;
 8000b9e:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <T2_SignalsAction+0x298>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000ba4:	4b83      	ldr	r3, [pc, #524]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
						break ;
 8000baa:	e00e      	b.n	8000bca <T2_SignalsAction+0xb2>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 8000bac:	f000 fb98 	bl	80012e0 <Car_WaitSignalFunc>
							Previous_state = STATE_NORMAL ;
 8000bb0:	4b82      	ldr	r3, [pc, #520]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
							Current_state = STATE_WAIT ;
 8000bb6:	4b7e      	ldr	r3, [pc, #504]	; (8000db0 <T2_SignalsAction+0x298>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000bbc:	4b7d      	ldr	r3, [pc, #500]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
						break ;
 8000bc2:	e002      	b.n	8000bca <T2_SignalsAction+0xb2>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8000bc4:	f000 fbc4 	bl	8001350 <Car_NoneSignalFunc>
						break ;
 8000bc8:	bf00      	nop
					}

					break ;
 8000bca:	e0e5      	b.n	8000d98 <T2_SignalsAction+0x280>

				case STATE_RIGHT :
					switch (transition)
 8000bcc:	4b79      	ldr	r3, [pc, #484]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	f200 80e2 	bhi.w	8000d9c <T2_SignalsAction+0x284>
 8000bd8:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <T2_SignalsAction+0xc8>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000c3d 	.word	0x08000c3d
 8000be4:	08000bf1 	.word	0x08000bf1
 8000be8:	08000c13 	.word	0x08000c13
 8000bec:	08000c25 	.word	0x08000c25
					{
						case SIG_RIGHT :
							if (ENGINE_ENABLE==engine_state)
 8000bf0:	4b71      	ldr	r3, [pc, #452]	; (8000db8 <T2_SignalsAction+0x2a0>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d102      	bne.n	8000c00 <T2_SignalsAction+0xe8>
							{
								Car_RightSignalFunc() ;
 8000bfa:	f000 fb4d 	bl	8001298 <Car_RightSignalFunc>
 8000bfe:	e001      	b.n	8000c04 <T2_SignalsAction+0xec>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8000c00:	f000 fb94 	bl	800132c <Car_IdleSignalFunc>
							}
							Current_state = STATE_RIGHT ;
 8000c04:	4b6a      	ldr	r3, [pc, #424]	; (8000db0 <T2_SignalsAction+0x298>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000c0a:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
						break ;
 8000c10:	e017      	b.n	8000c42 <T2_SignalsAction+0x12a>

						case SIG_LEFT :
							Car_IdleSignalFunc() ;
 8000c12:	f000 fb8b 	bl	800132c <Car_IdleSignalFunc>
							Current_state   = 	STATE_NORMAL ;
 8000c16:	4b66      	ldr	r3, [pc, #408]	; (8000db0 <T2_SignalsAction+0x298>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000c1c:	4b65      	ldr	r3, [pc, #404]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
						break ;
 8000c22:	e00e      	b.n	8000c42 <T2_SignalsAction+0x12a>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 8000c24:	f000 fb5c 	bl	80012e0 <Car_WaitSignalFunc>
							Previous_state = STATE_RIGHT ;
 8000c28:	4b64      	ldr	r3, [pc, #400]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
							Current_state   = 	STATE_WAIT ;
 8000c2e:	4b60      	ldr	r3, [pc, #384]	; (8000db0 <T2_SignalsAction+0x298>)
 8000c30:	2203      	movs	r2, #3
 8000c32:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000c34:	4b5f      	ldr	r3, [pc, #380]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
						break ;
 8000c3a:	e002      	b.n	8000c42 <T2_SignalsAction+0x12a>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8000c3c:	f000 fb88 	bl	8001350 <Car_NoneSignalFunc>
						break ;
 8000c40:	bf00      	nop
					}
					break ;
 8000c42:	e0ab      	b.n	8000d9c <T2_SignalsAction+0x284>

				case STATE_LEFT :
					switch (transition)
 8000c44:	4b5b      	ldr	r3, [pc, #364]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	f200 80a8 	bhi.w	8000da0 <T2_SignalsAction+0x288>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <T2_SignalsAction+0x140>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000cb5 	.word	0x08000cb5
 8000c5c:	08000c69 	.word	0x08000c69
 8000c60:	08000c7b 	.word	0x08000c7b
 8000c64:	08000c9d 	.word	0x08000c9d
					{
						case SIG_RIGHT :
							Car_IdleSignalFunc() ;
 8000c68:	f000 fb60 	bl	800132c <Car_IdleSignalFunc>
							Current_state   = 	STATE_NORMAL ;
 8000c6c:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <T2_SignalsAction+0x298>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000c72:	4b50      	ldr	r3, [pc, #320]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
						break ;
 8000c78:	e01f      	b.n	8000cba <T2_SignalsAction+0x1a2>

						case SIG_LEFT :
							if (ENGINE_ENABLE==engine_state)
 8000c7a:	4b4f      	ldr	r3, [pc, #316]	; (8000db8 <T2_SignalsAction+0x2a0>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <T2_SignalsAction+0x172>
							{
								Car_LeftSignalFunc() ;
 8000c84:	f000 fb1a 	bl	80012bc <Car_LeftSignalFunc>
 8000c88:	e001      	b.n	8000c8e <T2_SignalsAction+0x176>
							}
							else
							{
								Car_IdleSignalFunc() ;
 8000c8a:	f000 fb4f 	bl	800132c <Car_IdleSignalFunc>
							}
							Current_state = STATE_LEFT ;
 8000c8e:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <T2_SignalsAction+0x298>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000c94:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
						break ;
 8000c9a:	e00e      	b.n	8000cba <T2_SignalsAction+0x1a2>

						case SIG_W8 :
							Car_WaitSignalFunc() ;
 8000c9c:	f000 fb20 	bl	80012e0 <Car_WaitSignalFunc>
							Previous_state = STATE_LEFT ;
 8000ca0:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	701a      	strb	r2, [r3, #0]
							Current_state   = 	STATE_WAIT ;
 8000ca6:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <T2_SignalsAction+0x298>)
 8000ca8:	2203      	movs	r2, #3
 8000caa:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000cac:	4b41      	ldr	r3, [pc, #260]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
						break ;
 8000cb2:	e002      	b.n	8000cba <T2_SignalsAction+0x1a2>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8000cb4:	f000 fb4c 	bl	8001350 <Car_NoneSignalFunc>
						break ;
 8000cb8:	bf00      	nop
					}
					break ;
 8000cba:	e071      	b.n	8000da0 <T2_SignalsAction+0x288>

				case STATE_WAIT :
					switch (transition)
 8000cbc:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d86e      	bhi.n	8000da4 <T2_SignalsAction+0x28c>
 8000cc6:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <T2_SignalsAction+0x1b4>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000d91 	.word	0x08000d91
 8000cd0:	08000cdd 	.word	0x08000cdd
 8000cd4:	08000d03 	.word	0x08000d03
 8000cd8:	08000d29 	.word	0x08000d29
					{
						case SIG_RIGHT :
							if (STATE_LEFT==Previous_state)
 8000cdc:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d103      	bne.n	8000cee <T2_SignalsAction+0x1d6>
							{
								Previous_state = STATE_NORMAL ;
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e002      	b.n	8000cf4 <T2_SignalsAction+0x1dc>
							}
							else
							{
								Previous_state = STATE_RIGHT ;
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
							}
							Current_state = STATE_WAIT ;
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <T2_SignalsAction+0x298>)
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
						break ;
 8000d00:	e049      	b.n	8000d96 <T2_SignalsAction+0x27e>

						case SIG_LEFT :
							if (STATE_RIGHT==Previous_state)
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d103      	bne.n	8000d14 <T2_SignalsAction+0x1fc>
							{
								Previous_state = STATE_NORMAL ;
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e002      	b.n	8000d1a <T2_SignalsAction+0x202>
							}
							else
							{
								Previous_state = STATE_LEFT ;
 8000d14:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	701a      	strb	r2, [r3, #0]
							}

							Current_state = STATE_WAIT ;
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <T2_SignalsAction+0x298>)
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	701a      	strb	r2, [r3, #0]
							transition = SIG_NONE ;
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
						break ;
 8000d26:	e036      	b.n	8000d96 <T2_SignalsAction+0x27e>

						case SIG_W8 :
							if (STATE_NORMAL==Previous_state)
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <T2_SignalsAction+0x226>
							{
								Car_IdleSignalFunc() ;
 8000d32:	f000 fafb 	bl	800132c <Car_IdleSignalFunc>
								Current_state = STATE_NORMAL ;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <T2_SignalsAction+0x298>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e024      	b.n	8000d88 <T2_SignalsAction+0x270>
							}
							else if (STATE_RIGHT==Previous_state)
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d10d      	bne.n	8000d64 <T2_SignalsAction+0x24c>
							{
								if (ENGINE_ENABLE==engine_state)
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <T2_SignalsAction+0x2a0>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <T2_SignalsAction+0x240>
								{
									Car_RightSignalFunc() ;
 8000d52:	f000 faa1 	bl	8001298 <Car_RightSignalFunc>
 8000d56:	e001      	b.n	8000d5c <T2_SignalsAction+0x244>
								}
								else
								{
									Car_IdleSignalFunc() ;
 8000d58:	f000 fae8 	bl	800132c <Car_IdleSignalFunc>
								}
								Current_state = STATE_RIGHT ;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <T2_SignalsAction+0x298>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e011      	b.n	8000d88 <T2_SignalsAction+0x270>
							}
							else if (STATE_LEFT==Previous_state)
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <T2_SignalsAction+0x2a4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d10c      	bne.n	8000d88 <T2_SignalsAction+0x270>
							{
								if (ENGINE_ENABLE==engine_state)
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <T2_SignalsAction+0x2a0>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <T2_SignalsAction+0x266>
								{
									Car_LeftSignalFunc() ;
 8000d78:	f000 faa0 	bl	80012bc <Car_LeftSignalFunc>
 8000d7c:	e001      	b.n	8000d82 <T2_SignalsAction+0x26a>
								}
								else
								{
									Car_IdleSignalFunc() ;
 8000d7e:	f000 fad5 	bl	800132c <Car_IdleSignalFunc>
								}
								Current_state = STATE_LEFT ;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <T2_SignalsAction+0x298>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	701a      	strb	r2, [r3, #0]
							}
							transition = SIG_NONE ;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <T2_SignalsAction+0x29c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
						break ;
 8000d8e:	e002      	b.n	8000d96 <T2_SignalsAction+0x27e>

						case SIG_NONE :
							Car_NoneSignalFunc() ;
 8000d90:	f000 fade 	bl	8001350 <Car_NoneSignalFunc>
						break ;
 8000d94:	bf00      	nop
					}
					break ;
 8000d96:	e005      	b.n	8000da4 <T2_SignalsAction+0x28c>
					break ;
 8000d98:	bf00      	nop
 8000d9a:	e004      	b.n	8000da6 <T2_SignalsAction+0x28e>
					break ;
 8000d9c:	bf00      	nop
 8000d9e:	e002      	b.n	8000da6 <T2_SignalsAction+0x28e>
					break ;
 8000da0:	bf00      	nop
 8000da2:	e000      	b.n	8000da6 <T2_SignalsAction+0x28e>
					break ;
 8000da4:	bf00      	nop
			}

		vTaskDelay(250);
 8000da6:	20fa      	movs	r0, #250	; 0xfa
 8000da8:	f005 fd18 	bl	80067dc <vTaskDelay>
		switch (Current_state)
 8000dac:	e6b8      	b.n	8000b20 <T2_SignalsAction+0x8>
 8000dae:	bf00      	nop
 8000db0:	20000084 	.word	0x20000084
 8000db4:	20000086 	.word	0x20000086
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000085 	.word	0x20000085

08000dc0 <T3_WhiteFrontLightFlashing>:
	}

}

void T3_WhiteFrontLightFlashing (void* pvarg)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	flashing_t flash_state = FLASHING_DISABLE ;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
	while (1)
	{
		if (xSemaphoreTake(flashing_smphr,portMAX_DELAY))
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <T3_WhiteFrontLightFlashing+0x34>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 f949 	bl	800606c <xQueueSemaphoreTake>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <T3_WhiteFrontLightFlashing+0x28>
		{
			flash_state ^= 0x01 ;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	f083 0301 	eor.w	r3, r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
		}

		Car_FlashingFunc(flash_state) ;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 faf0 	bl	80013d0 <Car_FlashingFunc>
		if (xSemaphoreTake(flashing_smphr,portMAX_DELAY))
 8000df0:	e7ec      	b.n	8000dcc <T3_WhiteFrontLightFlashing+0xc>
 8000df2:	bf00      	nop
 8000df4:	20000088 	.word	0x20000088

08000df8 <T4_HornBeeping>:
	}
}

void T4_HornBeeping (void* pvarg)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

	horn_t horn_status = HORN_DISABLE ;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
	while (1)
	{
		if (xSemaphoreTake(horn_smphr,portMAX_DELAY))
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <T4_HornBeeping+0x34>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 f92d 	bl	800606c <xQueueSemaphoreTake>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <T4_HornBeeping+0x28>
		{
			horn_status ^= 0x01 ;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	f083 0301 	eor.w	r3, r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
		}

		Car_Horn_Func(horn_status) ;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fb2a 	bl	800147c <Car_Horn_Func>
		if (xSemaphoreTake(horn_smphr,portMAX_DELAY))
 8000e28:	e7ec      	b.n	8000e04 <T4_HornBeeping+0xc>
 8000e2a:	bf00      	nop
 8000e2c:	2000008c 	.word	0x2000008c

08000e30 <T5_ChangeGear>:

	}
}

void T5_ChangeGear (void *pvarg)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(Gear_smphr,portMAX_DELAY))
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <T5_ChangeGear+0x54>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 f913 	bl	800606c <xQueueSemaphoreTake>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f5      	beq.n	8000e38 <T5_ChangeGear+0x8>
		{
			if  (ENGINE_ENABLE==engine_state)
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <T5_ChangeGear+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f0      	bne.n	8000e38 <T5_ChangeGear+0x8>
			{

				gear_current ++ ;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <T5_ChangeGear+0x5c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <T5_ChangeGear+0x5c>)
 8000e62:	701a      	strb	r2, [r3, #0]

				if (GEAR_NONE==gear_current)
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <T5_ChangeGear+0x5c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d102      	bne.n	8000e74 <T5_ChangeGear+0x44>
				{
					gear_current = GEAR_N ;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <T5_ChangeGear+0x5c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
				}

				Car_Gear_Func (gear_current) ;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <T5_ChangeGear+0x5c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fac6 	bl	800140c <Car_Gear_Func>
		if (xSemaphoreTake(Gear_smphr,portMAX_DELAY))
 8000e80:	e7da      	b.n	8000e38 <T5_ChangeGear+0x8>
 8000e82:	bf00      	nop
 8000e84:	20000090 	.word	0x20000090
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	200000b0 	.word	0x200000b0

08000e90 <T6_IncSpeed>:

	}
}

void T6_IncSpeed (void *pvarg)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(speedInc_smphr,portMAX_DELAY))
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <T6_IncSpeed+0x80>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 f8e3 	bl	800606c <xQueueSemaphoreTake>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f5      	beq.n	8000e98 <T6_IncSpeed+0x8>
		{
			if  (ENGINE_ENABLE == engine_state)
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <T6_IncSpeed+0x84>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d127      	bne.n	8000f06 <T6_IncSpeed+0x76>
			{
				if (gear_current==GEAR_D)
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <T6_IncSpeed+0x88>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d102      	bne.n	8000ec6 <T6_IncSpeed+0x36>
				{
					HAL_DC_Motors_Forward() ;
 8000ec0:	f7ff fb24 	bl	800050c <HAL_DC_Motors_Forward>
 8000ec4:	e006      	b.n	8000ed4 <T6_IncSpeed+0x44>
				}
				else if (gear_current==GEAR_R)
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <T6_IncSpeed+0x88>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d101      	bne.n	8000ed4 <T6_IncSpeed+0x44>
				{
					HAL_DC_Motors_Backword() ;
 8000ed0:	f7ff fb2e 	bl	8000530 <HAL_DC_Motors_Backword>
				}
				Motor_Speed+= 5 ;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <T6_IncSpeed+0x8c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	3305      	adds	r3, #5
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <T6_IncSpeed+0x8c>)
 8000ee4:	701a      	strb	r2, [r3, #0]
				if (Motor_Speed>100)
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <T6_IncSpeed+0x8c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	2b64      	cmp	r3, #100	; 0x64
 8000eee:	dd02      	ble.n	8000ef6 <T6_IncSpeed+0x66>
				{
					Motor_Speed = 100 ;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <T6_IncSpeed+0x8c>)
 8000ef2:	2264      	movs	r2, #100	; 0x64
 8000ef4:	701a      	strb	r2, [r3, #0]
				}
				HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <T6_IncSpeed+0x8c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb4a 	bl	8000598 <HAL_DC_Motors_Set_Speed>
 8000f04:	e7c8      	b.n	8000e98 <T6_IncSpeed+0x8>
			}
			else
			{
				Motor_Speed = SPEED_INIT_VALUE ;
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <T6_IncSpeed+0x8c>)
 8000f08:	2237      	movs	r2, #55	; 0x37
 8000f0a:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(speedInc_smphr,portMAX_DELAY))
 8000f0c:	e7c4      	b.n	8000e98 <T6_IncSpeed+0x8>
 8000f0e:	bf00      	nop
 8000f10:	20000094 	.word	0x20000094
 8000f14:	20000000 	.word	0x20000000
 8000f18:	200000b0 	.word	0x200000b0
 8000f1c:	20000004 	.word	0x20000004

08000f20 <T7_BrakeWheel>:

	}
}

void T7_BrakeWheel (void *pvarg)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(brake_smphr,portMAX_DELAY))
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <T7_BrakeWheel+0x84>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 f89b 	bl	800606c <xQueueSemaphoreTake>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f5      	beq.n	8000f28 <T7_BrakeWheel+0x8>
		{
			if  (ENGINE_ENABLE==engine_state)
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <T7_BrakeWheel+0x88>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d129      	bne.n	8000f9a <T7_BrakeWheel+0x7a>
			{
				if (gear_current==GEAR_D)
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <T7_BrakeWheel+0x8c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d102      	bne.n	8000f56 <T7_BrakeWheel+0x36>
				{
					HAL_DC_Motors_Forward() ;
 8000f50:	f7ff fadc 	bl	800050c <HAL_DC_Motors_Forward>
 8000f54:	e006      	b.n	8000f64 <T7_BrakeWheel+0x44>
				}
				else if (gear_current==GEAR_R)
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <T7_BrakeWheel+0x8c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d101      	bne.n	8000f64 <T7_BrakeWheel+0x44>
				{
					HAL_DC_Motors_Backword() ;
 8000f60:	f7ff fae6 	bl	8000530 <HAL_DC_Motors_Backword>
				}
				Motor_Speed-= 5 ;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <T7_BrakeWheel+0x90>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3b05      	subs	r3, #5
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <T7_BrakeWheel+0x90>)
 8000f74:	701a      	strb	r2, [r3, #0]

				if (Motor_Speed<SPEED_INIT_VALUE)
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <T7_BrakeWheel+0x90>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	2b36      	cmp	r3, #54	; 0x36
 8000f7e:	dc04      	bgt.n	8000f8a <T7_BrakeWheel+0x6a>
				{
					Motor_Speed = SPEED_INIT_VALUE ;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <T7_BrakeWheel+0x90>)
 8000f82:	2237      	movs	r2, #55	; 0x37
 8000f84:	701a      	strb	r2, [r3, #0]
					HAL_DC_Motors_Stop() ;
 8000f86:	f7ff fae5 	bl	8000554 <HAL_DC_Motors_Stop>
				}

				HAL_DC_Motors_Set_Speed(Motor_Speed) ;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <T7_BrakeWheel+0x90>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb00 	bl	8000598 <HAL_DC_Motors_Set_Speed>
 8000f98:	e7c6      	b.n	8000f28 <T7_BrakeWheel+0x8>
			}
			else
			{
				Motor_Speed = SPEED_INIT_VALUE ;
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <T7_BrakeWheel+0x90>)
 8000f9c:	2237      	movs	r2, #55	; 0x37
 8000f9e:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(brake_smphr,portMAX_DELAY))
 8000fa0:	e7c2      	b.n	8000f28 <T7_BrakeWheel+0x8>
 8000fa2:	bf00      	nop
 8000fa4:	20000098 	.word	0x20000098
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	200000b0 	.word	0x200000b0
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <T8_CarMoveRight>:

	}
}

void T8_CarMoveRight (void *pvarg)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(goRight_smphr,portMAX_DELAY))
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <T8_CarMoveRight+0x4c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 f851 	bl	800606c <xQueueSemaphoreTake>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f5      	beq.n	8000fbc <T8_CarMoveRight+0x8>
		{
			servo_angle += 9 ;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <T8_CarMoveRight+0x50>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	3309      	adds	r3, #9
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	b25a      	sxtb	r2, r3
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <T8_CarMoveRight+0x50>)
 8000fe0:	701a      	strb	r2, [r3, #0]

			if (servo_angle>45)
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <T8_CarMoveRight+0x50>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	2b2d      	cmp	r3, #45	; 0x2d
 8000fea:	dd02      	ble.n	8000ff2 <T8_CarMoveRight+0x3e>
			{
				servo_angle = 45 ;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <T8_CarMoveRight+0x50>)
 8000fee:	222d      	movs	r2, #45	; 0x2d
 8000ff0:	701a      	strb	r2, [r3, #0]
			}

			HAL_ServoMotor_Set_Angel(servo_angle) ;
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <T8_CarMoveRight+0x50>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fae9 	bl	80005d0 <HAL_ServoMotor_Set_Angel>
		if (xSemaphoreTake(goRight_smphr,portMAX_DELAY))
 8000ffe:	e7dd      	b.n	8000fbc <T8_CarMoveRight+0x8>
 8001000:	2000009c 	.word	0x2000009c
 8001004:	200000b1 	.word	0x200000b1

08001008 <T9_CarMoveLeft>:

		}
	}
}
void T9_CarMoveLeft (void *pvarg)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(goLeft_smphr,portMAX_DELAY))
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <T9_CarMoveLeft+0x50>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	4618      	mov	r0, r3
 800101a:	f005 f827 	bl	800606c <xQueueSemaphoreTake>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f5      	beq.n	8001010 <T9_CarMoveLeft+0x8>
		{
			servo_angle -= 9 ;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <T9_CarMoveLeft+0x54>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3b09      	subs	r3, #9
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b25a      	sxtb	r2, r3
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <T9_CarMoveLeft+0x54>)
 8001034:	701a      	strb	r2, [r3, #0]

			if (servo_angle<-45)
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <T9_CarMoveLeft+0x54>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8001040:	da02      	bge.n	8001048 <T9_CarMoveLeft+0x40>
			{
				servo_angle = -45 ;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <T9_CarMoveLeft+0x54>)
 8001044:	22d3      	movs	r2, #211	; 0xd3
 8001046:	701a      	strb	r2, [r3, #0]
			}

			HAL_ServoMotor_Set_Angel(servo_angle) ;
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <T9_CarMoveLeft+0x54>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fabe 	bl	80005d0 <HAL_ServoMotor_Set_Angel>
		if (xSemaphoreTake(goLeft_smphr,portMAX_DELAY))
 8001054:	e7dc      	b.n	8001010 <T9_CarMoveLeft+0x8>
 8001056:	bf00      	nop
 8001058:	200000a0 	.word	0x200000a0
 800105c:	200000b1 	.word	0x200000b1

08001060 <T10_BreakAssistRun>:
		}
	}
}

void T10_BreakAssistRun (void *pvarg)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(brake_smphr,portMAX_DELAY))
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <T10_BreakAssistRun+0x30>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	4618      	mov	r0, r3
 8001072:	f004 fffb 	bl	800606c <xQueueSemaphoreTake>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f5      	beq.n	8001068 <T10_BreakAssistRun+0x8>
		{
			assist_state ^= 0x01 ;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <T10_BreakAssistRun+0x34>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f083 0301 	eor.w	r3, r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <T10_BreakAssistRun+0x34>)
 800108a:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(brake_smphr,portMAX_DELAY))
 800108c:	e7ec      	b.n	8001068 <T10_BreakAssistRun+0x8>
 800108e:	bf00      	nop
 8001090:	20000098 	.word	0x20000098
 8001094:	20000001 	.word	0x20000001

08001098 <T11_RightParkRun>:
		}
	}
}

void T11_RightParkRun (void *pvarg)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(right_park_smphr,portMAX_DELAY))
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <T11_RightParkRun+0x58>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 ffdf 	bl	800606c <xQueueSemaphoreTake>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f5      	beq.n	80010a0 <T11_RightParkRun+0x8>
		{
			if (LEFT_PARK_DISABLE == left_park_stat)
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <T11_RightParkRun+0x5c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d1f0      	bne.n	80010a0 <T11_RightParkRun+0x8>
			{
				right_park_stat ^= 0x01 ;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <T11_RightParkRun+0x60>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f083 0301 	eor.w	r3, r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <T11_RightParkRun+0x60>)
 80010cc:	701a      	strb	r2, [r3, #0]
				park_state ^= 0x01 ;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <T11_RightParkRun+0x64>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f083 0301 	eor.w	r3, r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <T11_RightParkRun+0x64>)
 80010dc:	701a      	strb	r2, [r3, #0]
				HAL_ServoMotor_Set_Angel(SERVO_INIT_ANGLE) ;
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fa76 	bl	80005d0 <HAL_ServoMotor_Set_Angel>
				HAL_DC_Motors_Forward() ;
 80010e4:	f7ff fa12 	bl	800050c <HAL_DC_Motors_Forward>
				HAL_DC_Motors_Set_Speed(SPEED_INIT_VALUE+7);
 80010e8:	203e      	movs	r0, #62	; 0x3e
 80010ea:	f7ff fa55 	bl	8000598 <HAL_DC_Motors_Set_Speed>
		if (xSemaphoreTake(right_park_smphr,portMAX_DELAY))
 80010ee:	e7d7      	b.n	80010a0 <T11_RightParkRun+0x8>
 80010f0:	200000a8 	.word	0x200000a8
 80010f4:	20000003 	.word	0x20000003
 80010f8:	20000002 	.word	0x20000002
 80010fc:	20000005 	.word	0x20000005

08001100 <T12_LeftParkRun>:
		}
	}
}

void T12_LeftParkRun (void *pvarg)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(left_park_smphr,portMAX_DELAY))
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <T12_LeftParkRun+0x54>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	4618      	mov	r0, r3
 8001112:	f004 ffab 	bl	800606c <xQueueSemaphoreTake>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f5      	beq.n	8001108 <T12_LeftParkRun+0x8>
		{
			if (RIGHT_PARK_DISABLE == right_park_stat)
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <T12_LeftParkRun+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d1f0      	bne.n	8001108 <T12_LeftParkRun+0x8>
			{
				left_park_stat ^= 0x01 ;
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <T12_LeftParkRun+0x5c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <T12_LeftParkRun+0x5c>)
 8001134:	701a      	strb	r2, [r3, #0]
				park_state ^= 0x01 ;
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <T12_LeftParkRun+0x60>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <T12_LeftParkRun+0x60>)
 8001144:	701a      	strb	r2, [r3, #0]
//				HAL_ServoMotor_Set_Angel(SERVO_INIT_ANGLE) ;

				HAL_DC_Motors_Forward() ;
 8001146:	f7ff f9e1 	bl	800050c <HAL_DC_Motors_Forward>
				HAL_DC_Motors_Set_Speed(SPEED_INIT_VALUE+7);
 800114a:	203e      	movs	r0, #62	; 0x3e
 800114c:	f7ff fa24 	bl	8000598 <HAL_DC_Motors_Set_Speed>
		if (xSemaphoreTake(left_park_smphr,portMAX_DELAY))
 8001150:	e7da      	b.n	8001108 <T12_LeftParkRun+0x8>
 8001152:	bf00      	nop
 8001154:	200000ac 	.word	0x200000ac
 8001158:	20000002 	.word	0x20000002
 800115c:	20000003 	.word	0x20000003
 8001160:	20000005 	.word	0x20000005

08001164 <T13_ParkAlgorithmRun>:

	}
}

void T13_ParkAlgorithmRun (void *pvarg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	static uint8_t servo_counter = 0 ;
	static uint8_t servo_vice_counter = 0 ;
	while (1)
	{

		if (park_state == PARK_ENABLE)
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <T13_ParkAlgorithmRun+0xd8>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d15d      	bne.n	8001232 <T13_ParkAlgorithmRun+0xce>
		{
			/* Right Park Procedure  */
			if (RIGHT_PARK_ENABLE==right_park_stat)
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <T13_ParkAlgorithmRun+0xdc>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d156      	bne.n	800122e <T13_ParkAlgorithmRun+0xca>
			{
				if (1==park_slot_flag)
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <T13_ParkAlgorithmRun+0xe0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d139      	bne.n	80011fc <T13_ParkAlgorithmRun+0x98>
				{
					servo_counter++ ;
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <T13_ParkAlgorithmRun+0xe4>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <T13_ParkAlgorithmRun+0xe4>)
 8001192:	701a      	strb	r2, [r3, #0]
					if (servo_counter<SERVO_COUNTER_TRIAL)
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <T13_ParkAlgorithmRun+0xe4>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d805      	bhi.n	80011a8 <T13_ParkAlgorithmRun+0x44>
					{
						HAL_DC_Motors_Backword() ;
 800119c:	f7ff f9c8 	bl	8000530 <HAL_DC_Motors_Backword>
						HAL_ServoMotor_Set_Angel(45);
 80011a0:	202d      	movs	r0, #45	; 0x2d
 80011a2:	f7ff fa15 	bl	80005d0 <HAL_ServoMotor_Set_Angel>
 80011a6:	e044      	b.n	8001232 <T13_ParkAlgorithmRun+0xce>
					}
					else
					{
						servo_vice_counter++ ;
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <T13_ParkAlgorithmRun+0xe8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <T13_ParkAlgorithmRun+0xe8>)
 80011b2:	701a      	strb	r2, [r3, #0]
						if ((servo_vice_counter>SERVO_VICE_COUNTER_TRIAL)||(Important_Buffer[USF] <10))
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <T13_ParkAlgorithmRun+0xe8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d804      	bhi.n	80011c6 <T13_ParkAlgorithmRun+0x62>
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <T13_ParkAlgorithmRun+0xec>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2b09      	cmp	r3, #9
 80011c4:	d813      	bhi.n	80011ee <T13_ParkAlgorithmRun+0x8a>
						{
							park_slot_flag = 0 ;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <T13_ParkAlgorithmRun+0xe0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
							right_park_stat ^= 0x01 ;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <T13_ParkAlgorithmRun+0xdc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f083 0301 	eor.w	r3, r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <T13_ParkAlgorithmRun+0xdc>)
 80011da:	701a      	strb	r2, [r3, #0]
							HAL_ServoMotor_Set_Angel(0) ;
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff f9f7 	bl	80005d0 <HAL_ServoMotor_Set_Angel>
							HAL_DC_Motors_Stop() ;
 80011e2:	f7ff f9b7 	bl	8000554 <HAL_DC_Motors_Stop>
							HAL_DC_Motors_Set_Speed(SPEED_INIT_VALUE) ;
 80011e6:	2037      	movs	r0, #55	; 0x37
 80011e8:	f7ff f9d6 	bl	8000598 <HAL_DC_Motors_Set_Speed>
 80011ec:	e021      	b.n	8001232 <T13_ParkAlgorithmRun+0xce>
						}
						else
						{
							HAL_DC_Motors_Forward() ;
 80011ee:	f7ff f98d 	bl	800050c <HAL_DC_Motors_Forward>
							HAL_ServoMotor_Set_Angel(-45);
 80011f2:	f06f 002c 	mvn.w	r0, #44	; 0x2c
 80011f6:	f7ff f9eb 	bl	80005d0 <HAL_ServoMotor_Set_Angel>
 80011fa:	e01a      	b.n	8001232 <T13_ParkAlgorithmRun+0xce>
						}

					}

				}
				else if (Important_Buffer[USF] >BREAK_ASSIST_MAXIMUM_ACCEPTED_DIST)
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <T13_ParkAlgorithmRun+0xec>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d910      	bls.n	8001228 <T13_ParkAlgorithmRun+0xc4>
				{
					HAL_DC_Motors_Set_Speed(SPEED_INIT_VALUE+7);
 8001206:	203e      	movs	r0, #62	; 0x3e
 8001208:	f7ff f9c6 	bl	8000598 <HAL_DC_Motors_Set_Speed>
					if ((Important_Buffer[USFR]>CAR_ACCEPTED_PARK_DIST_WIDTH)&&(Important_Buffer[USBR]>CAR_ACCEPTED_PARK_DIST_WIDTH))
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <T13_ParkAlgorithmRun+0xec>)
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	b29b      	uxth	r3, r3
 8001212:	2b23      	cmp	r3, #35	; 0x23
 8001214:	d90d      	bls.n	8001232 <T13_ParkAlgorithmRun+0xce>
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <T13_ParkAlgorithmRun+0xec>)
 8001218:	88db      	ldrh	r3, [r3, #6]
 800121a:	b29b      	uxth	r3, r3
 800121c:	2b23      	cmp	r3, #35	; 0x23
 800121e:	d908      	bls.n	8001232 <T13_ParkAlgorithmRun+0xce>
					{
						park_slot_flag = 1 ;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <T13_ParkAlgorithmRun+0xe0>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e004      	b.n	8001232 <T13_ParkAlgorithmRun+0xce>
					}
				}
				else
				{
					HAL_DC_Motors_Stop() ;
 8001228:	f7ff f994 	bl	8000554 <HAL_DC_Motors_Stop>
 800122c:	e001      	b.n	8001232 <T13_ParkAlgorithmRun+0xce>
			}



			/* Left Park Procedure  */
			else if (LEFT_PARK_ENABLE==left_park_stat)
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <T13_ParkAlgorithmRun+0xf0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
			{

			}
		}
		vTaskDelay(250);
 8001232:	20fa      	movs	r0, #250	; 0xfa
 8001234:	f005 fad2 	bl	80067dc <vTaskDelay>
		if (park_state == PARK_ENABLE)
 8001238:	e798      	b.n	800116c <T13_ParkAlgorithmRun+0x8>
 800123a:	bf00      	nop
 800123c:	20000005 	.word	0x20000005
 8001240:	20000002 	.word	0x20000002
 8001244:	200000c0 	.word	0x200000c0
 8001248:	200000c1 	.word	0x200000c1
 800124c:	200000c2 	.word	0x200000c2
 8001250:	200000b4 	.word	0x200000b4
 8001254:	20000003 	.word	0x20000003

08001258 <Car_EngineFunc>:



/*********************************** static function Implementation *********************************/
static void Car_EngineFunc(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	if (ENGINE_ENABLE==engine_state)
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <Car_EngineFunc+0x38>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <Car_EngineFunc+0x1c>
	{
		/* turn on engine indication led */
		HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	4809      	ldr	r0, [pc, #36]	; (8001294 <Car_EngineFunc+0x3c>)
 800126e:	f001 fe31 	bl	8002ed4 <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 8001272:	e00a      	b.n	800128a <Car_EngineFunc+0x32>
	else if (ENGINE_DISABLE==engine_state)
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <Car_EngineFunc+0x38>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d105      	bne.n	800128a <Car_EngineFunc+0x32>
		HAL_GPIO_WritePin(LEDS_START_ENGINE_PIN,GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <Car_EngineFunc+0x3c>)
 8001286:	f001 fe25 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	40020400 	.word	0x40020400

08001298 <Car_RightSignalFunc>:

static void Car_RightSignalFunc(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDS_YELLOW_RIGHT_SIDE) ;
 800129c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <Car_RightSignalFunc+0x20>)
 80012a2:	f001 fe30 	bl	8002f06 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <Car_RightSignalFunc+0x20>)
 80012ae:	f001 fe11 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020400 	.word	0x40020400

080012bc <Car_LeftSignalFunc>:

static void Car_LeftSignalFunc(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDS_YELLOW_LEFT_SIDE) ;
 80012c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <Car_LeftSignalFunc+0x20>)
 80012c6:	f001 fe1e 	bl	8002f06 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <Car_LeftSignalFunc+0x20>)
 80012d2:	f001 fdff 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40020400 	.word	0x40020400

080012e0 <Car_WaitSignalFunc>:

static void Car_WaitSignalFunc(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	if (0==sync_flag)
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <Car_WaitSignalFunc+0x44>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10e      	bne.n	800130c <Car_WaitSignalFunc+0x2c>
	{
		HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <Car_WaitSignalFunc+0x48>)
 80012f6:	f001 fded 	bl	8002ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <Car_WaitSignalFunc+0x48>)
 8001302:	f001 fde7 	bl	8002ed4 <HAL_GPIO_WritePin>
		sync_flag = 1 ;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <Car_WaitSignalFunc+0x44>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
	}
	/*Toggle Both Right and left signal leds */
	HAL_GPIO_TogglePin(LEDS_YELLOW_RIGHT_SIDE) ;
 800130c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <Car_WaitSignalFunc+0x48>)
 8001312:	f001 fdf8 	bl	8002f06 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDS_YELLOW_LEFT_SIDE) ;
 8001316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <Car_WaitSignalFunc+0x48>)
 800131c:	f001 fdf3 	bl	8002f06 <HAL_GPIO_TogglePin>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000087 	.word	0x20000087
 8001328:	40020400 	.word	0x40020400

0800132c <Car_IdleSignalFunc>:

static void Car_IdleSignalFunc(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	/*Turn off Right yellow signal leds*/
	HAL_GPIO_WritePin(LEDS_YELLOW_RIGHT_SIDE,GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <Car_IdleSignalFunc+0x20>)
 8001338:	f001 fdcc 	bl	8002ed4 <HAL_GPIO_WritePin>
	/*Turn on left yellow signal leds*/
	HAL_GPIO_WritePin(LEDS_YELLOW_LEFT_SIDE,GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001342:	4802      	ldr	r0, [pc, #8]	; (800134c <Car_IdleSignalFunc+0x20>)
 8001344:	f001 fdc6 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40020400 	.word	0x40020400

08001350 <Car_NoneSignalFunc>:

static void Car_NoneSignalFunc(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	switch (Current_state)
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <Car_NoneSignalFunc+0x74>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b03      	cmp	r3, #3
 800135c:	d82f      	bhi.n	80013be <Car_NoneSignalFunc+0x6e>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <Car_NoneSignalFunc+0x14>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001375 	.word	0x08001375
 8001368:	08001381 	.word	0x08001381
 800136c:	0800139d 	.word	0x0800139d
 8001370:	080013b9 	.word	0x080013b9
	{
		case STATE_NORMAL :
			Car_IdleSignalFunc() ;
 8001374:	f7ff ffda 	bl	800132c <Car_IdleSignalFunc>
			sync_flag = 0 ;
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <Car_NoneSignalFunc+0x78>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
		break ;
 800137e:	e01e      	b.n	80013be <Car_NoneSignalFunc+0x6e>

		case STATE_RIGHT :
			if (ENGINE_ENABLE==engine_state)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <Car_NoneSignalFunc+0x7c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <Car_NoneSignalFunc+0x40>
			{
				Car_RightSignalFunc() ;
 800138a:	f7ff ff85 	bl	8001298 <Car_RightSignalFunc>
 800138e:	e001      	b.n	8001394 <Car_NoneSignalFunc+0x44>
			}
			else
			{
				Car_IdleSignalFunc() ;
 8001390:	f7ff ffcc 	bl	800132c <Car_IdleSignalFunc>
			}
			sync_flag = 0 ;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <Car_NoneSignalFunc+0x78>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
		break ;
 800139a:	e010      	b.n	80013be <Car_NoneSignalFunc+0x6e>

		case SIG_LEFT :
			if (ENGINE_ENABLE==engine_state)
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <Car_NoneSignalFunc+0x7c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <Car_NoneSignalFunc+0x5c>
			{
				Car_LeftSignalFunc() ;
 80013a6:	f7ff ff89 	bl	80012bc <Car_LeftSignalFunc>
 80013aa:	e001      	b.n	80013b0 <Car_NoneSignalFunc+0x60>
			}
			else
			{
				Car_IdleSignalFunc() ;
 80013ac:	f7ff ffbe 	bl	800132c <Car_IdleSignalFunc>
			}
			sync_flag = 0 ;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <Car_NoneSignalFunc+0x78>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
		break ;
 80013b6:	e002      	b.n	80013be <Car_NoneSignalFunc+0x6e>

		case SIG_W8 :
			Car_WaitSignalFunc() ;
 80013b8:	f7ff ff92 	bl	80012e0 <Car_WaitSignalFunc>
		break ;
 80013bc:	bf00      	nop
	}
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000084 	.word	0x20000084
 80013c8:	20000087 	.word	0x20000087
 80013cc:	20000000 	.word	0x20000000

080013d0 <Car_FlashingFunc>:


static void Car_FlashingFunc (flashing_t state)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	if (FLASHING_DISABLE==state)
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <Car_FlashingFunc+0x1e>
	{
		HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING , GPIO_PIN_SET ) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e6:	4808      	ldr	r0, [pc, #32]	; (8001408 <Car_FlashingFunc+0x38>)
 80013e8:	f001 fd74 	bl	8002ed4 <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 80013ec:	e008      	b.n	8001400 <Car_FlashingFunc+0x30>
	else if(FLASHING_ENABLE==state)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <Car_FlashingFunc+0x30>
		HAL_GPIO_WritePin(LEDS_FRONT_WHITE_FLASHING , GPIO_PIN_RESET ) ;
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4803      	ldr	r0, [pc, #12]	; (8001408 <Car_FlashingFunc+0x38>)
 80013fc:	f001 fd6a 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40020400 	.word	0x40020400

0800140c <Car_Gear_Func>:


static void Car_Gear_Func (gear_t state)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	HAL_DC_Motors_Stop() ;
 8001416:	f7ff f89d 	bl	8000554 <HAL_DC_Motors_Stop>
	Motor_Speed = SPEED_INIT_VALUE ;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <Car_Gear_Func+0x68>)
 800141c:	2237      	movs	r2, #55	; 0x37
 800141e:	701a      	strb	r2, [r3, #0]
	switch (state)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d016      	beq.n	8001454 <Car_Gear_Func+0x48>
 8001426:	2b02      	cmp	r3, #2
 8001428:	dc1c      	bgt.n	8001464 <Car_Gear_Func+0x58>
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <Car_Gear_Func+0x28>
 800142e:	2b01      	cmp	r3, #1
 8001430:	d008      	beq.n	8001444 <Car_Gear_Func+0x38>
 8001432:	e017      	b.n	8001464 <Car_Gear_Func+0x58>
	{
		case GEAR_N :
			HAL_DC_Motors_Stop() ;
 8001434:	f7ff f88e 	bl	8000554 <HAL_DC_Motors_Stop>
			HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2101      	movs	r1, #1
 800143c:	480e      	ldr	r0, [pc, #56]	; (8001478 <Car_Gear_Func+0x6c>)
 800143e:	f001 fd49 	bl	8002ed4 <HAL_GPIO_WritePin>
		break ;
 8001442:	e012      	b.n	800146a <Car_Gear_Func+0x5e>

		case GEAR_D :
			HAL_DC_Motors_Forward() ;
 8001444:	f7ff f862 	bl	800050c <HAL_DC_Motors_Forward>
			HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2101      	movs	r1, #1
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <Car_Gear_Func+0x6c>)
 800144e:	f001 fd41 	bl	8002ed4 <HAL_GPIO_WritePin>
		break ;
 8001452:	e00a      	b.n	800146a <Car_Gear_Func+0x5e>

		case GEAR_R :
			HAL_DC_Motors_Backword() ;
 8001454:	f7ff f86c 	bl	8000530 <HAL_DC_Motors_Backword>
			HAL_GPIO_WritePin(LEDS_BACK_WHITE_PARK,GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2101      	movs	r1, #1
 800145c:	4806      	ldr	r0, [pc, #24]	; (8001478 <Car_Gear_Func+0x6c>)
 800145e:	f001 fd39 	bl	8002ed4 <HAL_GPIO_WritePin>
		break ;
 8001462:	e002      	b.n	800146a <Car_Gear_Func+0x5e>

		default :
			HAL_DC_Motors_Stop() ;
 8001464:	f7ff f876 	bl	8000554 <HAL_DC_Motors_Stop>
		break ;
 8001468:	bf00      	nop

	}
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000004 	.word	0x20000004
 8001478:	40020400 	.word	0x40020400

0800147c <Car_Horn_Func>:


static void Car_Horn_Func (horn_t state)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	if (HORN_DISABLE==state)
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <Car_Horn_Func+0x1c>
	{
		HAL_GPIO_WritePin(BUZZER_PIN , GPIO_PIN_SET ) ;
 800148c:	2201      	movs	r2, #1
 800148e:	2104      	movs	r1, #4
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <Car_Horn_Func+0x34>)
 8001492:	f001 fd1f 	bl	8002ed4 <HAL_GPIO_WritePin>
	}
	else
	{
		/* Nothing */
	}
}
 8001496:	e007      	b.n	80014a8 <Car_Horn_Func+0x2c>
	else if(HORN_ENABLE==state)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d104      	bne.n	80014a8 <Car_Horn_Func+0x2c>
		HAL_GPIO_WritePin(BUZZER_PIN , GPIO_PIN_RESET ) ;
 800149e:	2200      	movs	r2, #0
 80014a0:	2104      	movs	r1, #4
 80014a2:	4803      	ldr	r0, [pc, #12]	; (80014b0 <Car_Horn_Func+0x34>)
 80014a4:	f001 fd16 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40020400 	.word	0x40020400

080014b4 <HAL_TIM_IC_CaptureCallback>:


// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a92      	ldr	r2, [pc, #584]	; (800170c <HAL_TIM_IC_CaptureCallback+0x258>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	f040 814e 	bne.w	8001764 <HAL_TIM_IC_CaptureCallback+0x2b0>
		// This interrupt is from TIM1

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7f1b      	ldrb	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d14c      	bne.n	800156a <HAL_TIM_IC_CaptureCallback+0xb6>
		{
			g_edgeDetect++;
 80014d0:	4b8f      	ldr	r3, [pc, #572]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b8d      	ldr	r3, [pc, #564]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80014dc:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 80014de:	4b8c      	ldr	r3, [pc, #560]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d11c      	bne.n	8001522 <HAL_TIM_IC_CaptureCallback+0x6e>
			{
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 80014e8:	4b8a      	ldr	r3, [pc, #552]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24

				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80014f0:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6a1a      	ldr	r2, [r3, #32]
 80014f6:	4b87      	ldr	r3, [pc, #540]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020a 	bic.w	r2, r2, #10
 80014fe:	621a      	str	r2, [r3, #32]
 8001500:	4b84      	ldr	r3, [pc, #528]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a1a      	ldr	r2, [r3, #32]
 8001506:	4b83      	ldr	r3, [pc, #524]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0202 	orr.w	r2, r2, #2
 800150e:	621a      	str	r2, [r3, #32]

				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001510:	4b80      	ldr	r3, [pc, #512]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	4b7f      	ldr	r3, [pc, #508]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0202 	orr.w	r2, r2, #2
 800151e:	60da      	str	r2, [r3, #12]


			}
		}
	}
}
 8001520:	e1c5      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 8001522:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	f040 81c0 	bne.w	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);  // read second value
 800152e:	2100      	movs	r1, #0
 8001530:	4878      	ldr	r0, [pc, #480]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001532:	f003 f8cd 	bl	80046d0 <HAL_TIM_ReadCapturedValue>
 8001536:	4603      	mov	r3, r0
 8001538:	4a77      	ldr	r2, [pc, #476]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x264>)
 800153a:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800153c:	4b75      	ldr	r3, [pc, #468]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a1a      	ldr	r2, [r3, #32]
 8001542:	4b74      	ldr	r3, [pc, #464]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 020a 	bic.w	r2, r2, #10
 800154a:	621a      	str	r2, [r3, #32]
 800154c:	4b71      	ldr	r3, [pc, #452]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b70      	ldr	r3, [pc, #448]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a12      	ldr	r2, [r2, #32]
 8001556:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001558:	4b6e      	ldr	r3, [pc, #440]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	4b6d      	ldr	r3, [pc, #436]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0202 	bic.w	r2, r2, #2
 8001566:	60da      	str	r2, [r3, #12]
}
 8001568:	e1a1      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7f1b      	ldrb	r3, [r3, #28]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d14c      	bne.n	800160c <HAL_TIM_IC_CaptureCallback+0x158>
			g_edgeDetect++;
 8001572:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3301      	adds	r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b64      	ldr	r3, [pc, #400]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800157e:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8001580:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d11c      	bne.n	80015c4 <HAL_TIM_IC_CaptureCallback+0x110>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 800158a:	4b62      	ldr	r3, [pc, #392]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	4b5e      	ldr	r3, [pc, #376]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015a0:	621a      	str	r2, [r3, #32]
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	4b5a      	ldr	r3, [pc, #360]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0220 	orr.w	r2, r2, #32
 80015b0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 80015b2:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	4b56      	ldr	r3, [pc, #344]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0204 	orr.w	r2, r2, #4
 80015c0:	60da      	str	r2, [r3, #12]
}
 80015c2:	e174      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	f040 816f 	bne.w	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);  // read second value
 80015d0:	2104      	movs	r1, #4
 80015d2:	4850      	ldr	r0, [pc, #320]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015d4:	f003 f87c 	bl	80046d0 <HAL_TIM_ReadCapturedValue>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a4f      	ldr	r2, [pc, #316]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x264>)
 80015dc:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a1a      	ldr	r2, [r3, #32]
 80015e4:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015ec:	621a      	str	r2, [r3, #32]
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a12      	ldr	r2, [r2, #32]
 80015f8:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0204 	bic.w	r2, r2, #4
 8001608:	60da      	str	r2, [r3, #12]
}
 800160a:	e150      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7f1b      	ldrb	r3, [r3, #28]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d14c      	bne.n	80016ae <HAL_TIM_IC_CaptureCallback+0x1fa>
			g_edgeDetect++;
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3301      	adds	r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001620:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d11c      	bne.n	8001666 <HAL_TIM_IC_CaptureCallback+0x1b2>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6a1a      	ldr	r2, [r3, #32]
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001642:	621a      	str	r2, [r3, #32]
 8001644:	4b33      	ldr	r3, [pc, #204]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001652:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0208 	orr.w	r2, r2, #8
 8001662:	60da      	str	r2, [r3, #12]
}
 8001664:	e123      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	f040 811e 	bne.w	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);  // read second value
 8001672:	2108      	movs	r1, #8
 8001674:	4827      	ldr	r0, [pc, #156]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001676:	f003 f82b 	bl	80046d0 <HAL_TIM_ReadCapturedValue>
 800167a:	4603      	mov	r3, r0
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x264>)
 800167e:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a1a      	ldr	r2, [r3, #32]
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800168e:	621a      	str	r2, [r3, #32]
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a12      	ldr	r2, [r2, #32]
 800169a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0208 	bic.w	r2, r2, #8
 80016aa:	60da      	str	r2, [r3, #12]
}
 80016ac:	e0ff      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7f1b      	ldrb	r3, [r3, #28]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	f040 80fb 	bne.w	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
			g_edgeDetect++;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80016c4:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d125      	bne.n	800171c <HAL_TIM_IC_CaptureCallback+0x268>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80016e6:	621a      	str	r2, [r3, #32]
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6a1a      	ldr	r2, [r3, #32]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016f6:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0210 	orr.w	r2, r2, #16
 8001706:	60da      	str	r2, [r3, #12]
}
 8001708:	e0d1      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
 800170a:	bf00      	nop
 800170c:	40010000 	.word	0x40010000
 8001710:	200000c8 	.word	0x200000c8
 8001714:	200003b8 	.word	0x200003b8
 8001718:	200000c4 	.word	0x200000c4
			else if (g_edgeDetect==2)   // if the first is already captured
 800171c:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	f040 80c3 	bne.w	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);  // read second value
 8001728:	210c      	movs	r1, #12
 800172a:	4864      	ldr	r0, [pc, #400]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x408>)
 800172c:	f002 ffd0 	bl	80046d0 <HAL_TIM_ReadCapturedValue>
 8001730:	4603      	mov	r3, r0
 8001732:	4a63      	ldr	r2, [pc, #396]	; (80018c0 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8001734:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8001736:	4b61      	ldr	r3, [pc, #388]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x408>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x408>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001744:	621a      	str	r2, [r3, #32]
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x408>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x408>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a12      	ldr	r2, [r2, #32]
 8001750:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 8001752:	4b5a      	ldr	r3, [pc, #360]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x408>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4b58      	ldr	r3, [pc, #352]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x408>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0210 	bic.w	r2, r2, #16
 8001760:	60da      	str	r2, [r3, #12]
}
 8001762:	e0a4      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
	else if (htim->Instance == TIM2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176c:	f040 809f 	bne.w	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7f1b      	ldrb	r3, [r3, #28]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d14b      	bne.n	8001810 <HAL_TIM_IC_CaptureCallback+0x35c>
			g_edgeDetect++;
 8001778:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3301      	adds	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001784:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8001786:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d11c      	bne.n	80017ca <HAL_TIM_IC_CaptureCallback+0x316>
				__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001798:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 020a 	bic.w	r2, r2, #10
 80017a6:	621a      	str	r2, [r3, #32]
 80017a8:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a1a      	ldr	r2, [r3, #32]
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0202 	orr.w	r2, r2, #2
 80017b6:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0202 	orr.w	r2, r2, #2
 80017c6:	60da      	str	r2, [r3, #12]
}
 80017c8:	e071      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d16c      	bne.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);  // read second value
 80017d4:	2100      	movs	r1, #0
 80017d6:	483b      	ldr	r0, [pc, #236]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017d8:	f002 ff7a 	bl	80046d0 <HAL_TIM_ReadCapturedValue>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <HAL_TIM_IC_CaptureCallback+0x40c>)
 80017e0:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 020a 	bic.w	r2, r2, #10
 80017f0:	621a      	str	r2, [r3, #32]
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6a12      	ldr	r2, [r2, #32]
 80017fc:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0202 	bic.w	r2, r2, #2
 800180c:	60da      	str	r2, [r3, #12]
}
 800180e:	e04e      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7f1b      	ldrb	r3, [r3, #28]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d14a      	bne.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
			g_edgeDetect++;
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001824:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d11c      	bne.n	800186a <HAL_TIM_IC_CaptureCallback+0x3b6>
				__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001846:	621a      	str	r2, [r3, #32]
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a1a      	ldr	r2, [r3, #32]
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0220 	orr.w	r2, r2, #32
 8001856:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0204 	orr.w	r2, r2, #4
 8001866:	60da      	str	r2, [r3, #12]
}
 8001868:	e021      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_TIM_IC_CaptureCallback+0x404>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d11c      	bne.n	80018ae <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);  // read second value
 8001874:	2104      	movs	r1, #4
 8001876:	4813      	ldr	r0, [pc, #76]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001878:	f002 ff2a 	bl	80046d0 <HAL_TIM_ReadCapturedValue>
 800187c:	4603      	mov	r3, r0
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8001880:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001890:	621a      	str	r2, [r3, #32]
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6a12      	ldr	r2, [r2, #32]
 800189c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0204 	bic.w	r2, r2, #4
 80018ac:	60da      	str	r2, [r3, #12]
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000c8 	.word	0x200000c8
 80018bc:	200003b8 	.word	0x200003b8
 80018c0:	200000c4 	.word	0x200000c4
 80018c4:	20000400 	.word	0x20000400

080018c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80018d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <vApplicationGetIdleTaskMemory+0x30>)
 80018de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200000d0 	.word	0x200000d0
 80018f8:	20000170 	.word	0x20000170

080018fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018fc:	b5b0      	push	{r4, r5, r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_FREERTOS_Init+0x30>)
 8001904:	1d3c      	adds	r4, r7, #4
 8001906:	461d      	mov	r5, r3
 8001908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f004 f8d2 	bl	8005ac2 <osThreadCreate>
 800191e:	4603      	mov	r3, r0
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <MX_FREERTOS_Init+0x34>)
 8001922:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001924:	bf00      	nop
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bdb0      	pop	{r4, r5, r7, pc}
 800192c:	08007b7c 	.word	0x08007b7c
 8001930:	200000cc 	.word	0x200000cc

08001934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800193c:	2001      	movs	r0, #1
 800193e:	f004 f90c 	bl	8005b5a <osDelay>
 8001942:	e7fb      	b.n	800193c <StartDefaultTask+0x8>

08001944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <MX_GPIO_Init+0x13c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a47      	ldr	r2, [pc, #284]	; (8001a80 <MX_GPIO_Init+0x13c>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b45      	ldr	r3, [pc, #276]	; (8001a80 <MX_GPIO_Init+0x13c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <MX_GPIO_Init+0x13c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a40      	ldr	r2, [pc, #256]	; (8001a80 <MX_GPIO_Init+0x13c>)
 8001980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <MX_GPIO_Init+0x13c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <MX_GPIO_Init+0x13c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <MX_GPIO_Init+0x13c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <MX_GPIO_Init+0x13c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <MX_GPIO_Init+0x13c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <MX_GPIO_Init+0x13c>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <MX_GPIO_Init+0x13c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <MX_GPIO_Init+0x13c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a2b      	ldr	r2, [pc, #172]	; (8001a80 <MX_GPIO_Init+0x13c>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <MX_GPIO_Init+0x13c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019e6:	2200      	movs	r2, #0
 80019e8:	211f      	movs	r1, #31
 80019ea:	4826      	ldr	r0, [pc, #152]	; (8001a84 <MX_GPIO_Init+0x140>)
 80019ec:	f001 fa72 	bl	8002ed4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	21a0      	movs	r1, #160	; 0xa0
 80019f4:	4824      	ldr	r0, [pc, #144]	; (8001a88 <MX_GPIO_Init+0x144>)
 80019f6:	f001 fa6d 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80019fa:	2200      	movs	r2, #0
 80019fc:	f24f 3137 	movw	r1, #62263	; 0xf337
 8001a00:	4822      	ldr	r0, [pc, #136]	; (8001a8c <MX_GPIO_Init+0x148>)
 8001a02:	f001 fa67 	bl	8002ed4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4819      	ldr	r0, [pc, #100]	; (8001a84 <MX_GPIO_Init+0x140>)
 8001a1e:	f001 f8c5 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a22:	231f      	movs	r3, #31
 8001a24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4812      	ldr	r0, [pc, #72]	; (8001a84 <MX_GPIO_Init+0x140>)
 8001a3a:	f001 f8b7 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8001a3e:	23a0      	movs	r3, #160	; 0xa0
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_GPIO_Init+0x144>)
 8001a56:	f001 f8a9 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001a5a:	f24f 3337 	movw	r3, #62263	; 0xf337
 8001a5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_GPIO_Init+0x148>)
 8001a74:	f001 f89a 	bl	8002bac <HAL_GPIO_Init>

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400

08001a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a96:	f000 ff65 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9a:	f000 f8d1 	bl	8001c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9e:	f7ff ff51 	bl	8001944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001aa2:	f000 fd5b 	bl	800255c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001aa6:	f000 fa25 	bl	8001ef4 <MX_TIM1_Init>
  MX_UART4_Init();
 8001aaa:	f000 fd03 	bl	80024b4 <MX_UART4_Init>
  MX_TIM4_Init();
 8001aae:	f000 fb6d 	bl	800218c <MX_TIM4_Init>
  MX_TIM2_Init();
 8001ab2:	f000 fa97 	bl	8001fe4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ab6:	f000 faf3 	bl	80020a0 <MX_TIM3_Init>
  MX_UART5_Init();
 8001aba:	f000 fd25 	bl	8002508 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001abe:	f000 fd77 	bl	80025b0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001ac2:	f000 fd9f 	bl	8002604 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  RC_SystemInit() ;
 8001ac6:	f7fe fdd5 	bl	8000674 <RC_SystemInit>

  xTaskCreate(&T1_HandleUartReceive  		, "UART"     , 200 , NULL ,  15  , NULL    ) ;
 8001aca:	2300      	movs	r3, #0
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	230f      	movs	r3, #15
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	22c8      	movs	r2, #200	; 0xc8
 8001ad6:	4940      	ldr	r1, [pc, #256]	; (8001bd8 <main+0x148>)
 8001ad8:	4840      	ldr	r0, [pc, #256]	; (8001bdc <main+0x14c>)
 8001ada:	f004 fd32 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T2_SignalsAction				, "Signals"  , 200 , NULL ,  14  , NULL    ) ;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	230e      	movs	r3, #14
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	22c8      	movs	r2, #200	; 0xc8
 8001aea:	493d      	ldr	r1, [pc, #244]	; (8001be0 <main+0x150>)
 8001aec:	483d      	ldr	r0, [pc, #244]	; (8001be4 <main+0x154>)
 8001aee:	f004 fd28 	bl	8006542 <xTaskCreate>
  //xTaskCreate(&T14_GetUltrasonicRead		, "ReadSonic", 200 , NULL ,  13  , NULL    ) ;
  xTaskCreate(&T13_ParkAlgorithmRun			, "Algorithm", 200 , NULL ,  12  , NULL    ) ;
 8001af2:	2300      	movs	r3, #0
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	230c      	movs	r3, #12
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	22c8      	movs	r2, #200	; 0xc8
 8001afe:	493a      	ldr	r1, [pc, #232]	; (8001be8 <main+0x158>)
 8001b00:	483a      	ldr	r0, [pc, #232]	; (8001bec <main+0x15c>)
 8001b02:	f004 fd1e 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T10_BreakAssistRun			, "Assist"	 , 200 , NULL ,  11  , NULL    ) ;
 8001b06:	2300      	movs	r3, #0
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	230b      	movs	r3, #11
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	22c8      	movs	r2, #200	; 0xc8
 8001b12:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <main+0x160>)
 8001b14:	4837      	ldr	r0, [pc, #220]	; (8001bf4 <main+0x164>)
 8001b16:	f004 fd14 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T11_RightParkRun				, "RPark"	 , 200 , NULL ,  10  , NULL    ) ;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	230a      	movs	r3, #10
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2300      	movs	r3, #0
 8001b24:	22c8      	movs	r2, #200	; 0xc8
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <main+0x168>)
 8001b28:	4834      	ldr	r0, [pc, #208]	; (8001bfc <main+0x16c>)
 8001b2a:	f004 fd0a 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T12_LeftParkRun				, "LPark"	 , 200 , NULL ,  9   , NULL    ) ;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2309      	movs	r3, #9
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	22c8      	movs	r2, #200	; 0xc8
 8001b3a:	4931      	ldr	r1, [pc, #196]	; (8001c00 <main+0x170>)
 8001b3c:	4831      	ldr	r0, [pc, #196]	; (8001c04 <main+0x174>)
 8001b3e:	f004 fd00 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T3_WhiteFrontLightFlashing	, "flashing" , 200 , NULL ,  8   , NULL    ) ;
 8001b42:	2300      	movs	r3, #0
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2308      	movs	r3, #8
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	22c8      	movs	r2, #200	; 0xc8
 8001b4e:	492e      	ldr	r1, [pc, #184]	; (8001c08 <main+0x178>)
 8001b50:	482e      	ldr	r0, [pc, #184]	; (8001c0c <main+0x17c>)
 8001b52:	f004 fcf6 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T4_HornBeeping				, "Horn"	 , 200 , NULL ,  7   , NULL    ) ;
 8001b56:	2300      	movs	r3, #0
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	22c8      	movs	r2, #200	; 0xc8
 8001b62:	492b      	ldr	r1, [pc, #172]	; (8001c10 <main+0x180>)
 8001b64:	482b      	ldr	r0, [pc, #172]	; (8001c14 <main+0x184>)
 8001b66:	f004 fcec 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T5_ChangeGear				, "Gear"	 , 200 , NULL ,  6   , NULL    ) ;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	2306      	movs	r3, #6
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	22c8      	movs	r2, #200	; 0xc8
 8001b76:	4928      	ldr	r1, [pc, #160]	; (8001c18 <main+0x188>)
 8001b78:	4828      	ldr	r0, [pc, #160]	; (8001c1c <main+0x18c>)
 8001b7a:	f004 fce2 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T6_IncSpeed				    , "Inc"	 	 , 200 , NULL ,  5   , NULL    ) ;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	2305      	movs	r3, #5
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	22c8      	movs	r2, #200	; 0xc8
 8001b8a:	4925      	ldr	r1, [pc, #148]	; (8001c20 <main+0x190>)
 8001b8c:	4825      	ldr	r0, [pc, #148]	; (8001c24 <main+0x194>)
 8001b8e:	f004 fcd8 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T7_BrakeWheel				, "brake"	 , 200 , NULL ,  4   , NULL    ) ;
 8001b92:	2300      	movs	r3, #0
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	2304      	movs	r3, #4
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	22c8      	movs	r2, #200	; 0xc8
 8001b9e:	4922      	ldr	r1, [pc, #136]	; (8001c28 <main+0x198>)
 8001ba0:	4822      	ldr	r0, [pc, #136]	; (8001c2c <main+0x19c>)
 8001ba2:	f004 fcce 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T8_CarMoveRight				, "Right"	 , 200 , NULL ,  3   , NULL    ) ;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2303      	movs	r3, #3
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	22c8      	movs	r2, #200	; 0xc8
 8001bb2:	491f      	ldr	r1, [pc, #124]	; (8001c30 <main+0x1a0>)
 8001bb4:	481f      	ldr	r0, [pc, #124]	; (8001c34 <main+0x1a4>)
 8001bb6:	f004 fcc4 	bl	8006542 <xTaskCreate>
  xTaskCreate(&T9_CarMoveLeft				, "left"	 , 200 , NULL ,  2   , NULL    ) ;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	22c8      	movs	r2, #200	; 0xc8
 8001bc6:	491c      	ldr	r1, [pc, #112]	; (8001c38 <main+0x1a8>)
 8001bc8:	481c      	ldr	r0, [pc, #112]	; (8001c3c <main+0x1ac>)
 8001bca:	f004 fcba 	bl	8006542 <xTaskCreate>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001bce:	f7ff fe95 	bl	80018fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bd2:	f003 ff6f 	bl	8005ab4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <main+0x146>
 8001bd8:	08007b98 	.word	0x08007b98
 8001bdc:	080007b1 	.word	0x080007b1
 8001be0:	08007ba0 	.word	0x08007ba0
 8001be4:	08000b19 	.word	0x08000b19
 8001be8:	08007ba8 	.word	0x08007ba8
 8001bec:	08001165 	.word	0x08001165
 8001bf0:	08007bb4 	.word	0x08007bb4
 8001bf4:	08001061 	.word	0x08001061
 8001bf8:	08007bbc 	.word	0x08007bbc
 8001bfc:	08001099 	.word	0x08001099
 8001c00:	08007bc4 	.word	0x08007bc4
 8001c04:	08001101 	.word	0x08001101
 8001c08:	08007bcc 	.word	0x08007bcc
 8001c0c:	08000dc1 	.word	0x08000dc1
 8001c10:	08007bd8 	.word	0x08007bd8
 8001c14:	08000df9 	.word	0x08000df9
 8001c18:	08007be0 	.word	0x08007be0
 8001c1c:	08000e31 	.word	0x08000e31
 8001c20:	08007be8 	.word	0x08007be8
 8001c24:	08000e91 	.word	0x08000e91
 8001c28:	08007bec 	.word	0x08007bec
 8001c2c:	08000f21 	.word	0x08000f21
 8001c30:	08007bf4 	.word	0x08007bf4
 8001c34:	08000fb5 	.word	0x08000fb5
 8001c38:	08007bfc 	.word	0x08007bfc
 8001c3c:	08001009 	.word	0x08001009

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	; 0x50
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	2234      	movs	r2, #52	; 0x34
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f005 fe98 	bl	8007984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <SystemClock_Config+0xb4>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <SystemClock_Config+0xb4>)
 8001c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <SystemClock_Config+0xb4>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c80:	2300      	movs	r3, #0
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <SystemClock_Config+0xb8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <SystemClock_Config+0xb8>)
 8001c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <SystemClock_Config+0xb8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fcbe 	bl	8003634 <HAL_RCC_OscConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cbe:	f000 f82f 	bl	8001d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 f92d 	bl	8002f3c <HAL_RCC_ClockConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001ce8:	f000 f81a 	bl	8001d20 <Error_Handler>
  }
}
 8001cec:	bf00      	nop
 8001cee:	3750      	adds	r7, #80	; 0x50
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000

08001cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d0e:	f000 fe4b 	bl	80029a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40002000 	.word	0x40002000

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <Error_Handler+0x8>
	...

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_MspInit+0x54>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <HAL_MspInit+0x54>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_MspInit+0x54>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_MspInit+0x54>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_MspInit+0x54>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_MspInit+0x54>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	f06f 0001 	mvn.w	r0, #1
 8001d72:	f000 fef1 	bl	8002b58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <HAL_InitTick+0xe4>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a32      	ldr	r2, [pc, #200]	; (8001e68 <HAL_InitTick+0xe4>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_InitTick+0xe4>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db0:	f107 0210 	add.w	r2, r7, #16
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 f9d8 	bl	8003170 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dca:	f001 f9a9 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8001dce:	6378      	str	r0, [r7, #52]	; 0x34
 8001dd0:	e004      	b.n	8001ddc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dd2:	f001 f9a5 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_InitTick+0xe8>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	0c9b      	lsrs	r3, r3, #18
 8001de6:	3b01      	subs	r3, #1
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_InitTick+0xec>)
 8001dec:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_InitTick+0xf0>)
 8001dee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <HAL_InitTick+0xec>)
 8001df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_InitTick+0xec>)
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_InitTick+0xec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_InitTick+0xec>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_InitTick+0xec>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001e10:	4817      	ldr	r0, [pc, #92]	; (8001e70 <HAL_InitTick+0xec>)
 8001e12:	f001 fead 	bl	8003b70 <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11b      	bne.n	8001e5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001e24:	4812      	ldr	r0, [pc, #72]	; (8001e70 <HAL_InitTick+0xec>)
 8001e26:	f001 ff5b 	bl	8003ce0 <HAL_TIM_Base_Start_IT>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d111      	bne.n	8001e5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001e38:	202d      	movs	r0, #45	; 0x2d
 8001e3a:	f000 fea9 	bl	8002b90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d808      	bhi.n	8001e56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	202d      	movs	r0, #45	; 0x2d
 8001e4a:	f000 fe85 	bl	8002b58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_InitTick+0xf4>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e002      	b.n	8001e5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3738      	adds	r7, #56	; 0x38
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	20000370 	.word	0x20000370
 8001e74:	40002000 	.word	0x40002000
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	e7fe      	b.n	8001e80 <NMI_Handler+0x4>

08001e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <MemManage_Handler+0x4>

08001e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIM1_CC_IRQHandler+0x10>)
 8001eae:	f002 f8f8 	bl	80040a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200003b8 	.word	0x200003b8

08001ebc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001ec2:	f002 f8ee 	bl	80040a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000370 	.word	0x20000370

08001ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <SystemInit+0x20>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <SystemInit+0x20>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f10:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f12:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <MX_TIM1_Init+0xec>)
 8001f14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f18:	2208      	movs	r2, #8
 8001f1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f3c:	4827      	ldr	r0, [pc, #156]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f3e:	f002 f861 	bl	8004004 <HAL_TIM_IC_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f48:	f7ff feea 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4820      	ldr	r0, [pc, #128]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f5c:	f003 f860 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001f66:	f7ff fedb 	bl	8001d20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4816      	ldr	r0, [pc, #88]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f82:	f002 f97e 	bl	8004282 <HAL_TIM_IC_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001f8c:	f7ff fec8 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f90:	463b      	mov	r3, r7
 8001f92:	2204      	movs	r2, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4811      	ldr	r0, [pc, #68]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001f98:	f002 f973 	bl	8004282 <HAL_TIM_IC_ConfigChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8001fa2:	f7ff febd 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2208      	movs	r2, #8
 8001faa:	4619      	mov	r1, r3
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001fae:	f002 f968 	bl	8004282 <HAL_TIM_IC_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001fb8:	f7ff feb2 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <MX_TIM1_Init+0xe8>)
 8001fc4:	f002 f95d 	bl	8004282 <HAL_TIM_IC_ConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001fce:	f7ff fea7 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200003b8 	.word	0x200003b8
 8001fe0:	40010000 	.word	0x40010000

08001fe4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <MX_TIM2_Init+0xb8>)
 8002002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8002008:	4b24      	ldr	r3, [pc, #144]	; (800209c <MX_TIM2_Init+0xb8>)
 800200a:	2208      	movs	r2, #8
 800200c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <MX_TIM2_Init+0xb8>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65434;
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <MX_TIM2_Init+0xb8>)
 8002016:	f64f 729a 	movw	r2, #65434	; 0xff9a
 800201a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_TIM2_Init+0xb8>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <MX_TIM2_Init+0xb8>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002028:	481c      	ldr	r0, [pc, #112]	; (800209c <MX_TIM2_Init+0xb8>)
 800202a:	f001 ffeb 	bl	8004004 <HAL_TIM_IC_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002034:	f7ff fe74 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	4815      	ldr	r0, [pc, #84]	; (800209c <MX_TIM2_Init+0xb8>)
 8002048:	f002 ffea 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002052:	f7ff fe65 	bl	8001d20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800205a:	2301      	movs	r3, #1
 800205c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002066:	463b      	mov	r3, r7
 8002068:	2200      	movs	r2, #0
 800206a:	4619      	mov	r1, r3
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <MX_TIM2_Init+0xb8>)
 800206e:	f002 f908 	bl	8004282 <HAL_TIM_IC_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002078:	f7ff fe52 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800207c:	463b      	mov	r3, r7
 800207e:	2204      	movs	r2, #4
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <MX_TIM2_Init+0xb8>)
 8002084:	f002 f8fd 	bl	8004282 <HAL_TIM_IC_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800208e:	f7ff fe47 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000400 	.word	0x20000400

080020a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	; 0x38
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]
 80020ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <MX_TIM3_Init+0xe4>)
 80020d2:	4a2d      	ldr	r2, [pc, #180]	; (8002188 <MX_TIM3_Init+0xe8>)
 80020d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 80020d6:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <MX_TIM3_Init+0xe4>)
 80020d8:	2208      	movs	r2, #8
 80020da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <MX_TIM3_Init+0xe4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <MX_TIM3_Init+0xe4>)
 80020e4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <MX_TIM3_Init+0xe4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <MX_TIM3_Init+0xe4>)
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020f6:	4823      	ldr	r0, [pc, #140]	; (8002184 <MX_TIM3_Init+0xe4>)
 80020f8:	f001 fd3a 	bl	8003b70 <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002102:	f7ff fe0d 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002110:	4619      	mov	r1, r3
 8002112:	481c      	ldr	r0, [pc, #112]	; (8002184 <MX_TIM3_Init+0xe4>)
 8002114:	f002 fa14 	bl	8004540 <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800211e:	f7ff fdff 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002122:	4818      	ldr	r0, [pc, #96]	; (8002184 <MX_TIM3_Init+0xe4>)
 8002124:	f001 fe4c 	bl	8003dc0 <HAL_TIM_PWM_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800212e:	f7ff fdf7 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800213a:	f107 0320 	add.w	r3, r7, #32
 800213e:	4619      	mov	r1, r3
 8002140:	4810      	ldr	r0, [pc, #64]	; (8002184 <MX_TIM3_Init+0xe4>)
 8002142:	f002 ff6d 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800214c:	f7ff fde8 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002150:	2360      	movs	r3, #96	; 0x60
 8002152:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2200      	movs	r2, #0
 8002164:	4619      	mov	r1, r3
 8002166:	4807      	ldr	r0, [pc, #28]	; (8002184 <MX_TIM3_Init+0xe4>)
 8002168:	f002 f928 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002172:	f7ff fdd5 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <MX_TIM3_Init+0xe4>)
 8002178:	f000 f93a 	bl	80023f0 <HAL_TIM_MspPostInit>

}
 800217c:	bf00      	nop
 800217e:	3738      	adds	r7, #56	; 0x38
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000448 	.word	0x20000448
 8002188:	40000400 	.word	0x40000400

0800218c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	615a      	str	r2, [r3, #20]
 80021ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021bc:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <MX_TIM4_Init+0xe4>)
 80021be:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <MX_TIM4_Init+0xe8>)
 80021c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <MX_TIM4_Init+0xe4>)
 80021c4:	2204      	movs	r2, #4
 80021c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	4b29      	ldr	r3, [pc, #164]	; (8002270 <MX_TIM4_Init+0xe4>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <MX_TIM4_Init+0xe4>)
 80021d0:	2264      	movs	r2, #100	; 0x64
 80021d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <MX_TIM4_Init+0xe4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <MX_TIM4_Init+0xe4>)
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021e0:	4823      	ldr	r0, [pc, #140]	; (8002270 <MX_TIM4_Init+0xe4>)
 80021e2:	f001 fcc5 	bl	8003b70 <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80021ec:	f7ff fd98 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fa:	4619      	mov	r1, r3
 80021fc:	481c      	ldr	r0, [pc, #112]	; (8002270 <MX_TIM4_Init+0xe4>)
 80021fe:	f002 f99f 	bl	8004540 <HAL_TIM_ConfigClockSource>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002208:	f7ff fd8a 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800220c:	4818      	ldr	r0, [pc, #96]	; (8002270 <MX_TIM4_Init+0xe4>)
 800220e:	f001 fdd7 	bl	8003dc0 <HAL_TIM_PWM_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002218:	f7ff fd82 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4619      	mov	r1, r3
 800222a:	4811      	ldr	r0, [pc, #68]	; (8002270 <MX_TIM4_Init+0xe4>)
 800222c:	f002 fef8 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002236:	f7ff fd73 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223a:	2360      	movs	r3, #96	; 0x60
 800223c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	4807      	ldr	r0, [pc, #28]	; (8002270 <MX_TIM4_Init+0xe4>)
 8002252:	f002 f8b3 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800225c:	f7ff fd60 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <MX_TIM4_Init+0xe4>)
 8002262:	f000 f8c5 	bl	80023f0 <HAL_TIM_MspPostInit>

}
 8002266:	bf00      	nop
 8002268:	3738      	adds	r7, #56	; 0x38
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000490 	.word	0x20000490
 8002274:	40000800 	.word	0x40000800

08002278 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a37      	ldr	r2, [pc, #220]	; (8002374 <HAL_TIM_IC_MspInit+0xfc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d135      	bne.n	8002306 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a35      	ldr	r2, [pc, #212]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b33      	ldr	r3, [pc, #204]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a2e      	ldr	r2, [pc, #184]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80022d2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	4823      	ldr	r0, [pc, #140]	; (800237c <HAL_TIM_IC_MspInit+0x104>)
 80022f0:	f000 fc5c 	bl	8002bac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2105      	movs	r1, #5
 80022f8:	201b      	movs	r0, #27
 80022fa:	f000 fc2d 	bl	8002b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022fe:	201b      	movs	r0, #27
 8002300:	f000 fc46 	bl	8002b90 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002304:	e031      	b.n	800236a <HAL_TIM_IC_MspInit+0xf2>
  else if(tim_icHandle->Instance==TIM2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230e:	d12c      	bne.n	800236a <HAL_TIM_IC_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6313      	str	r3, [r2, #48]	; 0x30
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_TIM_IC_MspInit+0x100>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002348:	f248 0302 	movw	r3, #32770	; 0x8002
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800235a:	2301      	movs	r3, #1
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <HAL_TIM_IC_MspInit+0x104>)
 8002366:	f000 fc21 	bl	8002bac <HAL_GPIO_Init>
}
 800236a:	bf00      	nop
 800236c:	3730      	adds	r7, #48	; 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000

08002380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a15      	ldr	r2, [pc, #84]	; (80023e4 <HAL_TIM_Base_MspInit+0x64>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10e      	bne.n	80023b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_TIM_Base_MspInit+0x68>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_TIM_Base_MspInit+0x68>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_TIM_Base_MspInit+0x68>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023ae:	e012      	b.n	80023d6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <HAL_TIM_Base_MspInit+0x6c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10d      	bne.n	80023d6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_TIM_Base_MspInit+0x68>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_TIM_Base_MspInit+0x68>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_TIM_Base_MspInit+0x68>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40000800 	.word	0x40000800

080023f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_TIM_MspPostInit+0xb0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d11e      	bne.n	8002450 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_TIM_MspPostInit+0xb4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_TIM_MspPostInit+0xb4>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_TIM_MspPostInit+0xb4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800242e:	2340      	movs	r3, #64	; 0x40
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800243e:	2302      	movs	r3, #2
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	4817      	ldr	r0, [pc, #92]	; (80024a8 <HAL_TIM_MspPostInit+0xb8>)
 800244a:	f000 fbaf 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800244e:	e022      	b.n	8002496 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a15      	ldr	r2, [pc, #84]	; (80024ac <HAL_TIM_MspPostInit+0xbc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d11d      	bne.n	8002496 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_TIM_MspPostInit+0xb4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_TIM_MspPostInit+0xb4>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_TIM_MspPostInit+0xb4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002476:	2340      	movs	r3, #64	; 0x40
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002486:	2302      	movs	r3, #2
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4807      	ldr	r0, [pc, #28]	; (80024b0 <HAL_TIM_MspPostInit+0xc0>)
 8002492:	f000 fb8b 	bl	8002bac <HAL_GPIO_Init>
}
 8002496:	bf00      	nop
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40000800 	.word	0x40000800
 80024b0:	40020400 	.word	0x40020400

080024b4 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_UART4_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <MX_UART4_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_UART4_Init+0x4c>)
 80024c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_UART4_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_UART4_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_UART4_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_UART4_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_UART4_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_UART4_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_UART4_Init+0x4c>)
 80024ec:	f002 fe28 	bl	8005140 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80024f6:	f7ff fc13 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200004d8 	.word	0x200004d8
 8002504:	40004c00 	.word	0x40004c00

08002508 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_UART5_Init+0x4c>)
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <MX_UART5_Init+0x50>)
 8002510:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <MX_UART5_Init+0x4c>)
 8002514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002518:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_UART5_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_UART5_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MX_UART5_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_UART5_Init+0x4c>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <MX_UART5_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_UART5_Init+0x4c>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_UART5_Init+0x4c>)
 8002540:	f002 fdfe 	bl	8005140 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800254a:	f7ff fbe9 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000520 	.word	0x20000520
 8002558:	40005000 	.word	0x40005000

0800255c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800256c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002594:	f002 fdd4 	bl	8005140 <HAL_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800259e:	f7ff fbbf 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000568 	.word	0x20000568
 80025ac:	40004400 	.word	0x40004400

080025b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <MX_USART3_UART_Init+0x50>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_USART3_UART_Init+0x4c>)
 80025e8:	f002 fdaa 	bl	8005140 <HAL_UART_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025f2:	f7ff fb95 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200005b0 	.word	0x200005b0
 8002600:	40004800 	.word	0x40004800

08002604 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <MX_USART6_UART_Init+0x50>)
 800260c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART6_UART_Init+0x4c>)
 800263c:	f002 fd80 	bl	8005140 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002646:	f7ff fb6b 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200005f8 	.word	0x200005f8
 8002654:	40011400 	.word	0x40011400

08002658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b094      	sub	sp, #80	; 0x50
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a9c      	ldr	r2, [pc, #624]	; (80028e8 <HAL_UART_MspInit+0x290>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d12d      	bne.n	80026d6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	63bb      	str	r3, [r7, #56]	; 0x38
 800267e:	4b9b      	ldr	r3, [pc, #620]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a9a      	ldr	r2, [pc, #616]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b98      	ldr	r3, [pc, #608]	; (80028ec <HAL_UART_MspInit+0x294>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
 800269a:	4b94      	ldr	r3, [pc, #592]	; (80028ec <HAL_UART_MspInit+0x294>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a93      	ldr	r2, [pc, #588]	; (80028ec <HAL_UART_MspInit+0x294>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b91      	ldr	r3, [pc, #580]	; (80028ec <HAL_UART_MspInit+0x294>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026c4:	2308      	movs	r3, #8
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026cc:	4619      	mov	r1, r3
 80026ce:	4888      	ldr	r0, [pc, #544]	; (80028f0 <HAL_UART_MspInit+0x298>)
 80026d0:	f000 fa6c 	bl	8002bac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80026d4:	e104      	b.n	80028e0 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==UART5)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a86      	ldr	r2, [pc, #536]	; (80028f4 <HAL_UART_MspInit+0x29c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d14b      	bne.n	8002778 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
 80026e4:	4b81      	ldr	r3, [pc, #516]	; (80028ec <HAL_UART_MspInit+0x294>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	4a80      	ldr	r2, [pc, #512]	; (80028ec <HAL_UART_MspInit+0x294>)
 80026ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ee:	6413      	str	r3, [r2, #64]	; 0x40
 80026f0:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <HAL_UART_MspInit+0x294>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002700:	4b7a      	ldr	r3, [pc, #488]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a79      	ldr	r2, [pc, #484]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b77      	ldr	r3, [pc, #476]	; (80028ec <HAL_UART_MspInit+0x294>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
 800271c:	4b73      	ldr	r3, [pc, #460]	; (80028ec <HAL_UART_MspInit+0x294>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	4a72      	ldr	r2, [pc, #456]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	6313      	str	r3, [r2, #48]	; 0x30
 8002728:	4b70      	ldr	r3, [pc, #448]	; (80028ec <HAL_UART_MspInit+0x294>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002746:	2308      	movs	r3, #8
 8002748:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800274e:	4619      	mov	r1, r3
 8002750:	4867      	ldr	r0, [pc, #412]	; (80028f0 <HAL_UART_MspInit+0x298>)
 8002752:	f000 fa2b 	bl	8002bac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002756:	2304      	movs	r3, #4
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002766:	2308      	movs	r3, #8
 8002768:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800276e:	4619      	mov	r1, r3
 8002770:	4861      	ldr	r0, [pc, #388]	; (80028f8 <HAL_UART_MspInit+0x2a0>)
 8002772:	f000 fa1b 	bl	8002bac <HAL_GPIO_Init>
}
 8002776:	e0b3      	b.n	80028e0 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a5f      	ldr	r2, [pc, #380]	; (80028fc <HAL_UART_MspInit+0x2a4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d12c      	bne.n	80027dc <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a58      	ldr	r2, [pc, #352]	; (80028ec <HAL_UART_MspInit+0x294>)
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	4b52      	ldr	r3, [pc, #328]	; (80028ec <HAL_UART_MspInit+0x294>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a51      	ldr	r2, [pc, #324]	; (80028ec <HAL_UART_MspInit+0x294>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_UART_MspInit+0x294>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ba:	230c      	movs	r3, #12
 80027bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ca:	2307      	movs	r3, #7
 80027cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027d2:	4619      	mov	r1, r3
 80027d4:	484a      	ldr	r0, [pc, #296]	; (8002900 <HAL_UART_MspInit+0x2a8>)
 80027d6:	f000 f9e9 	bl	8002bac <HAL_GPIO_Init>
}
 80027da:	e081      	b.n	80028e0 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a48      	ldr	r2, [pc, #288]	; (8002904 <HAL_UART_MspInit+0x2ac>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d14b      	bne.n	800287e <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	4b40      	ldr	r3, [pc, #256]	; (80028ec <HAL_UART_MspInit+0x294>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a3f      	ldr	r2, [pc, #252]	; (80028ec <HAL_UART_MspInit+0x294>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_UART_MspInit+0x294>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a38      	ldr	r2, [pc, #224]	; (80028ec <HAL_UART_MspInit+0x294>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a31      	ldr	r2, [pc, #196]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800283a:	2320      	movs	r3, #32
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800284a:	2307      	movs	r3, #7
 800284c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002852:	4619      	mov	r1, r3
 8002854:	4826      	ldr	r0, [pc, #152]	; (80028f0 <HAL_UART_MspInit+0x298>)
 8002856:	f000 f9a9 	bl	8002bac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800285a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002868:	2303      	movs	r3, #3
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800286c:	2307      	movs	r3, #7
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002870:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002874:	4619      	mov	r1, r3
 8002876:	4824      	ldr	r0, [pc, #144]	; (8002908 <HAL_UART_MspInit+0x2b0>)
 8002878:	f000 f998 	bl	8002bac <HAL_GPIO_Init>
}
 800287c:	e030      	b.n	80028e0 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART6)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_UART_MspInit+0x2b4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d12b      	bne.n	80028e0 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_UART_MspInit+0x294>)
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	4a16      	ldr	r2, [pc, #88]	; (80028ec <HAL_UART_MspInit+0x294>)
 8002892:	f043 0320 	orr.w	r3, r3, #32
 8002896:	6453      	str	r3, [r2, #68]	; 0x44
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_UART_MspInit+0x294>)
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_UART_MspInit+0x294>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_UART_MspInit+0x294>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	6313      	str	r3, [r2, #48]	; 0x30
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_UART_MspInit+0x294>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028c0:	23c0      	movs	r3, #192	; 0xc0
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028d0:	2308      	movs	r3, #8
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028d8:	4619      	mov	r1, r3
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <HAL_UART_MspInit+0x298>)
 80028dc:	f000 f966 	bl	8002bac <HAL_GPIO_Init>
}
 80028e0:	bf00      	nop
 80028e2:	3750      	adds	r7, #80	; 0x50
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40004c00 	.word	0x40004c00
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40005000 	.word	0x40005000
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40004400 	.word	0x40004400
 8002900:	40020000 	.word	0x40020000
 8002904:	40004800 	.word	0x40004800
 8002908:	40020400 	.word	0x40020400
 800290c:	40011400 	.word	0x40011400

08002910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002948 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002914:	f7ff fadc 	bl	8001ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002918:	480c      	ldr	r0, [pc, #48]	; (800294c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800291a:	490d      	ldr	r1, [pc, #52]	; (8002950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002930:	4c0a      	ldr	r4, [pc, #40]	; (800295c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800293e:	f005 f87f 	bl	8007a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002942:	f7ff f8a5 	bl	8001a90 <main>
  bx  lr    
 8002946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002954:	08007c34 	.word	0x08007c34
  ldr r2, =_sbss
 8002958:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800295c:	20004574 	.word	0x20004574

08002960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_Init+0x40>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_Init+0x40>)
 800297a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_Init+0x40>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 f8d8 	bl	8002b42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	200f      	movs	r0, #15
 8002994:	f7ff f9f6 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff f9c8 	bl	8001d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_IncTick+0x20>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_IncTick+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_IncTick+0x24>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000010 	.word	0x20000010
 80029cc:	20000640 	.word	0x20000640

080029d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return uwTick;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_GetTick+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000640 	.word	0x20000640

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ff4c 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b6a:	f7ff ff61 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002b6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	6978      	ldr	r0, [r7, #20]
 8002b76:	f7ff ffb1 	bl	8002adc <NVIC_EncodePriority>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff80 	bl	8002a88 <__NVIC_SetPriority>
}
 8002b88:	bf00      	nop
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff54 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e165      	b.n	8002e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f040 8154 	bne.w	8002e8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d005      	beq.n	8002bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d130      	bne.n	8002c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 0201 	and.w	r2, r3, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d017      	beq.n	8002c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d123      	bne.n	8002cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	08da      	lsrs	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3208      	adds	r2, #8
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	08da      	lsrs	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3208      	adds	r2, #8
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0203 	and.w	r2, r3, #3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80ae 	beq.w	8002e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <HAL_GPIO_Init+0x300>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	; (8002eac <HAL_GPIO_Init+0x300>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b5a      	ldr	r3, [pc, #360]	; (8002eac <HAL_GPIO_Init+0x300>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4e:	4a58      	ldr	r2, [pc, #352]	; (8002eb0 <HAL_GPIO_Init+0x304>)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	; (8002eb4 <HAL_GPIO_Init+0x308>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d025      	beq.n	8002dc6 <HAL_GPIO_Init+0x21a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4e      	ldr	r2, [pc, #312]	; (8002eb8 <HAL_GPIO_Init+0x30c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01f      	beq.n	8002dc2 <HAL_GPIO_Init+0x216>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4d      	ldr	r2, [pc, #308]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d019      	beq.n	8002dbe <HAL_GPIO_Init+0x212>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4c      	ldr	r2, [pc, #304]	; (8002ec0 <HAL_GPIO_Init+0x314>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_GPIO_Init+0x20e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	; (8002ec4 <HAL_GPIO_Init+0x318>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00d      	beq.n	8002db6 <HAL_GPIO_Init+0x20a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4a      	ldr	r2, [pc, #296]	; (8002ec8 <HAL_GPIO_Init+0x31c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <HAL_GPIO_Init+0x206>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a49      	ldr	r2, [pc, #292]	; (8002ecc <HAL_GPIO_Init+0x320>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_GPIO_Init+0x202>
 8002daa:	2306      	movs	r3, #6
 8002dac:	e00c      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00a      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd8:	4935      	ldr	r1, [pc, #212]	; (8002eb0 <HAL_GPIO_Init+0x304>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de6:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0a:	4a31      	ldr	r2, [pc, #196]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3a:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e88:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	f67f ae96 	bls.w	8002bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40021400 	.word	0x40021400
 8002ecc:	40021800 	.word	0x40021800
 8002ed0:	40013c00 	.word	0x40013c00

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f18:	887a      	ldrh	r2, [r7, #2]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	041a      	lsls	r2, r3, #16
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	400b      	ands	r3, r1
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0cc      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b68      	ldr	r3, [pc, #416]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d90c      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b59      	ldr	r3, [pc, #356]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	494d      	ldr	r1, [pc, #308]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d044      	beq.n	800305c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d119      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d003      	beq.n	8002ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e067      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4934      	ldr	r1, [pc, #208]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7ff fcd0 	bl	80029d0 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7ff fccc 	bl	80029d0 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e04f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 020c 	and.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d1eb      	bne.n	8003034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d20c      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e032      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4916      	ldr	r1, [pc, #88]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f887 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fe4e 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023c00 	.word	0x40023c00
 80030f8:	40023800 	.word	0x40023800
 80030fc:	08007c0c 	.word	0x08007c0c
 8003100:	20000008 	.word	0x20000008
 8003104:	2000000c 	.word	0x2000000c

08003108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <HAL_RCC_GetHCLKFreq+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000008 	.word	0x20000008

08003120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003124:	f7ff fff0 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	0a9b      	lsrs	r3, r3, #10
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4903      	ldr	r1, [pc, #12]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800313c:	4618      	mov	r0, r3
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40023800 	.word	0x40023800
 8003144:	08007c1c 	.word	0x08007c1c

08003148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800314c:	f7ff ffdc 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0b5b      	lsrs	r3, r3, #13
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4903      	ldr	r1, [pc, #12]	; (800316c <HAL_RCC_GetPCLK2Freq+0x24>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	08007c1c 	.word	0x08007c1c

08003170 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	220f      	movs	r2, #15
 800317e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0203 	and.w	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_RCC_GetClockConfig+0x60>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 020f 	and.w	r2, r3, #15
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	601a      	str	r2, [r3, #0]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b0ae      	sub	sp, #184	; 0xb8
 80031da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fa:	4bcb      	ldr	r3, [pc, #812]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b0c      	cmp	r3, #12
 8003204:	f200 8206 	bhi.w	8003614 <HAL_RCC_GetSysClockFreq+0x440>
 8003208:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <HAL_RCC_GetSysClockFreq+0x3c>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003245 	.word	0x08003245
 8003214:	08003615 	.word	0x08003615
 8003218:	08003615 	.word	0x08003615
 800321c:	08003615 	.word	0x08003615
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003615 	.word	0x08003615
 8003228:	08003615 	.word	0x08003615
 800322c:	08003615 	.word	0x08003615
 8003230:	08003255 	.word	0x08003255
 8003234:	08003615 	.word	0x08003615
 8003238:	08003615 	.word	0x08003615
 800323c:	08003615 	.word	0x08003615
 8003240:	08003445 	.word	0x08003445
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4bb9      	ldr	r3, [pc, #740]	; (800352c <HAL_RCC_GetSysClockFreq+0x358>)
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800324a:	e1e7      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800324c:	4bb8      	ldr	r3, [pc, #736]	; (8003530 <HAL_RCC_GetSysClockFreq+0x35c>)
 800324e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003252:	e1e3      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003254:	4bb4      	ldr	r3, [pc, #720]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800325c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003260:	4bb1      	ldr	r3, [pc, #708]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d071      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326c:	4bae      	ldr	r3, [pc, #696]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003278:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800327c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800328e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003292:	4622      	mov	r2, r4
 8003294:	462b      	mov	r3, r5
 8003296:	f04f 0000 	mov.w	r0, #0
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	0159      	lsls	r1, r3, #5
 80032a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a4:	0150      	lsls	r0, r2, #5
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4621      	mov	r1, r4
 80032ac:	1a51      	subs	r1, r2, r1
 80032ae:	6439      	str	r1, [r7, #64]	; 0x40
 80032b0:	4629      	mov	r1, r5
 80032b2:	eb63 0301 	sbc.w	r3, r3, r1
 80032b6:	647b      	str	r3, [r7, #68]	; 0x44
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80032c4:	4649      	mov	r1, r9
 80032c6:	018b      	lsls	r3, r1, #6
 80032c8:	4641      	mov	r1, r8
 80032ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ce:	4641      	mov	r1, r8
 80032d0:	018a      	lsls	r2, r1, #6
 80032d2:	4641      	mov	r1, r8
 80032d4:	1a51      	subs	r1, r2, r1
 80032d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80032d8:	4649      	mov	r1, r9
 80032da:	eb63 0301 	sbc.w	r3, r3, r1
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80032ec:	4649      	mov	r1, r9
 80032ee:	00cb      	lsls	r3, r1, #3
 80032f0:	4641      	mov	r1, r8
 80032f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f6:	4641      	mov	r1, r8
 80032f8:	00ca      	lsls	r2, r1, #3
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	4622      	mov	r2, r4
 8003302:	189b      	adds	r3, r3, r2
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
 8003306:	462b      	mov	r3, r5
 8003308:	460a      	mov	r2, r1
 800330a:	eb42 0303 	adc.w	r3, r2, r3
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800331c:	4629      	mov	r1, r5
 800331e:	024b      	lsls	r3, r1, #9
 8003320:	4621      	mov	r1, r4
 8003322:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003326:	4621      	mov	r1, r4
 8003328:	024a      	lsls	r2, r1, #9
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003332:	2200      	movs	r2, #0
 8003334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800333c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003340:	f7fc ff66 	bl	8000210 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800334e:	e067      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003350:	4b75      	ldr	r3, [pc, #468]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	2200      	movs	r2, #0
 8003358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800335c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003368:	67bb      	str	r3, [r7, #120]	; 0x78
 800336a:	2300      	movs	r3, #0
 800336c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800336e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003372:	4622      	mov	r2, r4
 8003374:	462b      	mov	r3, r5
 8003376:	f04f 0000 	mov.w	r0, #0
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	0159      	lsls	r1, r3, #5
 8003380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003384:	0150      	lsls	r0, r2, #5
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4621      	mov	r1, r4
 800338c:	1a51      	subs	r1, r2, r1
 800338e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003390:	4629      	mov	r1, r5
 8003392:	eb63 0301 	sbc.w	r3, r3, r1
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80033a4:	4649      	mov	r1, r9
 80033a6:	018b      	lsls	r3, r1, #6
 80033a8:	4641      	mov	r1, r8
 80033aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ae:	4641      	mov	r1, r8
 80033b0:	018a      	lsls	r2, r1, #6
 80033b2:	4641      	mov	r1, r8
 80033b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80033b8:	4649      	mov	r1, r9
 80033ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033d2:	4692      	mov	sl, r2
 80033d4:	469b      	mov	fp, r3
 80033d6:	4623      	mov	r3, r4
 80033d8:	eb1a 0303 	adds.w	r3, sl, r3
 80033dc:	623b      	str	r3, [r7, #32]
 80033de:	462b      	mov	r3, r5
 80033e0:	eb4b 0303 	adc.w	r3, fp, r3
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033f2:	4629      	mov	r1, r5
 80033f4:	028b      	lsls	r3, r1, #10
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033fc:	4621      	mov	r1, r4
 80033fe:	028a      	lsls	r2, r1, #10
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003408:	2200      	movs	r2, #0
 800340a:	673b      	str	r3, [r7, #112]	; 0x70
 800340c:	677a      	str	r2, [r7, #116]	; 0x74
 800340e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003412:	f7fc fefd 	bl	8000210 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4613      	mov	r3, r2
 800341c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003420:	4b41      	ldr	r3, [pc, #260]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003442:	e0eb      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003444:	4b38      	ldr	r3, [pc, #224]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800344c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003450:	4b35      	ldr	r3, [pc, #212]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d06b      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345c:	4b32      	ldr	r3, [pc, #200]	; (8003528 <HAL_RCC_GetSysClockFreq+0x354>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	2200      	movs	r2, #0
 8003464:	66bb      	str	r3, [r7, #104]	; 0x68
 8003466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	663b      	str	r3, [r7, #96]	; 0x60
 8003470:	2300      	movs	r3, #0
 8003472:	667b      	str	r3, [r7, #100]	; 0x64
 8003474:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003478:	4622      	mov	r2, r4
 800347a:	462b      	mov	r3, r5
 800347c:	f04f 0000 	mov.w	r0, #0
 8003480:	f04f 0100 	mov.w	r1, #0
 8003484:	0159      	lsls	r1, r3, #5
 8003486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800348a:	0150      	lsls	r0, r2, #5
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4621      	mov	r1, r4
 8003492:	1a51      	subs	r1, r2, r1
 8003494:	61b9      	str	r1, [r7, #24]
 8003496:	4629      	mov	r1, r5
 8003498:	eb63 0301 	sbc.w	r3, r3, r1
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034aa:	4659      	mov	r1, fp
 80034ac:	018b      	lsls	r3, r1, #6
 80034ae:	4651      	mov	r1, sl
 80034b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034b4:	4651      	mov	r1, sl
 80034b6:	018a      	lsls	r2, r1, #6
 80034b8:	4651      	mov	r1, sl
 80034ba:	ebb2 0801 	subs.w	r8, r2, r1
 80034be:	4659      	mov	r1, fp
 80034c0:	eb63 0901 	sbc.w	r9, r3, r1
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d8:	4690      	mov	r8, r2
 80034da:	4699      	mov	r9, r3
 80034dc:	4623      	mov	r3, r4
 80034de:	eb18 0303 	adds.w	r3, r8, r3
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	462b      	mov	r3, r5
 80034e6:	eb49 0303 	adc.w	r3, r9, r3
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034f8:	4629      	mov	r1, r5
 80034fa:	024b      	lsls	r3, r1, #9
 80034fc:	4621      	mov	r1, r4
 80034fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003502:	4621      	mov	r1, r4
 8003504:	024a      	lsls	r2, r1, #9
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800350e:	2200      	movs	r2, #0
 8003510:	65bb      	str	r3, [r7, #88]	; 0x58
 8003512:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003514:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003518:	f7fc fe7a 	bl	8000210 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003526:	e065      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x420>
 8003528:	40023800 	.word	0x40023800
 800352c:	00f42400 	.word	0x00f42400
 8003530:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003534:	4b3d      	ldr	r3, [pc, #244]	; (800362c <HAL_RCC_GetSysClockFreq+0x458>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	2200      	movs	r2, #0
 800353c:	4618      	mov	r0, r3
 800353e:	4611      	mov	r1, r2
 8003540:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003544:	653b      	str	r3, [r7, #80]	; 0x50
 8003546:	2300      	movs	r3, #0
 8003548:	657b      	str	r3, [r7, #84]	; 0x54
 800354a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800354e:	4642      	mov	r2, r8
 8003550:	464b      	mov	r3, r9
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	0159      	lsls	r1, r3, #5
 800355c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003560:	0150      	lsls	r0, r2, #5
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4641      	mov	r1, r8
 8003568:	1a51      	subs	r1, r2, r1
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	4649      	mov	r1, r9
 800356e:	eb63 0301 	sbc.w	r3, r3, r1
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003580:	4659      	mov	r1, fp
 8003582:	018b      	lsls	r3, r1, #6
 8003584:	4651      	mov	r1, sl
 8003586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358a:	4651      	mov	r1, sl
 800358c:	018a      	lsls	r2, r1, #6
 800358e:	4651      	mov	r1, sl
 8003590:	1a54      	subs	r4, r2, r1
 8003592:	4659      	mov	r1, fp
 8003594:	eb63 0501 	sbc.w	r5, r3, r1
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	00eb      	lsls	r3, r5, #3
 80035a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a6:	00e2      	lsls	r2, r4, #3
 80035a8:	4614      	mov	r4, r2
 80035aa:	461d      	mov	r5, r3
 80035ac:	4643      	mov	r3, r8
 80035ae:	18e3      	adds	r3, r4, r3
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	464b      	mov	r3, r9
 80035b4:	eb45 0303 	adc.w	r3, r5, r3
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c6:	4629      	mov	r1, r5
 80035c8:	028b      	lsls	r3, r1, #10
 80035ca:	4621      	mov	r1, r4
 80035cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d0:	4621      	mov	r1, r4
 80035d2:	028a      	lsls	r2, r1, #10
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035dc:	2200      	movs	r2, #0
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035e6:	f7fc fe13 	bl	8000210 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4613      	mov	r3, r2
 80035f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035f4:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_RCC_GetSysClockFreq+0x458>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0f1b      	lsrs	r3, r3, #28
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003612:	e003      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800361a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003620:	4618      	mov	r0, r3
 8003622:	37b8      	adds	r7, #184	; 0xb8
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	00f42400 	.word	0x00f42400

08003634 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e28d      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8083 	beq.w	800375a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003654:	4b94      	ldr	r3, [pc, #592]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b04      	cmp	r3, #4
 800365e:	d019      	beq.n	8003694 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003660:	4b91      	ldr	r3, [pc, #580]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003668:	2b08      	cmp	r3, #8
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800366c:	4b8e      	ldr	r3, [pc, #568]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003678:	d00c      	beq.n	8003694 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b8b      	ldr	r3, [pc, #556]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d112      	bne.n	80036ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003686:	4b88      	ldr	r3, [pc, #544]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003692:	d10b      	bne.n	80036ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	4b84      	ldr	r3, [pc, #528]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05b      	beq.n	8003758 <HAL_RCC_OscConfig+0x124>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d157      	bne.n	8003758 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e25a      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d106      	bne.n	80036c4 <HAL_RCC_OscConfig+0x90>
 80036b6:	4b7c      	ldr	r3, [pc, #496]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7b      	ldr	r2, [pc, #492]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01d      	b.n	8003700 <HAL_RCC_OscConfig+0xcc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0xb4>
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a75      	ldr	r2, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a72      	ldr	r2, [pc, #456]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0xcc>
 80036e8:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6e      	ldr	r2, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6b      	ldr	r2, [pc, #428]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7ff f962 	bl	80029d0 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003710:	f7ff f95e 	bl	80029d0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e21f      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0xdc>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7ff f94e 	bl	80029d0 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003738:	f7ff f94a 	bl	80029d0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e20b      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x104>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d06f      	beq.n	8003846 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003766:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b00      	cmp	r3, #0
 8003770:	d017      	beq.n	80037a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003772:	4b4d      	ldr	r3, [pc, #308]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800377a:	2b08      	cmp	r3, #8
 800377c:	d105      	bne.n	800378a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800377e:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d11c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003796:	4b44      	ldr	r3, [pc, #272]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x186>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e1d3      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4937      	ldr	r1, [pc, #220]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	e03a      	b.n	8003846 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HAL_RCC_OscConfig+0x278>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7ff f8f7 	bl	80029d0 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e6:	f7ff f8f3 	bl	80029d0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e1b4      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003804:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4925      	ldr	r1, [pc, #148]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381a:	4b24      	ldr	r3, [pc, #144]	; (80038ac <HAL_RCC_OscConfig+0x278>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7ff f8d6 	bl	80029d0 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003828:	f7ff f8d2 	bl	80029d0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e193      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d036      	beq.n	80038c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <HAL_RCC_OscConfig+0x27c>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7ff f8b6 	bl	80029d0 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003868:	f7ff f8b2 	bl	80029d0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e173      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_OscConfig+0x274>)
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x234>
 8003886:	e01b      	b.n	80038c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_RCC_OscConfig+0x27c>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7ff f89f 	bl	80029d0 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	e00e      	b.n	80038b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003896:	f7ff f89b 	bl	80029d0 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d907      	bls.n	80038b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e15c      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	42470000 	.word	0x42470000
 80038b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	4b8a      	ldr	r3, [pc, #552]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ea      	bne.n	8003896 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8097 	beq.w	80039fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d2:	4b83      	ldr	r3, [pc, #524]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	4b7f      	ldr	r3, [pc, #508]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4a7e      	ldr	r2, [pc, #504]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ec:	6413      	str	r3, [r2, #64]	; 0x40
 80038ee:	4b7c      	ldr	r3, [pc, #496]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fe:	4b79      	ldr	r3, [pc, #484]	; (8003ae4 <HAL_RCC_OscConfig+0x4b0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d118      	bne.n	800393c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390a:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCC_OscConfig+0x4b0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a75      	ldr	r2, [pc, #468]	; (8003ae4 <HAL_RCC_OscConfig+0x4b0>)
 8003910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003916:	f7ff f85b 	bl	80029d0 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7ff f857 	bl	80029d0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e118      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <HAL_RCC_OscConfig+0x4b0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d106      	bne.n	8003952 <HAL_RCC_OscConfig+0x31e>
 8003944:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a65      	ldr	r2, [pc, #404]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x358>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b05      	cmp	r3, #5
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x340>
 800395a:	4b61      	ldr	r3, [pc, #388]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a60      	ldr	r2, [pc, #384]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
 8003966:	4b5e      	ldr	r3, [pc, #376]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a5d      	ldr	r2, [pc, #372]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x358>
 8003974:	4b5a      	ldr	r3, [pc, #360]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a59      	ldr	r2, [pc, #356]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	4b57      	ldr	r3, [pc, #348]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a56      	ldr	r2, [pc, #344]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003986:	f023 0304 	bic.w	r3, r3, #4
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d015      	beq.n	80039c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7ff f81c 	bl	80029d0 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399c:	f7ff f818 	bl	80029d0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e0d7      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	4b4b      	ldr	r3, [pc, #300]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ee      	beq.n	800399c <HAL_RCC_OscConfig+0x368>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7ff f806 	bl	80029d0 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c6:	e00a      	b.n	80039de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7ff f802 	bl	80029d0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0c1      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039de:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ee      	bne.n	80039c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	4a3a      	ldr	r2, [pc, #232]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80ad 	beq.w	8003b60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a06:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d060      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d145      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <HAL_RCC_OscConfig+0x4b4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe ffd6 	bl	80029d0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe ffd2 	bl	80029d0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e093      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	491b      	ldr	r1, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_RCC_OscConfig+0x4b4>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fe ffa7 	bl	80029d0 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fe ffa3 	bl	80029d0 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e064      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x452>
 8003aa4:	e05c      	b.n	8003b60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_RCC_OscConfig+0x4b4>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fe ff90 	bl	80029d0 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe ff8c 	bl	80029d0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e04d      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x480>
 8003ad2:	e045      	b.n	8003b60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e040      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40007000 	.word	0x40007000
 8003ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aec:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <HAL_RCC_OscConfig+0x538>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d030      	beq.n	8003b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d129      	bne.n	8003b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d122      	bne.n	8003b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d119      	bne.n	8003b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	3b01      	subs	r3, #1
 8003b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d10f      	bne.n	8003b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800

08003b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e041      	b.n	8003c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fe fbf2 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 fdf0 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d001      	beq.n	8003c28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e046      	b.n	8003cb6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_TIM_Base_Start+0xb4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d022      	beq.n	8003c80 <HAL_TIM_Base_Start+0x70>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c42:	d01d      	beq.n	8003c80 <HAL_TIM_Base_Start+0x70>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_TIM_Base_Start+0xb8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d018      	beq.n	8003c80 <HAL_TIM_Base_Start+0x70>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <HAL_TIM_Base_Start+0xbc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d013      	beq.n	8003c80 <HAL_TIM_Base_Start+0x70>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_TIM_Base_Start+0xc0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00e      	beq.n	8003c80 <HAL_TIM_Base_Start+0x70>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_TIM_Base_Start+0xc4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_TIM_Base_Start+0x70>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_TIM_Base_Start+0xc8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_TIM_Base_Start+0x70>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_TIM_Base_Start+0xcc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d111      	bne.n	8003ca4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d010      	beq.n	8003cb4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca2:	e007      	b.n	8003cb4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40001800 	.word	0x40001800

08003ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d001      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e04e      	b.n	8003d96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a23      	ldr	r2, [pc, #140]	; (8003da4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d022      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d22:	d01d      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d018      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1e      	ldr	r2, [pc, #120]	; (8003dac <HAL_TIM_Base_Start_IT+0xcc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <HAL_TIM_Base_Start_IT+0xdc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d111      	bne.n	8003d84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d010      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	e007      	b.n	8003d94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40001800 	.word	0x40001800

08003dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e041      	b.n	8003e56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f839 	bl	8003e5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f000 fcc8 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_TIM_PWM_Start+0x24>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e022      	b.n	8003ede <HAL_TIM_PWM_Start+0x6a>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d109      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0x3e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e015      	b.n	8003ede <HAL_TIM_PWM_Start+0x6a>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d109      	bne.n	8003ecc <HAL_TIM_PWM_Start+0x58>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e008      	b.n	8003ede <HAL_TIM_PWM_Start+0x6a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07c      	b.n	8003fe0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0x82>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef4:	e013      	b.n	8003f1e <HAL_TIM_PWM_Start+0xaa>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_PWM_Start+0x92>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f04:	e00b      	b.n	8003f1e <HAL_TIM_PWM_Start+0xaa>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_PWM_Start+0xa2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f14:	e003      	b.n	8003f1e <HAL_TIM_PWM_Start+0xaa>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2201      	movs	r2, #1
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f854 	bl	8004fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <HAL_TIM_PWM_Start+0x174>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_TIM_PWM_Start+0xcc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <HAL_TIM_PWM_Start+0x178>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIM_PWM_Start+0xd0>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_TIM_PWM_Start+0xd2>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <HAL_TIM_PWM_Start+0x174>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d022      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6c:	d01d      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <HAL_TIM_PWM_Start+0x17c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d018      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_TIM_PWM_Start+0x180>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <HAL_TIM_PWM_Start+0x184>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a16      	ldr	r2, [pc, #88]	; (8003fec <HAL_TIM_PWM_Start+0x178>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <HAL_TIM_PWM_Start+0x188>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a16      	ldr	r2, [pc, #88]	; (8004000 <HAL_TIM_PWM_Start+0x18c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d111      	bne.n	8003fce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b06      	cmp	r3, #6
 8003fba:	d010      	beq.n	8003fde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fcc:	e007      	b.n	8003fde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40001800 	.word	0x40001800

08004004 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e041      	b.n	800409a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe f924 	bl	8002278 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f000 fba6 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01b      	beq.n	8004106 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0202 	mvn.w	r2, #2
 80040d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7fd f9e1 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
 80040f2:	e005      	b.n	8004100 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb2f 	bl	8004758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fb36 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01b      	beq.n	8004152 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0204 	mvn.w	r2, #4
 8004122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fd f9bb 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
 800413e:	e005      	b.n	800414c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fb09 	bl	8004758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fb10 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01b      	beq.n	800419e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0208 	mvn.w	r2, #8
 800416e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2204      	movs	r2, #4
 8004174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fd f995 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
 800418a:	e005      	b.n	8004198 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fae3 	bl	8004758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 faea 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01b      	beq.n	80041ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f06f 0210 	mvn.w	r2, #16
 80041ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2208      	movs	r2, #8
 80041c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7fd f96f 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
 80041d6:	e005      	b.n	80041e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fabd 	bl	8004758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fac4 	bl	800476c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0201 	mvn.w	r2, #1
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd fd77 	bl	8001cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00c      	beq.n	8004232 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 ff7d 	bl	800512c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00c      	beq.n	8004256 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800424e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fa95 	bl	8004780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00c      	beq.n	800427a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0220 	mvn.w	r2, #32
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 ff4f 	bl	8005118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800429c:	2302      	movs	r3, #2
 800429e:	e088      	b.n	80043b2 <HAL_TIM_IC_ConfigChannel+0x130>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11b      	bne.n	80042e6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80042be:	f000 fcc5 	bl	8004c4c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 020c 	bic.w	r2, r2, #12
 80042d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6999      	ldr	r1, [r3, #24]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	619a      	str	r2, [r3, #24]
 80042e4:	e060      	b.n	80043a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d11c      	bne.n	8004326 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80042fc:	f000 fd49 	bl	8004d92 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800430e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6999      	ldr	r1, [r3, #24]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	619a      	str	r2, [r3, #24]
 8004324:	e040      	b.n	80043a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800433c:	f000 fd96 	bl	8004e6c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 020c 	bic.w	r2, r2, #12
 800434e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69d9      	ldr	r1, [r3, #28]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	61da      	str	r2, [r3, #28]
 8004362:	e021      	b.n	80043a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d11c      	bne.n	80043a4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800437a:	f000 fdb3 	bl	8004ee4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800438c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69d9      	ldr	r1, [r3, #28]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	021a      	lsls	r2, r3, #8
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	61da      	str	r2, [r3, #28]
 80043a2:	e001      	b.n	80043a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0ae      	b.n	8004538 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	f200 809f 	bhi.w	8004528 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043ea:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004425 	.word	0x08004425
 80043f4:	08004529 	.word	0x08004529
 80043f8:	08004529 	.word	0x08004529
 80043fc:	08004529 	.word	0x08004529
 8004400:	08004465 	.word	0x08004465
 8004404:	08004529 	.word	0x08004529
 8004408:	08004529 	.word	0x08004529
 800440c:	08004529 	.word	0x08004529
 8004410:	080044a7 	.word	0x080044a7
 8004414:	08004529 	.word	0x08004529
 8004418:	08004529 	.word	0x08004529
 800441c:	08004529 	.word	0x08004529
 8004420:	080044e7 	.word	0x080044e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fa5e 	bl	80048ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	619a      	str	r2, [r3, #24]
      break;
 8004462:	e064      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 faae 	bl	80049cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6999      	ldr	r1, [r3, #24]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	021a      	lsls	r2, r3, #8
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	619a      	str	r2, [r3, #24]
      break;
 80044a4:	e043      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fb03 	bl	8004ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0208 	orr.w	r2, r2, #8
 80044c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0204 	bic.w	r2, r2, #4
 80044d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69d9      	ldr	r1, [r3, #28]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	61da      	str	r2, [r3, #28]
      break;
 80044e4:	e023      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fb57 	bl	8004ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69d9      	ldr	r1, [r3, #28]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	021a      	lsls	r2, r3, #8
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	61da      	str	r2, [r3, #28]
      break;
 8004526:	e002      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	75fb      	strb	r3, [r7, #23]
      break;
 800452c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIM_ConfigClockSource+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e0b4      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x186>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800457a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004594:	d03e      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0xd4>
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	f200 8087 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	f000 8086 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x172>
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045aa:	d87f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d01a      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0xa6>
 80045b0:	2b70      	cmp	r3, #112	; 0x70
 80045b2:	d87b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d050      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x11a>
 80045b8:	2b60      	cmp	r3, #96	; 0x60
 80045ba:	d877      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b50      	cmp	r3, #80	; 0x50
 80045be:	d03c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0xfa>
 80045c0:	2b50      	cmp	r3, #80	; 0x50
 80045c2:	d873      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d058      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x13a>
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d86f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d064      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d86b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d060      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d867      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d05c      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d05a      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	e062      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f6:	f000 fccd 	bl	8004f94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	609a      	str	r2, [r3, #8]
      break;
 8004612:	e04f      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	f000 fcb6 	bl	8004f94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004636:	609a      	str	r2, [r3, #8]
      break;
 8004638:	e03c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fb74 	bl	8004d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2150      	movs	r1, #80	; 0x50
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fc83 	bl	8004f5e <TIM_ITRx_SetConfig>
      break;
 8004658:	e02c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004666:	461a      	mov	r2, r3
 8004668:	f000 fbd0 	bl	8004e0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2160      	movs	r1, #96	; 0x60
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fc73 	bl	8004f5e <TIM_ITRx_SetConfig>
      break;
 8004678:	e01c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004686:	461a      	mov	r2, r3
 8004688:	f000 fb54 	bl	8004d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2140      	movs	r1, #64	; 0x40
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fc63 	bl	8004f5e <TIM_ITRx_SetConfig>
      break;
 8004698:	e00c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 fc5a 	bl	8004f5e <TIM_ITRx_SetConfig>
      break;
 80046aa:	e003      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
      break;
 80046b0:	e000      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	d831      	bhi.n	8004748 <HAL_TIM_ReadCapturedValue+0x78>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004721 	.word	0x08004721
 80046f0:	08004749 	.word	0x08004749
 80046f4:	08004749 	.word	0x08004749
 80046f8:	08004749 	.word	0x08004749
 80046fc:	0800472b 	.word	0x0800472b
 8004700:	08004749 	.word	0x08004749
 8004704:	08004749 	.word	0x08004749
 8004708:	08004749 	.word	0x08004749
 800470c:	08004735 	.word	0x08004735
 8004710:	08004749 	.word	0x08004749
 8004714:	08004749 	.word	0x08004749
 8004718:	08004749 	.word	0x08004749
 800471c:	0800473f 	.word	0x0800473f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	60fb      	str	r3, [r7, #12]

      break;
 8004728:	e00f      	b.n	800474a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	60fb      	str	r3, [r7, #12]

      break;
 8004732:	e00a      	b.n	800474a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	60fb      	str	r3, [r7, #12]

      break;
 800473c:	e005      	b.n	800474a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	60fb      	str	r3, [r7, #12]

      break;
 8004746:	e000      	b.n	800474a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004748:	bf00      	nop
  }

  return tmpreg;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a46      	ldr	r2, [pc, #280]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d00f      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a43      	ldr	r2, [pc, #268]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a42      	ldr	r2, [pc, #264]	; (80048c8 <TIM_Base_SetConfig+0x134>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a41      	ldr	r2, [pc, #260]	; (80048cc <TIM_Base_SetConfig+0x138>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a40      	ldr	r2, [pc, #256]	; (80048d0 <TIM_Base_SetConfig+0x13c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a35      	ldr	r2, [pc, #212]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02b      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d027      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a32      	ldr	r2, [pc, #200]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d023      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a31      	ldr	r2, [pc, #196]	; (80048c8 <TIM_Base_SetConfig+0x134>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01f      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a30      	ldr	r2, [pc, #192]	; (80048cc <TIM_Base_SetConfig+0x138>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01b      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <TIM_Base_SetConfig+0x13c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d017      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2e      	ldr	r2, [pc, #184]	; (80048d4 <TIM_Base_SetConfig+0x140>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <TIM_Base_SetConfig+0x144>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00f      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <TIM_Base_SetConfig+0x148>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00b      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <TIM_Base_SetConfig+0x14c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d007      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <TIM_Base_SetConfig+0x150>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <TIM_Base_SetConfig+0x154>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d108      	bne.n	8004858 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a12      	ldr	r2, [pc, #72]	; (80048d0 <TIM_Base_SetConfig+0x13c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	611a      	str	r2, [r3, #16]
  }
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40014400 	.word	0x40014400
 80048dc:	40014800 	.word	0x40014800
 80048e0:	40001800 	.word	0x40001800
 80048e4:	40001c00 	.word	0x40001c00
 80048e8:	40002000 	.word	0x40002000

080048ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f023 0201 	bic.w	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f023 0302 	bic.w	r3, r3, #2
 8004934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a20      	ldr	r2, [pc, #128]	; (80049c4 <TIM_OC1_SetConfig+0xd8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_OC1_SetConfig+0x64>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <TIM_OC1_SetConfig+0xdc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10c      	bne.n	800496a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0308 	bic.w	r3, r3, #8
 8004956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 0304 	bic.w	r3, r3, #4
 8004968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <TIM_OC1_SetConfig+0xd8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_OC1_SetConfig+0x8e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a14      	ldr	r2, [pc, #80]	; (80049c8 <TIM_OC1_SetConfig+0xdc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d111      	bne.n	800499e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	621a      	str	r2, [r3, #32]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40010400 	.word	0x40010400

080049cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f023 0210 	bic.w	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 0320 	bic.w	r3, r3, #32
 8004a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <TIM_OC2_SetConfig+0xe4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_OC2_SetConfig+0x68>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <TIM_OC2_SetConfig+0xe8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d10d      	bne.n	8004a50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <TIM_OC2_SetConfig+0xe4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC2_SetConfig+0x94>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a16      	ldr	r2, [pc, #88]	; (8004ab4 <TIM_OC2_SetConfig+0xe8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d113      	bne.n	8004a88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40010400 	.word	0x40010400

08004ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <TIM_OC3_SetConfig+0xe0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_OC3_SetConfig+0x66>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a20      	ldr	r2, [pc, #128]	; (8004b9c <TIM_OC3_SetConfig+0xe4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10d      	bne.n	8004b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <TIM_OC3_SetConfig+0xe0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_OC3_SetConfig+0x92>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <TIM_OC3_SetConfig+0xe4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d113      	bne.n	8004b72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	621a      	str	r2, [r3, #32]
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40010400 	.word	0x40010400

08004ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <TIM_OC4_SetConfig+0xa4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_OC4_SetConfig+0x68>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <TIM_OC4_SetConfig+0xa8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d109      	bne.n	8004c1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	019b      	lsls	r3, r3, #6
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	621a      	str	r2, [r3, #32]
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40010400 	.word	0x40010400

08004c4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f023 0201 	bic.w	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <TIM_TI1_SetConfig+0xcc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01b      	beq.n	8004cb2 <TIM_TI1_SetConfig+0x66>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d017      	beq.n	8004cb2 <TIM_TI1_SetConfig+0x66>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a25      	ldr	r2, [pc, #148]	; (8004d1c <TIM_TI1_SetConfig+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_TI1_SetConfig+0x66>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <TIM_TI1_SetConfig+0xd4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_TI1_SetConfig+0x66>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <TIM_TI1_SetConfig+0xd8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_TI1_SetConfig+0x66>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <TIM_TI1_SetConfig+0xdc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_TI1_SetConfig+0x66>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <TIM_TI1_SetConfig+0xe0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_TI1_SetConfig+0x66>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a20      	ldr	r2, [pc, #128]	; (8004d30 <TIM_TI1_SetConfig+0xe4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <TIM_TI1_SetConfig+0x6a>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <TIM_TI1_SetConfig+0x6c>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e003      	b.n	8004cd6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f023 030a 	bic.w	r3, r3, #10
 8004cf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f003 030a 	and.w	r3, r3, #10
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40010400 	.word	0x40010400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40001800 	.word	0x40001800

08004d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 030a 	bic.w	r3, r3, #10
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0210 	bic.w	r2, r3, #16
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	031b      	lsls	r3, r3, #12
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	621a      	str	r2, [r3, #32]
}
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0210 	bic.w	r2, r3, #16
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	031b      	lsls	r3, r3, #12
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f023 0303 	bic.w	r3, r3, #3
 8004e98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	031b      	lsls	r3, r3, #12
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	031b      	lsls	r3, r3, #12
 8004f3c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f043 0307 	orr.w	r3, r3, #7
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	021a      	lsls	r2, r3, #8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a1a      	ldr	r2, [r3, #32]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	431a      	orrs	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005034:	2302      	movs	r3, #2
 8005036:	e05a      	b.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a21      	ldr	r2, [pc, #132]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d01d      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a18      	ldr	r2, [pc, #96]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a15      	ldr	r2, [pc, #84]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10c      	bne.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40000c00 	.word	0x40000c00
 800510c:	40010400 	.word	0x40010400
 8005110:	40014000 	.word	0x40014000
 8005114:	40001800 	.word	0x40001800

08005118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e042      	b.n	80051d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fd fa76 	bl	8002658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2224      	movs	r2, #36	; 0x24
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fa09 	bl	800559c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08a      	sub	sp, #40	; 0x28
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d175      	bne.n	80052ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Transmit+0x2c>
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e06e      	b.n	80052ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2221      	movs	r2, #33	; 0x21
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800521e:	f7fd fbd7 	bl	80029d0 <HAL_GetTick>
 8005222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	88fa      	ldrh	r2, [r7, #6]
 800522e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005238:	d108      	bne.n	800524c <HAL_UART_Transmit+0x6c>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e003      	b.n	8005254 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005254:	e02e      	b.n	80052b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2200      	movs	r2, #0
 800525e:	2180      	movs	r1, #128	; 0x80
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f8df 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e03a      	b.n	80052ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800528c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	3302      	adds	r3, #2
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e007      	b.n	80052a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	3301      	adds	r3, #1
 80052a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1cb      	bne.n	8005256 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2200      	movs	r2, #0
 80052c6:	2140      	movs	r1, #64	; 0x40
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f8ab 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e006      	b.n	80052ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
  }
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b08a      	sub	sp, #40	; 0x28
 80052fa:	af02      	add	r7, sp, #8
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b20      	cmp	r3, #32
 8005314:	f040 8081 	bne.w	800541a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_UART_Receive+0x2e>
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e079      	b.n	800541c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2222      	movs	r2, #34	; 0x22
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800533c:	f7fd fb48 	bl	80029d0 <HAL_GetTick>
 8005340:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	88fa      	ldrh	r2, [r7, #6]
 800534c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005356:	d108      	bne.n	800536a <HAL_UART_Receive+0x74>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e003      	b.n	8005372 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005372:	e047      	b.n	8005404 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2200      	movs	r2, #0
 800537c:	2120      	movs	r1, #32
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f850 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e042      	b.n	800541c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10c      	bne.n	80053b6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	3302      	adds	r3, #2
 80053b2:	61bb      	str	r3, [r7, #24]
 80053b4:	e01f      	b.n	80053f6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	d007      	beq.n	80053d0 <HAL_UART_Receive+0xda>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <HAL_UART_Receive+0xe8>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e008      	b.n	80053f0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1b2      	bne.n	8005374 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e000      	b.n	800541c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800541a:	2302      	movs	r3, #2
  }
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005434:	e03b      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d037      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fd fac7 	bl	80029d0 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <UART_WaitOnFlagUntilTimeout+0x30>
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e03a      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d023      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b80      	cmp	r3, #128	; 0x80
 800546a:	d020      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d01d      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b08      	cmp	r3, #8
 800547e:	d116      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f81d 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2208      	movs	r2, #8
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d0b4      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b095      	sub	sp, #84	; 0x54
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054fe:	643a      	str	r2, [r7, #64]	; 0x40
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3314      	adds	r3, #20
 8005518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	61fb      	str	r3, [r7, #28]
   return(result);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	64bb      	str	r3, [r7, #72]	; 0x48
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	2b01      	cmp	r3, #1
 800554c:	d119      	bne.n	8005582 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	330c      	adds	r3, #12
 8005554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	60bb      	str	r3, [r7, #8]
   return(result);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f023 0310 	bic.w	r3, r3, #16
 8005564:	647b      	str	r3, [r7, #68]	; 0x44
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800556e:	61ba      	str	r2, [r7, #24]
 8005570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6979      	ldr	r1, [r7, #20]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	613b      	str	r3, [r7, #16]
   return(result);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e5      	bne.n	800554e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005590:	bf00      	nop
 8005592:	3754      	adds	r7, #84	; 0x54
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800559c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a0:	b0c0      	sub	sp, #256	; 0x100
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	68d9      	ldr	r1, [r3, #12]
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	ea40 0301 	orr.w	r3, r0, r1
 80055c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	431a      	orrs	r2, r3
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055f4:	f021 010c 	bic.w	r1, r1, #12
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005602:	430b      	orrs	r3, r1
 8005604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005616:	6999      	ldr	r1, [r3, #24]
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	ea40 0301 	orr.w	r3, r0, r1
 8005622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b8f      	ldr	r3, [pc, #572]	; (8005868 <UART_SetConfig+0x2cc>)
 800562c:	429a      	cmp	r2, r3
 800562e:	d005      	beq.n	800563c <UART_SetConfig+0xa0>
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b8d      	ldr	r3, [pc, #564]	; (800586c <UART_SetConfig+0x2d0>)
 8005638:	429a      	cmp	r2, r3
 800563a:	d104      	bne.n	8005646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800563c:	f7fd fd84 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 8005640:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005644:	e003      	b.n	800564e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005646:	f7fd fd6b 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 800564a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005658:	f040 810c 	bne.w	8005874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800565c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005660:	2200      	movs	r2, #0
 8005662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005666:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800566a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800566e:	4622      	mov	r2, r4
 8005670:	462b      	mov	r3, r5
 8005672:	1891      	adds	r1, r2, r2
 8005674:	65b9      	str	r1, [r7, #88]	; 0x58
 8005676:	415b      	adcs	r3, r3
 8005678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800567a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800567e:	4621      	mov	r1, r4
 8005680:	eb12 0801 	adds.w	r8, r2, r1
 8005684:	4629      	mov	r1, r5
 8005686:	eb43 0901 	adc.w	r9, r3, r1
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800569a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800569e:	4690      	mov	r8, r2
 80056a0:	4699      	mov	r9, r3
 80056a2:	4623      	mov	r3, r4
 80056a4:	eb18 0303 	adds.w	r3, r8, r3
 80056a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056ac:	462b      	mov	r3, r5
 80056ae:	eb49 0303 	adc.w	r3, r9, r3
 80056b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056ca:	460b      	mov	r3, r1
 80056cc:	18db      	adds	r3, r3, r3
 80056ce:	653b      	str	r3, [r7, #80]	; 0x50
 80056d0:	4613      	mov	r3, r2
 80056d2:	eb42 0303 	adc.w	r3, r2, r3
 80056d6:	657b      	str	r3, [r7, #84]	; 0x54
 80056d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056e0:	f7fa fd96 	bl	8000210 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4b61      	ldr	r3, [pc, #388]	; (8005870 <UART_SetConfig+0x2d4>)
 80056ea:	fba3 2302 	umull	r2, r3, r3, r2
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	011c      	lsls	r4, r3, #4
 80056f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005704:	4642      	mov	r2, r8
 8005706:	464b      	mov	r3, r9
 8005708:	1891      	adds	r1, r2, r2
 800570a:	64b9      	str	r1, [r7, #72]	; 0x48
 800570c:	415b      	adcs	r3, r3
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005714:	4641      	mov	r1, r8
 8005716:	eb12 0a01 	adds.w	sl, r2, r1
 800571a:	4649      	mov	r1, r9
 800571c:	eb43 0b01 	adc.w	fp, r3, r1
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800572c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005734:	4692      	mov	sl, r2
 8005736:	469b      	mov	fp, r3
 8005738:	4643      	mov	r3, r8
 800573a:	eb1a 0303 	adds.w	r3, sl, r3
 800573e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005742:	464b      	mov	r3, r9
 8005744:	eb4b 0303 	adc.w	r3, fp, r3
 8005748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005758:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800575c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005760:	460b      	mov	r3, r1
 8005762:	18db      	adds	r3, r3, r3
 8005764:	643b      	str	r3, [r7, #64]	; 0x40
 8005766:	4613      	mov	r3, r2
 8005768:	eb42 0303 	adc.w	r3, r2, r3
 800576c:	647b      	str	r3, [r7, #68]	; 0x44
 800576e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005776:	f7fa fd4b 	bl	8000210 <__aeabi_uldivmod>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4611      	mov	r1, r2
 8005780:	4b3b      	ldr	r3, [pc, #236]	; (8005870 <UART_SetConfig+0x2d4>)
 8005782:	fba3 2301 	umull	r2, r3, r3, r1
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	2264      	movs	r2, #100	; 0x64
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	1acb      	subs	r3, r1, r3
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005796:	4b36      	ldr	r3, [pc, #216]	; (8005870 <UART_SetConfig+0x2d4>)
 8005798:	fba3 2302 	umull	r2, r3, r3, r2
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057a4:	441c      	add	r4, r3
 80057a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	63b9      	str	r1, [r7, #56]	; 0x38
 80057c0:	415b      	adcs	r3, r3
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057c8:	4641      	mov	r1, r8
 80057ca:	1851      	adds	r1, r2, r1
 80057cc:	6339      	str	r1, [r7, #48]	; 0x30
 80057ce:	4649      	mov	r1, r9
 80057d0:	414b      	adcs	r3, r1
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057e0:	4659      	mov	r1, fp
 80057e2:	00cb      	lsls	r3, r1, #3
 80057e4:	4651      	mov	r1, sl
 80057e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ea:	4651      	mov	r1, sl
 80057ec:	00ca      	lsls	r2, r1, #3
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	4642      	mov	r2, r8
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057fc:	464b      	mov	r3, r9
 80057fe:	460a      	mov	r2, r1
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800581c:	460b      	mov	r3, r1
 800581e:	18db      	adds	r3, r3, r3
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
 8005822:	4613      	mov	r3, r2
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800582a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800582e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005832:	f7fa fced 	bl	8000210 <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <UART_SetConfig+0x2d4>)
 800583c:	fba3 1302 	umull	r1, r3, r3, r2
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	2164      	movs	r1, #100	; 0x64
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	3332      	adds	r3, #50	; 0x32
 800584e:	4a08      	ldr	r2, [pc, #32]	; (8005870 <UART_SetConfig+0x2d4>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	f003 0207 	and.w	r2, r3, #7
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4422      	add	r2, r4
 8005862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005864:	e106      	b.n	8005a74 <UART_SetConfig+0x4d8>
 8005866:	bf00      	nop
 8005868:	40011000 	.word	0x40011000
 800586c:	40011400 	.word	0x40011400
 8005870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005878:	2200      	movs	r2, #0
 800587a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800587e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005886:	4642      	mov	r2, r8
 8005888:	464b      	mov	r3, r9
 800588a:	1891      	adds	r1, r2, r2
 800588c:	6239      	str	r1, [r7, #32]
 800588e:	415b      	adcs	r3, r3
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005896:	4641      	mov	r1, r8
 8005898:	1854      	adds	r4, r2, r1
 800589a:	4649      	mov	r1, r9
 800589c:	eb43 0501 	adc.w	r5, r3, r1
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	00eb      	lsls	r3, r5, #3
 80058aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ae:	00e2      	lsls	r2, r4, #3
 80058b0:	4614      	mov	r4, r2
 80058b2:	461d      	mov	r5, r3
 80058b4:	4643      	mov	r3, r8
 80058b6:	18e3      	adds	r3, r4, r3
 80058b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058bc:	464b      	mov	r3, r9
 80058be:	eb45 0303 	adc.w	r3, r5, r3
 80058c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058e2:	4629      	mov	r1, r5
 80058e4:	008b      	lsls	r3, r1, #2
 80058e6:	4621      	mov	r1, r4
 80058e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ec:	4621      	mov	r1, r4
 80058ee:	008a      	lsls	r2, r1, #2
 80058f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058f4:	f7fa fc8c 	bl	8000210 <__aeabi_uldivmod>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4b60      	ldr	r3, [pc, #384]	; (8005a80 <UART_SetConfig+0x4e4>)
 80058fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	011c      	lsls	r4, r3, #4
 8005906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800590a:	2200      	movs	r2, #0
 800590c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	1891      	adds	r1, r2, r2
 800591e:	61b9      	str	r1, [r7, #24]
 8005920:	415b      	adcs	r3, r3
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005928:	4641      	mov	r1, r8
 800592a:	1851      	adds	r1, r2, r1
 800592c:	6139      	str	r1, [r7, #16]
 800592e:	4649      	mov	r1, r9
 8005930:	414b      	adcs	r3, r1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005940:	4659      	mov	r1, fp
 8005942:	00cb      	lsls	r3, r1, #3
 8005944:	4651      	mov	r1, sl
 8005946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800594a:	4651      	mov	r1, sl
 800594c:	00ca      	lsls	r2, r1, #3
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	4603      	mov	r3, r0
 8005954:	4642      	mov	r2, r8
 8005956:	189b      	adds	r3, r3, r2
 8005958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800595c:	464b      	mov	r3, r9
 800595e:	460a      	mov	r2, r1
 8005960:	eb42 0303 	adc.w	r3, r2, r3
 8005964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	67bb      	str	r3, [r7, #120]	; 0x78
 8005972:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005980:	4649      	mov	r1, r9
 8005982:	008b      	lsls	r3, r1, #2
 8005984:	4641      	mov	r1, r8
 8005986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800598a:	4641      	mov	r1, r8
 800598c:	008a      	lsls	r2, r1, #2
 800598e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005992:	f7fa fc3d 	bl	8000210 <__aeabi_uldivmod>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4611      	mov	r1, r2
 800599c:	4b38      	ldr	r3, [pc, #224]	; (8005a80 <UART_SetConfig+0x4e4>)
 800599e:	fba3 2301 	umull	r2, r3, r3, r1
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2264      	movs	r2, #100	; 0x64
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
 80059aa:	1acb      	subs	r3, r1, r3
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	3332      	adds	r3, #50	; 0x32
 80059b0:	4a33      	ldr	r2, [pc, #204]	; (8005a80 <UART_SetConfig+0x4e4>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059bc:	441c      	add	r4, r3
 80059be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c2:	2200      	movs	r2, #0
 80059c4:	673b      	str	r3, [r7, #112]	; 0x70
 80059c6:	677a      	str	r2, [r7, #116]	; 0x74
 80059c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	1891      	adds	r1, r2, r2
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	415b      	adcs	r3, r3
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059dc:	4641      	mov	r1, r8
 80059de:	1851      	adds	r1, r2, r1
 80059e0:	6039      	str	r1, [r7, #0]
 80059e2:	4649      	mov	r1, r9
 80059e4:	414b      	adcs	r3, r1
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059f4:	4659      	mov	r1, fp
 80059f6:	00cb      	lsls	r3, r1, #3
 80059f8:	4651      	mov	r1, sl
 80059fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fe:	4651      	mov	r1, sl
 8005a00:	00ca      	lsls	r2, r1, #3
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	4642      	mov	r2, r8
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a0e:	464b      	mov	r3, r9
 8005a10:	460a      	mov	r2, r1
 8005a12:	eb42 0303 	adc.w	r3, r2, r3
 8005a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	663b      	str	r3, [r7, #96]	; 0x60
 8005a22:	667a      	str	r2, [r7, #100]	; 0x64
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a30:	4649      	mov	r1, r9
 8005a32:	008b      	lsls	r3, r1, #2
 8005a34:	4641      	mov	r1, r8
 8005a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	008a      	lsls	r2, r1, #2
 8005a3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a42:	f7fa fbe5 	bl	8000210 <__aeabi_uldivmod>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <UART_SetConfig+0x4e4>)
 8005a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	2164      	movs	r1, #100	; 0x64
 8005a54:	fb01 f303 	mul.w	r3, r1, r3
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	3332      	adds	r3, #50	; 0x32
 8005a5e:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <UART_SetConfig+0x4e4>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	f003 020f 	and.w	r2, r3, #15
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4422      	add	r2, r4
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a80:	51eb851f 	.word	0x51eb851f

08005a84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a96:	2b84      	cmp	r3, #132	; 0x84
 8005a98:	d005      	beq.n	8005aa6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3303      	adds	r3, #3
 8005aa4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ab8:	f000 fec4 	bl	8006844 <vTaskStartScheduler>
  
  return osOK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac4:	b089      	sub	sp, #36	; 0x24
 8005ac6:	af04      	add	r7, sp, #16
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d020      	beq.n	8005b16 <osThreadCreate+0x54>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01c      	beq.n	8005b16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685c      	ldr	r4, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691e      	ldr	r6, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff ffc8 	bl	8005a84 <makeFreeRtosPriority>
 8005af4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005afe:	9202      	str	r2, [sp, #8]
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	9100      	str	r1, [sp, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4632      	mov	r2, r6
 8005b08:	4629      	mov	r1, r5
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 fcbc 	bl	8006488 <xTaskCreateStatic>
 8005b10:	4603      	mov	r3, r0
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e01c      	b.n	8005b50 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685c      	ldr	r4, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b22:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff ffaa 	bl	8005a84 <makeFreeRtosPriority>
 8005b30:	4602      	mov	r2, r0
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	9200      	str	r2, [sp, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fcfe 	bl	8006542 <xTaskCreate>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d001      	beq.n	8005b50 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b50:	68fb      	ldr	r3, [r7, #12]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b5a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <osDelay+0x16>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	e000      	b.n	8005b72 <osDelay+0x18>
 8005b70:	2301      	movs	r3, #1
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fe32 	bl	80067dc <vTaskDelay>
  
  return osOK;
 8005b78:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f103 0208 	add.w	r2, r3, #8
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f103 0208 	add.w	r2, r3, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f103 0208 	add.w	r2, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	601a      	str	r2, [r3, #0]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d103      	bne.n	8005c44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	e00c      	b.n	8005c5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3308      	adds	r3, #8
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e002      	b.n	8005c52 <vListInsert+0x2e>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d2f6      	bcs.n	8005c4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6892      	ldr	r2, [r2, #8]
 8005cac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6852      	ldr	r2, [r2, #4]
 8005cb6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d103      	bne.n	8005cca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	1e5a      	subs	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d16:	f001 fcf5 	bl	8007704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	441a      	add	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	3b01      	subs	r3, #1
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	441a      	add	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	22ff      	movs	r2, #255	; 0xff
 8005d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d114      	bne.n	8005d96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01a      	beq.n	8005daa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3310      	adds	r3, #16
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 ffb5 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d012      	beq.n	8005daa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <xQueueGenericReset+0xcc>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	e009      	b.n	8005daa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3310      	adds	r3, #16
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fef1 	bl	8005b82 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3324      	adds	r3, #36	; 0x24
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff feec 	bl	8005b82 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005daa:	f001 fcdb 	bl	8007764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dae:	2301      	movs	r3, #1
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	613b      	str	r3, [r7, #16]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	3348      	adds	r3, #72	; 0x48
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fd67 	bl	80078c8 <pvPortMalloc>
 8005dfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d011      	beq.n	8005e26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	3348      	adds	r3, #72	; 0x48
 8005e0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e14:	79fa      	ldrb	r2, [r7, #7]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f805 	bl	8005e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e26:	69bb      	ldr	r3, [r7, #24]
	}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e002      	b.n	8005e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e5e:	2101      	movs	r1, #1
 8005e60:	69b8      	ldr	r0, [r7, #24]
 8005e62:	f7ff ff43 	bl	8005cec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	; 0x38
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <xQueueGenericSend+0x32>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <xQueueGenericSend+0x40>
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <xQueueGenericSend+0x44>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <xQueueGenericSend+0x46>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <xQueueGenericSend+0x60>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d103      	bne.n	8005ede <xQueueGenericSend+0x6e>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <xQueueGenericSend+0x72>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <xQueueGenericSend+0x74>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xQueueGenericSend+0x8e>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	623b      	str	r3, [r7, #32]
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005efe:	f001 f8b3 	bl	8007068 <xTaskGetSchedulerState>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <xQueueGenericSend+0x9e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <xQueueGenericSend+0xa2>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <xQueueGenericSend+0xa4>
 8005f12:	2300      	movs	r3, #0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xQueueGenericSend+0xbe>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	61fb      	str	r3, [r7, #28]
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f2e:	f001 fbe9 	bl	8007704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <xQueueGenericSend+0xd4>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d129      	bne.n	8005f98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f4a:	f000 f9b3 	bl	80062b4 <prvCopyDataToQueue>
 8005f4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	3324      	adds	r3, #36	; 0x24
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fec3 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d013      	beq.n	8005f90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f68:	4b3f      	ldr	r3, [pc, #252]	; (8006068 <xQueueGenericSend+0x1f8>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	e00a      	b.n	8005f90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f80:	4b39      	ldr	r3, [pc, #228]	; (8006068 <xQueueGenericSend+0x1f8>)
 8005f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f90:	f001 fbe8 	bl	8007764 <vPortExitCritical>
				return pdPASS;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e063      	b.n	8006060 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f9e:	f001 fbe1 	bl	8007764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e05c      	b.n	8006060 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d106      	bne.n	8005fba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fac:	f107 0314 	add.w	r3, r7, #20
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fefb 	bl	8006dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fba:	f001 fbd3 	bl	8007764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fbe:	f000 fcab 	bl	8006918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fc2:	f001 fb9f 	bl	8007704 <vPortEnterCritical>
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d103      	bne.n	8005fdc <xQueueGenericSend+0x16c>
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe2:	b25b      	sxtb	r3, r3
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d103      	bne.n	8005ff2 <xQueueGenericSend+0x182>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff2:	f001 fbb7 	bl	8007764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ff6:	1d3a      	adds	r2, r7, #4
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 feea 	bl	8006dd8 <xTaskCheckForTimeOut>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d124      	bne.n	8006054 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800600a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800600c:	f000 fa24 	bl	8006458 <prvIsQueueFull>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d018      	beq.n	8006048 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	3310      	adds	r3, #16
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fe3e 	bl	8006ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006026:	f000 f9af 	bl	8006388 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800602a:	f000 fc83 	bl	8006934 <xTaskResumeAll>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f af7c 	bne.w	8005f2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <xQueueGenericSend+0x1f8>)
 8006038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	e772      	b.n	8005f2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800604a:	f000 f99d 	bl	8006388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800604e:	f000 fc71 	bl	8006934 <xTaskResumeAll>
 8006052:	e76c      	b.n	8005f2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006056:	f000 f997 	bl	8006388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800605a:	f000 fc6b 	bl	8006934 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800605e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006060:	4618      	mov	r0, r3
 8006062:	3738      	adds	r7, #56	; 0x38
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08e      	sub	sp, #56	; 0x38
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800607e:	2300      	movs	r3, #0
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	623b      	str	r3, [r7, #32]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	61fb      	str	r3, [r7, #28]
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060bc:	f000 ffd4 	bl	8007068 <xTaskGetSchedulerState>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <xQueueSemaphoreTake+0x60>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <xQueueSemaphoreTake+0x64>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <xQueueSemaphoreTake+0x66>
 80060d0:	2300      	movs	r3, #0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	61bb      	str	r3, [r7, #24]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060ec:	f001 fb0a 	bl	8007704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d024      	beq.n	8006146 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	1e5a      	subs	r2, r3, #1
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800610c:	f001 f954 	bl	80073b8 <pvTaskIncrementMutexHeldCount>
 8006110:	4602      	mov	r2, r0
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00f      	beq.n	800613e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	3310      	adds	r3, #16
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fde0 	bl	8006ce8 <xTaskRemoveFromEventList>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800612e:	4b54      	ldr	r3, [pc, #336]	; (8006280 <xQueueSemaphoreTake+0x214>)
 8006130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800613e:	f001 fb11 	bl	8007764 <vPortExitCritical>
				return pdPASS;
 8006142:	2301      	movs	r3, #1
 8006144:	e097      	b.n	8006276 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d111      	bne.n	8006170 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	617b      	str	r3, [r7, #20]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006168:	f001 fafc 	bl	8007764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800616c:	2300      	movs	r3, #0
 800616e:	e082      	b.n	8006276 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006176:	f107 030c 	add.w	r3, r7, #12
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fe16 	bl	8006dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006184:	f001 faee 	bl	8007764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006188:	f000 fbc6 	bl	8006918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618c:	f001 faba 	bl	8007704 <vPortEnterCritical>
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006196:	b25b      	sxtb	r3, r3
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d103      	bne.n	80061a6 <xQueueSemaphoreTake+0x13a>
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ac:	b25b      	sxtb	r3, r3
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d103      	bne.n	80061bc <xQueueSemaphoreTake+0x150>
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061bc:	f001 fad2 	bl	8007764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c0:	463a      	mov	r2, r7
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	4611      	mov	r1, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fe05 	bl	8006dd8 <xTaskCheckForTimeOut>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d132      	bne.n	800623a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061d6:	f000 f929 	bl	800642c <prvIsQueueEmpty>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d026      	beq.n	800622e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80061e8:	f001 fa8c 	bl	8007704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 ff57 	bl	80070a4 <xTaskPriorityInherit>
 80061f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80061f8:	f001 fab4 	bl	8007764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	3324      	adds	r3, #36	; 0x24
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fd4b 	bl	8006ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800620a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800620c:	f000 f8bc 	bl	8006388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006210:	f000 fb90 	bl	8006934 <xTaskResumeAll>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	f47f af68 	bne.w	80060ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800621c:	4b18      	ldr	r3, [pc, #96]	; (8006280 <xQueueSemaphoreTake+0x214>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	e75e      	b.n	80060ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800622e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006230:	f000 f8aa 	bl	8006388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006234:	f000 fb7e 	bl	8006934 <xTaskResumeAll>
 8006238:	e758      	b.n	80060ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800623a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800623c:	f000 f8a4 	bl	8006388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006240:	f000 fb78 	bl	8006934 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006246:	f000 f8f1 	bl	800642c <prvIsQueueEmpty>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	f43f af4d 	beq.w	80060ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00d      	beq.n	8006274 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006258:	f001 fa54 	bl	8007704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800625c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800625e:	f000 f811 	bl	8006284 <prvGetDisinheritPriorityAfterTimeout>
 8006262:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800626a:	4618      	mov	r0, r3
 800626c:	f001 f816 	bl	800729c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006270:	f001 fa78 	bl	8007764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006276:	4618      	mov	r0, r3
 8006278:	3738      	adds	r7, #56	; 0x38
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1c3 0310 	rsb	r3, r3, #16
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e001      	b.n	80062a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062a6:	68fb      	ldr	r3, [r7, #12]
	}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10d      	bne.n	80062ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d14d      	bne.n	8006376 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 ff56 	bl	8007190 <xTaskPriorityDisinherit>
 80062e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	609a      	str	r2, [r3, #8]
 80062ec:	e043      	b.n	8006376 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d119      	bne.n	8006328 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6858      	ldr	r0, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	461a      	mov	r2, r3
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	f001 fbc4 	bl	8007a8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	441a      	add	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	d32b      	bcc.n	8006376 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	e026      	b.n	8006376 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68d8      	ldr	r0, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	461a      	mov	r2, r3
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	f001 fbaa 	bl	8007a8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	425b      	negs	r3, r3
 8006342:	441a      	add	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d207      	bcs.n	8006364 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	425b      	negs	r3, r3
 800635e:	441a      	add	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d105      	bne.n	8006376 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3b01      	subs	r3, #1
 8006374:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800637e:	697b      	ldr	r3, [r7, #20]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006390:	f001 f9b8 	bl	8007704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800639a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800639c:	e011      	b.n	80063c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d012      	beq.n	80063cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3324      	adds	r3, #36	; 0x24
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fc9c 	bl	8006ce8 <xTaskRemoveFromEventList>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063b6:	f000 fd71 	bl	8006e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	3b01      	subs	r3, #1
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dce9      	bgt.n	800639e <prvUnlockQueue+0x16>
 80063ca:	e000      	b.n	80063ce <prvUnlockQueue+0x46>
					break;
 80063cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	22ff      	movs	r2, #255	; 0xff
 80063d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063d6:	f001 f9c5 	bl	8007764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063da:	f001 f993 	bl	8007704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063e6:	e011      	b.n	800640c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d012      	beq.n	8006416 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3310      	adds	r3, #16
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fc77 	bl	8006ce8 <xTaskRemoveFromEventList>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006400:	f000 fd4c 	bl	8006e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	3b01      	subs	r3, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800640c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006410:	2b00      	cmp	r3, #0
 8006412:	dce9      	bgt.n	80063e8 <prvUnlockQueue+0x60>
 8006414:	e000      	b.n	8006418 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006416:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	22ff      	movs	r2, #255	; 0xff
 800641c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006420:	f001 f9a0 	bl	8007764 <vPortExitCritical>
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006434:	f001 f966 	bl	8007704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006440:	2301      	movs	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e001      	b.n	800644a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800644a:	f001 f98b 	bl	8007764 <vPortExitCritical>

	return xReturn;
 800644e:	68fb      	ldr	r3, [r7, #12]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006460:	f001 f950 	bl	8007704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646c:	429a      	cmp	r2, r3
 800646e:	d102      	bne.n	8006476 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e001      	b.n	800647a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800647a:	f001 f973 	bl	8007764 <vPortExitCritical>

	return xReturn;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	; 0x38
 800648c:	af04      	add	r7, sp, #16
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	623b      	str	r3, [r7, #32]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xTaskCreateStatic+0x46>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	61fb      	str	r3, [r7, #28]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064ce:	23a0      	movs	r3, #160	; 0xa0
 80064d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2ba0      	cmp	r3, #160	; 0xa0
 80064d6:	d00a      	beq.n	80064ee <xTaskCreateStatic+0x66>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61bb      	str	r3, [r7, #24]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01e      	beq.n	8006534 <xTaskCreateStatic+0xac>
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01b      	beq.n	8006534 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006504:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	2202      	movs	r2, #2
 800650a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800650e:	2300      	movs	r3, #0
 8006510:	9303      	str	r3, [sp, #12]
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	9302      	str	r3, [sp, #8]
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f850 	bl	80065cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800652e:	f000 f8eb 	bl	8006708 <prvAddNewTaskToReadyList>
 8006532:	e001      	b.n	8006538 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006538:	697b      	ldr	r3, [r7, #20]
	}
 800653a:	4618      	mov	r0, r3
 800653c:	3728      	adds	r7, #40	; 0x28
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006542:	b580      	push	{r7, lr}
 8006544:	b08c      	sub	sp, #48	; 0x30
 8006546:	af04      	add	r7, sp, #16
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4618      	mov	r0, r3
 8006558:	f001 f9b6 	bl	80078c8 <pvPortMalloc>
 800655c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006564:	20a0      	movs	r0, #160	; 0xa0
 8006566:	f001 f9af 	bl	80078c8 <pvPortMalloc>
 800656a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
 8006578:	e005      	b.n	8006586 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800657a:	6978      	ldr	r0, [r7, #20]
 800657c:	f001 f9ea 	bl	8007954 <vPortFree>
 8006580:	e001      	b.n	8006586 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d017      	beq.n	80065bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006594:	88fa      	ldrh	r2, [r7, #6]
 8006596:	2300      	movs	r3, #0
 8006598:	9303      	str	r3, [sp, #12]
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	9302      	str	r3, [sp, #8]
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f80e 	bl	80065cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065b0:	69f8      	ldr	r0, [r7, #28]
 80065b2:	f000 f8a9 	bl	8006708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065b6:	2301      	movs	r3, #1
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	e002      	b.n	80065c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065bc:	f04f 33ff 	mov.w	r3, #4294967295
 80065c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065c2:	69bb      	ldr	r3, [r7, #24]
	}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065e4:	3b01      	subs	r3, #1
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f023 0307 	bic.w	r3, r3, #7
 80065f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <prvInitialiseNewTask+0x48>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	617b      	str	r3, [r7, #20]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d01f      	beq.n	800665a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800661a:	2300      	movs	r3, #0
 800661c:	61fb      	str	r3, [r7, #28]
 800661e:	e012      	b.n	8006646 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	7819      	ldrb	r1, [r3, #0]
 8006628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	3334      	adds	r3, #52	; 0x34
 8006630:	460a      	mov	r2, r1
 8006632:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	3301      	adds	r3, #1
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d9e9      	bls.n	8006620 <prvInitialiseNewTask+0x54>
 800664c:	e000      	b.n	8006650 <prvInitialiseNewTask+0x84>
			{
				break;
 800664e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006658:	e003      	b.n	8006662 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	2b0f      	cmp	r3, #15
 8006666:	d901      	bls.n	800666c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006668:	230f      	movs	r3, #15
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006670:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006676:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	2200      	movs	r2, #0
 800667c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	3304      	adds	r3, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff fa9d 	bl	8005bc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	3318      	adds	r3, #24
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fa98 	bl	8005bc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006696:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	f1c3 0210 	rsb	r2, r3, #16
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	334c      	adds	r3, #76	; 0x4c
 80066bc:	224c      	movs	r2, #76	; 0x4c
 80066be:	2100      	movs	r1, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 f95f 	bl	8007984 <memset>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	4a0c      	ldr	r2, [pc, #48]	; (80066fc <prvInitialiseNewTask+0x130>)
 80066ca:	651a      	str	r2, [r3, #80]	; 0x50
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <prvInitialiseNewTask+0x134>)
 80066d0:	655a      	str	r2, [r3, #84]	; 0x54
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <prvInitialiseNewTask+0x138>)
 80066d6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	69b8      	ldr	r0, [r7, #24]
 80066de:	f000 fee5 	bl	80074ac <pxPortInitialiseStack>
 80066e2:	4602      	mov	r2, r0
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f4:	bf00      	nop
 80066f6:	3720      	adds	r7, #32
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20004434 	.word	0x20004434
 8006700:	2000449c 	.word	0x2000449c
 8006704:	20004504 	.word	0x20004504

08006708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006710:	f000 fff8 	bl	8007704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006714:	4b2a      	ldr	r3, [pc, #168]	; (80067c0 <prvAddNewTaskToReadyList+0xb8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	4a29      	ldr	r2, [pc, #164]	; (80067c0 <prvAddNewTaskToReadyList+0xb8>)
 800671c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800671e:	4b29      	ldr	r3, [pc, #164]	; (80067c4 <prvAddNewTaskToReadyList+0xbc>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006726:	4a27      	ldr	r2, [pc, #156]	; (80067c4 <prvAddNewTaskToReadyList+0xbc>)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800672c:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <prvAddNewTaskToReadyList+0xb8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d110      	bne.n	8006756 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006734:	f000 fbd6 	bl	8006ee4 <prvInitialiseTaskLists>
 8006738:	e00d      	b.n	8006756 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800673a:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <prvAddNewTaskToReadyList+0xc0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006742:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <prvAddNewTaskToReadyList+0xbc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	429a      	cmp	r2, r3
 800674e:	d802      	bhi.n	8006756 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006750:	4a1c      	ldr	r2, [pc, #112]	; (80067c4 <prvAddNewTaskToReadyList+0xbc>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006756:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <prvAddNewTaskToReadyList+0xc4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3301      	adds	r3, #1
 800675c:	4a1b      	ldr	r2, [pc, #108]	; (80067cc <prvAddNewTaskToReadyList+0xc4>)
 800675e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	2201      	movs	r2, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <prvAddNewTaskToReadyList+0xc8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4313      	orrs	r3, r2
 800676e:	4a18      	ldr	r2, [pc, #96]	; (80067d0 <prvAddNewTaskToReadyList+0xc8>)
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4a15      	ldr	r2, [pc, #84]	; (80067d4 <prvAddNewTaskToReadyList+0xcc>)
 8006780:	441a      	add	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7ff fa27 	bl	8005bdc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800678e:	f000 ffe9 	bl	8007764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <prvAddNewTaskToReadyList+0xc0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00e      	beq.n	80067b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800679a:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <prvAddNewTaskToReadyList+0xbc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d207      	bcs.n	80067b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <prvAddNewTaskToReadyList+0xd0>)
 80067aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	200007f8 	.word	0x200007f8
 80067c4:	20000644 	.word	0x20000644
 80067c8:	20000804 	.word	0x20000804
 80067cc:	20000814 	.word	0x20000814
 80067d0:	20000800 	.word	0x20000800
 80067d4:	20000648 	.word	0x20000648
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d017      	beq.n	800681e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <vTaskDelay+0x60>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <vTaskDelay+0x30>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	60bb      	str	r3, [r7, #8]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800680c:	f000 f884 	bl	8006918 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006810:	2100      	movs	r1, #0
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fde4 	bl	80073e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006818:	f000 f88c 	bl	8006934 <xTaskResumeAll>
 800681c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d107      	bne.n	8006834 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <vTaskDelay+0x64>)
 8006826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000820 	.word	0x20000820
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006852:	463a      	mov	r2, r7
 8006854:	1d39      	adds	r1, r7, #4
 8006856:	f107 0308 	add.w	r3, r7, #8
 800685a:	4618      	mov	r0, r3
 800685c:	f7fb f834 	bl	80018c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	9202      	str	r2, [sp, #8]
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	2300      	movs	r3, #0
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	2300      	movs	r3, #0
 8006870:	460a      	mov	r2, r1
 8006872:	4921      	ldr	r1, [pc, #132]	; (80068f8 <vTaskStartScheduler+0xb4>)
 8006874:	4821      	ldr	r0, [pc, #132]	; (80068fc <vTaskStartScheduler+0xb8>)
 8006876:	f7ff fe07 	bl	8006488 <xTaskCreateStatic>
 800687a:	4603      	mov	r3, r0
 800687c:	4a20      	ldr	r2, [pc, #128]	; (8006900 <vTaskStartScheduler+0xbc>)
 800687e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006880:	4b1f      	ldr	r3, [pc, #124]	; (8006900 <vTaskStartScheduler+0xbc>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006888:	2301      	movs	r3, #1
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	e001      	b.n	8006892 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d11b      	bne.n	80068d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	613b      	str	r3, [r7, #16]
}
 80068aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <vTaskStartScheduler+0xc0>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	334c      	adds	r3, #76	; 0x4c
 80068b2:	4a15      	ldr	r2, [pc, #84]	; (8006908 <vTaskStartScheduler+0xc4>)
 80068b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068b6:	4b15      	ldr	r3, [pc, #84]	; (800690c <vTaskStartScheduler+0xc8>)
 80068b8:	f04f 32ff 	mov.w	r2, #4294967295
 80068bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068be:	4b14      	ldr	r3, [pc, #80]	; (8006910 <vTaskStartScheduler+0xcc>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068c4:	4b13      	ldr	r3, [pc, #76]	; (8006914 <vTaskStartScheduler+0xd0>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068ca:	f000 fe79 	bl	80075c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068ce:	e00e      	b.n	80068ee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	d10a      	bne.n	80068ee <vTaskStartScheduler+0xaa>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	60fb      	str	r3, [r7, #12]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <vTaskStartScheduler+0xa8>
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	08007c04 	.word	0x08007c04
 80068fc:	08006eb5 	.word	0x08006eb5
 8006900:	2000081c 	.word	0x2000081c
 8006904:	20000644 	.word	0x20000644
 8006908:	20000064 	.word	0x20000064
 800690c:	20000818 	.word	0x20000818
 8006910:	20000804 	.word	0x20000804
 8006914:	200007fc 	.word	0x200007fc

08006918 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <vTaskSuspendAll+0x18>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	4a03      	ldr	r2, [pc, #12]	; (8006930 <vTaskSuspendAll+0x18>)
 8006924:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006926:	bf00      	nop
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	20000820 	.word	0x20000820

08006934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006942:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <xTaskResumeAll+0x114>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <xTaskResumeAll+0x2c>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	603b      	str	r3, [r7, #0]
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006960:	f000 fed0 	bl	8007704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006964:	4b38      	ldr	r3, [pc, #224]	; (8006a48 <xTaskResumeAll+0x114>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3b01      	subs	r3, #1
 800696a:	4a37      	ldr	r2, [pc, #220]	; (8006a48 <xTaskResumeAll+0x114>)
 800696c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800696e:	4b36      	ldr	r3, [pc, #216]	; (8006a48 <xTaskResumeAll+0x114>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d161      	bne.n	8006a3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006976:	4b35      	ldr	r3, [pc, #212]	; (8006a4c <xTaskResumeAll+0x118>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d05d      	beq.n	8006a3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800697e:	e02e      	b.n	80069de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006980:	4b33      	ldr	r3, [pc, #204]	; (8006a50 <xTaskResumeAll+0x11c>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3318      	adds	r3, #24
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f982 	bl	8005c96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3304      	adds	r3, #4
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff f97d 	bl	8005c96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	2201      	movs	r2, #1
 80069a2:	409a      	lsls	r2, r3
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <xTaskResumeAll+0x120>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <xTaskResumeAll+0x120>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <xTaskResumeAll+0x124>)
 80069bc:	441a      	add	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f7ff f909 	bl	8005bdc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <xTaskResumeAll+0x128>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069d8:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <xTaskResumeAll+0x12c>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069de:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <xTaskResumeAll+0x11c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1cc      	bne.n	8006980 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069ec:	f000 fb1c 	bl	8007028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069f0:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <xTaskResumeAll+0x130>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d010      	beq.n	8006a1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069fc:	f000 f836 	bl	8006a6c <xTaskIncrementTick>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a06:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <xTaskResumeAll+0x12c>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1f1      	bne.n	80069fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <xTaskResumeAll+0x130>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a1e:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <xTaskResumeAll+0x12c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a26:	2301      	movs	r3, #1
 8006a28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <xTaskResumeAll+0x134>)
 8006a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a3a:	f000 fe93 	bl	8007764 <vPortExitCritical>

	return xAlreadyYielded;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20000820 	.word	0x20000820
 8006a4c:	200007f8 	.word	0x200007f8
 8006a50:	200007b8 	.word	0x200007b8
 8006a54:	20000800 	.word	0x20000800
 8006a58:	20000648 	.word	0x20000648
 8006a5c:	20000644 	.word	0x20000644
 8006a60:	2000080c 	.word	0x2000080c
 8006a64:	20000808 	.word	0x20000808
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a76:	4b4e      	ldr	r3, [pc, #312]	; (8006bb0 <xTaskIncrementTick+0x144>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 808e 	bne.w	8006b9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a80:	4b4c      	ldr	r3, [pc, #304]	; (8006bb4 <xTaskIncrementTick+0x148>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a88:	4a4a      	ldr	r2, [pc, #296]	; (8006bb4 <xTaskIncrementTick+0x148>)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d120      	bne.n	8006ad6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a94:	4b48      	ldr	r3, [pc, #288]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	603b      	str	r3, [r7, #0]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <xTaskIncrementTick+0x46>
 8006ab4:	4b40      	ldr	r3, [pc, #256]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	4b40      	ldr	r3, [pc, #256]	; (8006bbc <xTaskIncrementTick+0x150>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a3e      	ldr	r2, [pc, #248]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	4a3e      	ldr	r2, [pc, #248]	; (8006bbc <xTaskIncrementTick+0x150>)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	4b3d      	ldr	r3, [pc, #244]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	4a3c      	ldr	r2, [pc, #240]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	f000 faa9 	bl	8007028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ad6:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <xTaskIncrementTick+0x158>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d348      	bcc.n	8006b72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ae0:	4b35      	ldr	r3, [pc, #212]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aea:	4b36      	ldr	r3, [pc, #216]	; (8006bc4 <xTaskIncrementTick+0x158>)
 8006aec:	f04f 32ff 	mov.w	r2, #4294967295
 8006af0:	601a      	str	r2, [r3, #0]
					break;
 8006af2:	e03e      	b.n	8006b72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af4:	4b30      	ldr	r3, [pc, #192]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d203      	bcs.n	8006b14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b0c:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <xTaskIncrementTick+0x158>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b12:	e02e      	b.n	8006b72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff f8bc 	bl	8005c96 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff f8b3 	bl	8005c96 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	2201      	movs	r2, #1
 8006b36:	409a      	lsls	r2, r3
 8006b38:	4b23      	ldr	r3, [pc, #140]	; (8006bc8 <xTaskIncrementTick+0x15c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	4a22      	ldr	r2, [pc, #136]	; (8006bc8 <xTaskIncrementTick+0x15c>)
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4a1f      	ldr	r2, [pc, #124]	; (8006bcc <xTaskIncrementTick+0x160>)
 8006b50:	441a      	add	r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7ff f83f 	bl	8005bdc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	4b1b      	ldr	r3, [pc, #108]	; (8006bd0 <xTaskIncrementTick+0x164>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d3b9      	bcc.n	8006ae0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b70:	e7b6      	b.n	8006ae0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b72:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <xTaskIncrementTick+0x164>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	4914      	ldr	r1, [pc, #80]	; (8006bcc <xTaskIncrementTick+0x160>)
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d901      	bls.n	8006b8e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b8e:	4b11      	ldr	r3, [pc, #68]	; (8006bd4 <xTaskIncrementTick+0x168>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	e004      	b.n	8006ba6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <xTaskIncrementTick+0x16c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	4a0d      	ldr	r2, [pc, #52]	; (8006bd8 <xTaskIncrementTick+0x16c>)
 8006ba4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ba6:	697b      	ldr	r3, [r7, #20]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000820 	.word	0x20000820
 8006bb4:	200007fc 	.word	0x200007fc
 8006bb8:	200007b0 	.word	0x200007b0
 8006bbc:	200007b4 	.word	0x200007b4
 8006bc0:	20000810 	.word	0x20000810
 8006bc4:	20000818 	.word	0x20000818
 8006bc8:	20000800 	.word	0x20000800
 8006bcc:	20000648 	.word	0x20000648
 8006bd0:	20000644 	.word	0x20000644
 8006bd4:	2000080c 	.word	0x2000080c
 8006bd8:	20000808 	.word	0x20000808

08006bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006be2:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <vTaskSwitchContext+0xac>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bea:	4b28      	ldr	r3, [pc, #160]	; (8006c8c <vTaskSwitchContext+0xb0>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bf0:	e044      	b.n	8006c7c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006bf2:	4b26      	ldr	r3, [pc, #152]	; (8006c8c <vTaskSwitchContext+0xb0>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf8:	4b25      	ldr	r3, [pc, #148]	; (8006c90 <vTaskSwitchContext+0xb4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	fab3 f383 	clz	r3, r3
 8006c04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	f1c3 031f 	rsb	r3, r3, #31
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	4921      	ldr	r1, [pc, #132]	; (8006c94 <vTaskSwitchContext+0xb8>)
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	607b      	str	r3, [r7, #4]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vTaskSwitchContext+0x5a>
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4a14      	ldr	r2, [pc, #80]	; (8006c94 <vTaskSwitchContext+0xb8>)
 8006c44:	4413      	add	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d104      	bne.n	8006c68 <vTaskSwitchContext+0x8c>
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <vTaskSwitchContext+0xbc>)
 8006c70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c72:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <vTaskSwitchContext+0xbc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	334c      	adds	r3, #76	; 0x4c
 8006c78:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <vTaskSwitchContext+0xc0>)
 8006c7a:	6013      	str	r3, [r2, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000820 	.word	0x20000820
 8006c8c:	2000080c 	.word	0x2000080c
 8006c90:	20000800 	.word	0x20000800
 8006c94:	20000648 	.word	0x20000648
 8006c98:	20000644 	.word	0x20000644
 8006c9c:	20000064 	.word	0x20000064

08006ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	60fb      	str	r3, [r7, #12]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cc6:	4b07      	ldr	r3, [pc, #28]	; (8006ce4 <vTaskPlaceOnEventList+0x44>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3318      	adds	r3, #24
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fe ffa8 	bl	8005c24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	6838      	ldr	r0, [r7, #0]
 8006cd8:	f000 fb82 	bl	80073e0 <prvAddCurrentTaskToDelayedList>
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000644 	.word	0x20000644

08006ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	60fb      	str	r3, [r7, #12]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	3318      	adds	r3, #24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe ffbc 	bl	8005c96 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1e:	4b1d      	ldr	r3, [pc, #116]	; (8006d94 <xTaskRemoveFromEventList+0xac>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d11c      	bne.n	8006d60 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe ffb3 	bl	8005c96 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	2201      	movs	r2, #1
 8006d36:	409a      	lsls	r2, r3
 8006d38:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <xTaskRemoveFromEventList+0xb0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	4a16      	ldr	r2, [pc, #88]	; (8006d98 <xTaskRemoveFromEventList+0xb0>)
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <xTaskRemoveFromEventList+0xb4>)
 8006d50:	441a      	add	r2, r3
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	3304      	adds	r3, #4
 8006d56:	4619      	mov	r1, r3
 8006d58:	4610      	mov	r0, r2
 8006d5a:	f7fe ff3f 	bl	8005bdc <vListInsertEnd>
 8006d5e:	e005      	b.n	8006d6c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	3318      	adds	r3, #24
 8006d64:	4619      	mov	r1, r3
 8006d66:	480e      	ldr	r0, [pc, #56]	; (8006da0 <xTaskRemoveFromEventList+0xb8>)
 8006d68:	f7fe ff38 	bl	8005bdc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <xTaskRemoveFromEventList+0xbc>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d905      	bls.n	8006d86 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d7e:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <xTaskRemoveFromEventList+0xc0>)
 8006d80:	2201      	movs	r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	e001      	b.n	8006d8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d8a:	697b      	ldr	r3, [r7, #20]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000820 	.word	0x20000820
 8006d98:	20000800 	.word	0x20000800
 8006d9c:	20000648 	.word	0x20000648
 8006da0:	200007b8 	.word	0x200007b8
 8006da4:	20000644 	.word	0x20000644
 8006da8:	2000080c 	.word	0x2000080c

08006dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006db4:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <vTaskInternalSetTimeOutState+0x24>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <vTaskInternalSetTimeOutState+0x28>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	605a      	str	r2, [r3, #4]
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	20000810 	.word	0x20000810
 8006dd4:	200007fc 	.word	0x200007fc

08006dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	613b      	str	r3, [r7, #16]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e1a:	f000 fc73 	bl	8007704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e1e:	4b1d      	ldr	r3, [pc, #116]	; (8006e94 <xTaskCheckForTimeOut+0xbc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d102      	bne.n	8006e3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e023      	b.n	8006e86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <xTaskCheckForTimeOut+0xc0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d007      	beq.n	8006e5a <xTaskCheckForTimeOut+0x82>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d302      	bcc.n	8006e5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e54:	2301      	movs	r3, #1
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	e015      	b.n	8006e86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d20b      	bcs.n	8006e7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	1ad2      	subs	r2, r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff9b 	bl	8006dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	e004      	b.n	8006e86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e86:	f000 fc6d 	bl	8007764 <vPortExitCritical>

	return xReturn;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	200007fc 	.word	0x200007fc
 8006e98:	20000810 	.word	0x20000810

08006e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ea0:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <vTaskMissedYield+0x14>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	2000080c 	.word	0x2000080c

08006eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ebc:	f000 f852 	bl	8006f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ec0:	4b06      	ldr	r3, [pc, #24]	; (8006edc <prvIdleTask+0x28>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d9f9      	bls.n	8006ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ec8:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <prvIdleTask+0x2c>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ed8:	e7f0      	b.n	8006ebc <prvIdleTask+0x8>
 8006eda:	bf00      	nop
 8006edc:	20000648 	.word	0x20000648
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
 8006eee:	e00c      	b.n	8006f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4a12      	ldr	r2, [pc, #72]	; (8006f44 <prvInitialiseTaskLists+0x60>)
 8006efc:	4413      	add	r3, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fe3f 	bl	8005b82 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3301      	adds	r3, #1
 8006f08:	607b      	str	r3, [r7, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b0f      	cmp	r3, #15
 8006f0e:	d9ef      	bls.n	8006ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f10:	480d      	ldr	r0, [pc, #52]	; (8006f48 <prvInitialiseTaskLists+0x64>)
 8006f12:	f7fe fe36 	bl	8005b82 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f16:	480d      	ldr	r0, [pc, #52]	; (8006f4c <prvInitialiseTaskLists+0x68>)
 8006f18:	f7fe fe33 	bl	8005b82 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f1c:	480c      	ldr	r0, [pc, #48]	; (8006f50 <prvInitialiseTaskLists+0x6c>)
 8006f1e:	f7fe fe30 	bl	8005b82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f22:	480c      	ldr	r0, [pc, #48]	; (8006f54 <prvInitialiseTaskLists+0x70>)
 8006f24:	f7fe fe2d 	bl	8005b82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f28:	480b      	ldr	r0, [pc, #44]	; (8006f58 <prvInitialiseTaskLists+0x74>)
 8006f2a:	f7fe fe2a 	bl	8005b82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <prvInitialiseTaskLists+0x78>)
 8006f30:	4a05      	ldr	r2, [pc, #20]	; (8006f48 <prvInitialiseTaskLists+0x64>)
 8006f32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f34:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <prvInitialiseTaskLists+0x7c>)
 8006f36:	4a05      	ldr	r2, [pc, #20]	; (8006f4c <prvInitialiseTaskLists+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000648 	.word	0x20000648
 8006f48:	20000788 	.word	0x20000788
 8006f4c:	2000079c 	.word	0x2000079c
 8006f50:	200007b8 	.word	0x200007b8
 8006f54:	200007cc 	.word	0x200007cc
 8006f58:	200007e4 	.word	0x200007e4
 8006f5c:	200007b0 	.word	0x200007b0
 8006f60:	200007b4 	.word	0x200007b4

08006f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f6a:	e019      	b.n	8006fa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f6c:	f000 fbca 	bl	8007704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <prvCheckTasksWaitingTermination+0x50>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fe8a 	bl	8005c96 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <prvCheckTasksWaitingTermination+0x54>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	4a0b      	ldr	r2, [pc, #44]	; (8006fb8 <prvCheckTasksWaitingTermination+0x54>)
 8006f8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006f94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f96:	f000 fbe5 	bl	8007764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f810 	bl	8006fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e1      	bne.n	8006f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200007cc 	.word	0x200007cc
 8006fb8:	200007f8 	.word	0x200007f8
 8006fbc:	200007e0 	.word	0x200007e0

08006fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	334c      	adds	r3, #76	; 0x4c
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fce1 	bl	8007994 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d108      	bne.n	8006fee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fcb7 	bl	8007954 <vPortFree>
				vPortFree( pxTCB );
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fcb4 	bl	8007954 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fec:	e018      	b.n	8007020 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d103      	bne.n	8007000 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fcab 	bl	8007954 <vPortFree>
	}
 8006ffe:	e00f      	b.n	8007020 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007006:	2b02      	cmp	r3, #2
 8007008:	d00a      	beq.n	8007020 <prvDeleteTCB+0x60>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	60fb      	str	r3, [r7, #12]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <prvDeleteTCB+0x5e>
	}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800702e:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <prvResetNextTaskUnblockTime+0x38>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <prvResetNextTaskUnblockTime+0x3c>)
 800703a:	f04f 32ff 	mov.w	r2, #4294967295
 800703e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007040:	e008      	b.n	8007054 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007042:	4b07      	ldr	r3, [pc, #28]	; (8007060 <prvResetNextTaskUnblockTime+0x38>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4a04      	ldr	r2, [pc, #16]	; (8007064 <prvResetNextTaskUnblockTime+0x3c>)
 8007052:	6013      	str	r3, [r2, #0]
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	200007b0 	.word	0x200007b0
 8007064:	20000818 	.word	0x20000818

08007068 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <xTaskGetSchedulerState+0x34>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007076:	2301      	movs	r3, #1
 8007078:	607b      	str	r3, [r7, #4]
 800707a:	e008      	b.n	800708e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800707c:	4b08      	ldr	r3, [pc, #32]	; (80070a0 <xTaskGetSchedulerState+0x38>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007084:	2302      	movs	r3, #2
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	e001      	b.n	800708e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800708a:	2300      	movs	r3, #0
 800708c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800708e:	687b      	ldr	r3, [r7, #4]
	}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20000804 	.word	0x20000804
 80070a0:	20000820 	.word	0x20000820

080070a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d05e      	beq.n	8007178 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070be:	4b31      	ldr	r3, [pc, #196]	; (8007184 <xTaskPriorityInherit+0xe0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d24e      	bcs.n	8007166 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	db06      	blt.n	80070de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d0:	4b2c      	ldr	r3, [pc, #176]	; (8007184 <xTaskPriorityInherit+0xe0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	f1c3 0210 	rsb	r2, r3, #16
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6959      	ldr	r1, [r3, #20]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4a26      	ldr	r2, [pc, #152]	; (8007188 <xTaskPriorityInherit+0xe4>)
 80070f0:	4413      	add	r3, r2
 80070f2:	4299      	cmp	r1, r3
 80070f4:	d12f      	bne.n	8007156 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fdcb 	bl	8005c96 <uxListRemove>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	2201      	movs	r2, #1
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	43da      	mvns	r2, r3
 8007112:	4b1e      	ldr	r3, [pc, #120]	; (800718c <xTaskPriorityInherit+0xe8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4013      	ands	r3, r2
 8007118:	4a1c      	ldr	r2, [pc, #112]	; (800718c <xTaskPriorityInherit+0xe8>)
 800711a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800711c:	4b19      	ldr	r3, [pc, #100]	; (8007184 <xTaskPriorityInherit+0xe0>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	2201      	movs	r2, #1
 800712c:	409a      	lsls	r2, r3
 800712e:	4b17      	ldr	r3, [pc, #92]	; (800718c <xTaskPriorityInherit+0xe8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4313      	orrs	r3, r2
 8007134:	4a15      	ldr	r2, [pc, #84]	; (800718c <xTaskPriorityInherit+0xe8>)
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4a10      	ldr	r2, [pc, #64]	; (8007188 <xTaskPriorityInherit+0xe4>)
 8007146:	441a      	add	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3304      	adds	r3, #4
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7fe fd44 	bl	8005bdc <vListInsertEnd>
 8007154:	e004      	b.n	8007160 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007156:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <xTaskPriorityInherit+0xe0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e008      	b.n	8007178 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <xTaskPriorityInherit+0xe0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	429a      	cmp	r2, r3
 8007172:	d201      	bcs.n	8007178 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007178:	68fb      	ldr	r3, [r7, #12]
	}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000644 	.word	0x20000644
 8007188:	20000648 	.word	0x20000648
 800718c:	20000800 	.word	0x20000800

08007190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d06e      	beq.n	8007284 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071a6:	4b3a      	ldr	r3, [pc, #232]	; (8007290 <xTaskPriorityDisinherit+0x100>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d00a      	beq.n	80071c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	60fb      	str	r3, [r7, #12]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60bb      	str	r3, [r7, #8]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e8:	1e5a      	subs	r2, r3, #1
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d044      	beq.n	8007284 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d140      	bne.n	8007284 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	3304      	adds	r3, #4
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fd45 	bl	8005c96 <uxListRemove>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d115      	bne.n	800723e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	491f      	ldr	r1, [pc, #124]	; (8007294 <xTaskPriorityDisinherit+0x104>)
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xTaskPriorityDisinherit+0xae>
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	2201      	movs	r2, #1
 800722e:	fa02 f303 	lsl.w	r3, r2, r3
 8007232:	43da      	mvns	r2, r3
 8007234:	4b18      	ldr	r3, [pc, #96]	; (8007298 <xTaskPriorityDisinherit+0x108>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4013      	ands	r3, r2
 800723a:	4a17      	ldr	r2, [pc, #92]	; (8007298 <xTaskPriorityDisinherit+0x108>)
 800723c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	f1c3 0210 	rsb	r2, r3, #16
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	2201      	movs	r2, #1
 8007258:	409a      	lsls	r2, r3
 800725a:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <xTaskPriorityDisinherit+0x108>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4313      	orrs	r3, r2
 8007260:	4a0d      	ldr	r2, [pc, #52]	; (8007298 <xTaskPriorityDisinherit+0x108>)
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4a08      	ldr	r2, [pc, #32]	; (8007294 <xTaskPriorityDisinherit+0x104>)
 8007272:	441a      	add	r2, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7fe fcae 	bl	8005bdc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007280:	2301      	movs	r3, #1
 8007282:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007284:	697b      	ldr	r3, [r7, #20]
	}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000644 	.word	0x20000644
 8007294:	20000648 	.word	0x20000648
 8007298:	20000800 	.word	0x20000800

0800729c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072aa:	2301      	movs	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d077      	beq.n	80073a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	60fb      	str	r3, [r7, #12]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d902      	bls.n	80072e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	61fb      	str	r3, [r7, #28]
 80072e0:	e002      	b.n	80072e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d058      	beq.n	80073a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d153      	bne.n	80073a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072fc:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	429a      	cmp	r2, r3
 8007304:	d10a      	bne.n	800731c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60bb      	str	r3, [r7, #8]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	db04      	blt.n	800733a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f1c3 0210 	rsb	r2, r3, #16
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	6959      	ldr	r1, [r3, #20]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4a19      	ldr	r2, [pc, #100]	; (80073b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800734a:	4413      	add	r3, r2
 800734c:	4299      	cmp	r1, r3
 800734e:	d129      	bne.n	80073a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	3304      	adds	r3, #4
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fc9e 	bl	8005c96 <uxListRemove>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	2201      	movs	r2, #1
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	43da      	mvns	r2, r3
 800736c:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4013      	ands	r3, r2
 8007372:	4a10      	ldr	r2, [pc, #64]	; (80073b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007374:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	2201      	movs	r2, #1
 800737c:	409a      	lsls	r2, r3
 800737e:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4313      	orrs	r3, r2
 8007384:	4a0b      	ldr	r2, [pc, #44]	; (80073b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4a06      	ldr	r2, [pc, #24]	; (80073b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007396:	441a      	add	r2, r3
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fe fc1c 	bl	8005bdc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073a4:	bf00      	nop
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000644 	.word	0x20000644
 80073b0:	20000648 	.word	0x20000648
 80073b4:	20000800 	.word	0x20000800

080073b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80073bc:	4b07      	ldr	r3, [pc, #28]	; (80073dc <pvTaskIncrementMutexHeldCount+0x24>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d004      	beq.n	80073ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <pvTaskIncrementMutexHeldCount+0x24>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073ca:	3201      	adds	r2, #1
 80073cc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <pvTaskIncrementMutexHeldCount+0x24>)
 80073d0:	681b      	ldr	r3, [r3, #0]
	}
 80073d2:	4618      	mov	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000644 	.word	0x20000644

080073e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ea:	4b29      	ldr	r3, [pc, #164]	; (8007490 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f0:	4b28      	ldr	r3, [pc, #160]	; (8007494 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe fc4d 	bl	8005c96 <uxListRemove>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10b      	bne.n	800741a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	2201      	movs	r2, #1
 800740a:	fa02 f303 	lsl.w	r3, r2, r3
 800740e:	43da      	mvns	r2, r3
 8007410:	4b21      	ldr	r3, [pc, #132]	; (8007498 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4013      	ands	r3, r2
 8007416:	4a20      	ldr	r2, [pc, #128]	; (8007498 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007418:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d10a      	bne.n	8007438 <prvAddCurrentTaskToDelayedList+0x58>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d007      	beq.n	8007438 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007428:	4b1a      	ldr	r3, [pc, #104]	; (8007494 <prvAddCurrentTaskToDelayedList+0xb4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	481a      	ldr	r0, [pc, #104]	; (800749c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007432:	f7fe fbd3 	bl	8005bdc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007436:	e026      	b.n	8007486 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007440:	4b14      	ldr	r3, [pc, #80]	; (8007494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	429a      	cmp	r2, r3
 800744e:	d209      	bcs.n	8007464 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007450:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3304      	adds	r3, #4
 800745a:	4619      	mov	r1, r3
 800745c:	4610      	mov	r0, r2
 800745e:	f7fe fbe1 	bl	8005c24 <vListInsert>
}
 8007462:	e010      	b.n	8007486 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <prvAddCurrentTaskToDelayedList+0xb4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3304      	adds	r3, #4
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7fe fbd7 	bl	8005c24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	429a      	cmp	r2, r3
 800747e:	d202      	bcs.n	8007486 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007480:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6013      	str	r3, [r2, #0]
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	200007fc 	.word	0x200007fc
 8007494:	20000644 	.word	0x20000644
 8007498:	20000800 	.word	0x20000800
 800749c:	200007e4 	.word	0x200007e4
 80074a0:	200007b4 	.word	0x200007b4
 80074a4:	200007b0 	.word	0x200007b0
 80074a8:	20000818 	.word	0x20000818

080074ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3b04      	subs	r3, #4
 80074bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3b04      	subs	r3, #4
 80074ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f023 0201 	bic.w	r2, r3, #1
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3b04      	subs	r3, #4
 80074da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074dc:	4a0c      	ldr	r2, [pc, #48]	; (8007510 <pxPortInitialiseStack+0x64>)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3b14      	subs	r3, #20
 80074e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3b04      	subs	r3, #4
 80074f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f06f 0202 	mvn.w	r2, #2
 80074fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3b20      	subs	r3, #32
 8007500:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007502:	68fb      	ldr	r3, [r7, #12]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	08007515 	.word	0x08007515

08007514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800751e:	4b12      	ldr	r3, [pc, #72]	; (8007568 <prvTaskExitError+0x54>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d00a      	beq.n	800753e <prvTaskExitError+0x2a>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	60fb      	str	r3, [r7, #12]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <prvTaskExitError+0x28>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60bb      	str	r3, [r7, #8]
}
 8007550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007552:	bf00      	nop
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0fc      	beq.n	8007554 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	20000014 	.word	0x20000014
 800756c:	00000000 	.word	0x00000000

08007570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <pxCurrentTCBConst2>)
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	6808      	ldr	r0, [r1, #0]
 8007576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757a:	f380 8809 	msr	PSP, r0
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f04f 0000 	mov.w	r0, #0
 8007586:	f380 8811 	msr	BASEPRI, r0
 800758a:	4770      	bx	lr
 800758c:	f3af 8000 	nop.w

08007590 <pxCurrentTCBConst2>:
 8007590:	20000644 	.word	0x20000644
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop

08007598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007598:	4808      	ldr	r0, [pc, #32]	; (80075bc <prvPortStartFirstTask+0x24>)
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	6800      	ldr	r0, [r0, #0]
 800759e:	f380 8808 	msr	MSP, r0
 80075a2:	f04f 0000 	mov.w	r0, #0
 80075a6:	f380 8814 	msr	CONTROL, r0
 80075aa:	b662      	cpsie	i
 80075ac:	b661      	cpsie	f
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	df00      	svc	0
 80075b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075ba:	bf00      	nop
 80075bc:	e000ed08 	.word	0xe000ed08

080075c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075c6:	4b46      	ldr	r3, [pc, #280]	; (80076e0 <xPortStartScheduler+0x120>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a46      	ldr	r2, [pc, #280]	; (80076e4 <xPortStartScheduler+0x124>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d10a      	bne.n	80075e6 <xPortStartScheduler+0x26>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	613b      	str	r3, [r7, #16]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075e6:	4b3e      	ldr	r3, [pc, #248]	; (80076e0 <xPortStartScheduler+0x120>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a3f      	ldr	r2, [pc, #252]	; (80076e8 <xPortStartScheduler+0x128>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d10a      	bne.n	8007606 <xPortStartScheduler+0x46>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007606:	4b39      	ldr	r3, [pc, #228]	; (80076ec <xPortStartScheduler+0x12c>)
 8007608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	22ff      	movs	r2, #255	; 0xff
 8007616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007628:	b2da      	uxtb	r2, r3
 800762a:	4b31      	ldr	r3, [pc, #196]	; (80076f0 <xPortStartScheduler+0x130>)
 800762c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800762e:	4b31      	ldr	r3, [pc, #196]	; (80076f4 <xPortStartScheduler+0x134>)
 8007630:	2207      	movs	r2, #7
 8007632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007634:	e009      	b.n	800764a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007636:	4b2f      	ldr	r3, [pc, #188]	; (80076f4 <xPortStartScheduler+0x134>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3b01      	subs	r3, #1
 800763c:	4a2d      	ldr	r2, [pc, #180]	; (80076f4 <xPortStartScheduler+0x134>)
 800763e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	b2db      	uxtb	r3, r3
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	b2db      	uxtb	r3, r3
 8007648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007652:	2b80      	cmp	r3, #128	; 0x80
 8007654:	d0ef      	beq.n	8007636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007656:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <xPortStartScheduler+0x134>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f1c3 0307 	rsb	r3, r3, #7
 800765e:	2b04      	cmp	r3, #4
 8007660:	d00a      	beq.n	8007678 <xPortStartScheduler+0xb8>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	60bb      	str	r3, [r7, #8]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007678:	4b1e      	ldr	r3, [pc, #120]	; (80076f4 <xPortStartScheduler+0x134>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <xPortStartScheduler+0x134>)
 8007680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007682:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <xPortStartScheduler+0x134>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800768a:	4a1a      	ldr	r2, [pc, #104]	; (80076f4 <xPortStartScheduler+0x134>)
 800768c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007696:	4b18      	ldr	r3, [pc, #96]	; (80076f8 <xPortStartScheduler+0x138>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <xPortStartScheduler+0x138>)
 800769c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076a2:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <xPortStartScheduler+0x138>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a14      	ldr	r2, [pc, #80]	; (80076f8 <xPortStartScheduler+0x138>)
 80076a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076ae:	f000 f8dd 	bl	800786c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076b2:	4b12      	ldr	r3, [pc, #72]	; (80076fc <xPortStartScheduler+0x13c>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076b8:	f000 f8fc 	bl	80078b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076bc:	4b10      	ldr	r3, [pc, #64]	; (8007700 <xPortStartScheduler+0x140>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a0f      	ldr	r2, [pc, #60]	; (8007700 <xPortStartScheduler+0x140>)
 80076c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076c8:	f7ff ff66 	bl	8007598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076cc:	f7ff fa86 	bl	8006bdc <vTaskSwitchContext>
	prvTaskExitError();
 80076d0:	f7ff ff20 	bl	8007514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	e000ed00 	.word	0xe000ed00
 80076e4:	410fc271 	.word	0x410fc271
 80076e8:	410fc270 	.word	0x410fc270
 80076ec:	e000e400 	.word	0xe000e400
 80076f0:	20000824 	.word	0x20000824
 80076f4:	20000828 	.word	0x20000828
 80076f8:	e000ed20 	.word	0xe000ed20
 80076fc:	20000014 	.word	0x20000014
 8007700:	e000ef34 	.word	0xe000ef34

08007704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	607b      	str	r3, [r7, #4]
}
 800771c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800771e:	4b0f      	ldr	r3, [pc, #60]	; (800775c <vPortEnterCritical+0x58>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	4a0d      	ldr	r2, [pc, #52]	; (800775c <vPortEnterCritical+0x58>)
 8007726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007728:	4b0c      	ldr	r3, [pc, #48]	; (800775c <vPortEnterCritical+0x58>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d10f      	bne.n	8007750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <vPortEnterCritical+0x5c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <vPortEnterCritical+0x4c>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	603b      	str	r3, [r7, #0]
}
 800774c:	bf00      	nop
 800774e:	e7fe      	b.n	800774e <vPortEnterCritical+0x4a>
	}
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	20000014 	.word	0x20000014
 8007760:	e000ed04 	.word	0xe000ed04

08007764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800776a:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <vPortExitCritical+0x50>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10a      	bne.n	8007788 <vPortExitCritical+0x24>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	607b      	str	r3, [r7, #4]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <vPortExitCritical+0x50>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3b01      	subs	r3, #1
 800778e:	4a09      	ldr	r2, [pc, #36]	; (80077b4 <vPortExitCritical+0x50>)
 8007790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007792:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <vPortExitCritical+0x50>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <vPortExitCritical+0x42>
 800779a:	2300      	movs	r3, #0
 800779c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20000014 	.word	0x20000014
	...

080077c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077c0:	f3ef 8009 	mrs	r0, PSP
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	4b15      	ldr	r3, [pc, #84]	; (8007820 <pxCurrentTCBConst>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	f01e 0f10 	tst.w	lr, #16
 80077d0:	bf08      	it	eq
 80077d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077da:	6010      	str	r0, [r2, #0]
 80077dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077e4:	f380 8811 	msr	BASEPRI, r0
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f7ff f9f4 	bl	8006bdc <vTaskSwitchContext>
 80077f4:	f04f 0000 	mov.w	r0, #0
 80077f8:	f380 8811 	msr	BASEPRI, r0
 80077fc:	bc09      	pop	{r0, r3}
 80077fe:	6819      	ldr	r1, [r3, #0]
 8007800:	6808      	ldr	r0, [r1, #0]
 8007802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007806:	f01e 0f10 	tst.w	lr, #16
 800780a:	bf08      	it	eq
 800780c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007810:	f380 8809 	msr	PSP, r0
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	f3af 8000 	nop.w

08007820 <pxCurrentTCBConst>:
 8007820:	20000644 	.word	0x20000644
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop

08007828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007842:	f7ff f913 	bl	8006a6c <xTaskIncrementTick>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800784c:	4b06      	ldr	r3, [pc, #24]	; (8007868 <SysTick_Handler+0x40>)
 800784e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	2300      	movs	r3, #0
 8007856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f383 8811 	msr	BASEPRI, r3
}
 800785e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <vPortSetupTimerInterrupt+0x34>)
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007876:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <vPortSetupTimerInterrupt+0x38>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <vPortSetupTimerInterrupt+0x3c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <vPortSetupTimerInterrupt+0x40>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	099b      	lsrs	r3, r3, #6
 8007888:	4a09      	ldr	r2, [pc, #36]	; (80078b0 <vPortSetupTimerInterrupt+0x44>)
 800788a:	3b01      	subs	r3, #1
 800788c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800788e:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <vPortSetupTimerInterrupt+0x34>)
 8007890:	2207      	movs	r2, #7
 8007892:	601a      	str	r2, [r3, #0]
}
 8007894:	bf00      	nop
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	e000e010 	.word	0xe000e010
 80078a4:	e000e018 	.word	0xe000e018
 80078a8:	20000008 	.word	0x20000008
 80078ac:	10624dd3 	.word	0x10624dd3
 80078b0:	e000e014 	.word	0xe000e014

080078b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078c4 <vPortEnableVFP+0x10>
 80078b8:	6801      	ldr	r1, [r0, #0]
 80078ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078be:	6001      	str	r1, [r0, #0]
 80078c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078c2:	bf00      	nop
 80078c4:	e000ed88 	.word	0xe000ed88

080078c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f023 0307 	bic.w	r3, r3, #7
 80078e4:	3308      	adds	r3, #8
 80078e6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80078e8:	f7ff f816 	bl	8006918 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80078ec:	4b16      	ldr	r3, [pc, #88]	; (8007948 <pvPortMalloc+0x80>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d105      	bne.n	8007900 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80078f4:	4b15      	ldr	r3, [pc, #84]	; (800794c <pvPortMalloc+0x84>)
 80078f6:	f023 0307 	bic.w	r3, r3, #7
 80078fa:	461a      	mov	r2, r3
 80078fc:	4b12      	ldr	r3, [pc, #72]	; (8007948 <pvPortMalloc+0x80>)
 80078fe:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007900:	4b13      	ldr	r3, [pc, #76]	; (8007950 <pvPortMalloc+0x88>)
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4413      	add	r3, r2
 8007908:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 800790c:	4293      	cmp	r3, r2
 800790e:	d813      	bhi.n	8007938 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <pvPortMalloc+0x88>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	441a      	add	r2, r3
 8007918:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <pvPortMalloc+0x88>)
 800791a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800791c:	429a      	cmp	r2, r3
 800791e:	d90b      	bls.n	8007938 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8007920:	4b09      	ldr	r3, [pc, #36]	; (8007948 <pvPortMalloc+0x80>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <pvPortMalloc+0x88>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4413      	add	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <pvPortMalloc+0x88>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	4a06      	ldr	r2, [pc, #24]	; (8007950 <pvPortMalloc+0x88>)
 8007936:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007938:	f7fe fffc 	bl	8006934 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800793c:	68fb      	ldr	r3, [r7, #12]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20004430 	.word	0x20004430
 800794c:	20000834 	.word	0x20000834
 8007950:	2000442c 	.word	0x2000442c

08007954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <vPortFree+0x24>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	60fb      	str	r3, [r7, #12]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <vPortFree+0x22>
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <memset>:
 8007984:	4402      	add	r2, r0
 8007986:	4603      	mov	r3, r0
 8007988:	4293      	cmp	r3, r2
 800798a:	d100      	bne.n	800798e <memset+0xa>
 800798c:	4770      	bx	lr
 800798e:	f803 1b01 	strb.w	r1, [r3], #1
 8007992:	e7f9      	b.n	8007988 <memset+0x4>

08007994 <_reclaim_reent>:
 8007994:	4b29      	ldr	r3, [pc, #164]	; (8007a3c <_reclaim_reent+0xa8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4283      	cmp	r3, r0
 800799a:	b570      	push	{r4, r5, r6, lr}
 800799c:	4604      	mov	r4, r0
 800799e:	d04b      	beq.n	8007a38 <_reclaim_reent+0xa4>
 80079a0:	69c3      	ldr	r3, [r0, #28]
 80079a2:	b143      	cbz	r3, 80079b6 <_reclaim_reent+0x22>
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d144      	bne.n	8007a34 <_reclaim_reent+0xa0>
 80079aa:	69e3      	ldr	r3, [r4, #28]
 80079ac:	6819      	ldr	r1, [r3, #0]
 80079ae:	b111      	cbz	r1, 80079b6 <_reclaim_reent+0x22>
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 f879 	bl	8007aa8 <_free_r>
 80079b6:	6961      	ldr	r1, [r4, #20]
 80079b8:	b111      	cbz	r1, 80079c0 <_reclaim_reent+0x2c>
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 f874 	bl	8007aa8 <_free_r>
 80079c0:	69e1      	ldr	r1, [r4, #28]
 80079c2:	b111      	cbz	r1, 80079ca <_reclaim_reent+0x36>
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 f86f 	bl	8007aa8 <_free_r>
 80079ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80079cc:	b111      	cbz	r1, 80079d4 <_reclaim_reent+0x40>
 80079ce:	4620      	mov	r0, r4
 80079d0:	f000 f86a 	bl	8007aa8 <_free_r>
 80079d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079d6:	b111      	cbz	r1, 80079de <_reclaim_reent+0x4a>
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 f865 	bl	8007aa8 <_free_r>
 80079de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079e0:	b111      	cbz	r1, 80079e8 <_reclaim_reent+0x54>
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 f860 	bl	8007aa8 <_free_r>
 80079e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80079ea:	b111      	cbz	r1, 80079f2 <_reclaim_reent+0x5e>
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 f85b 	bl	8007aa8 <_free_r>
 80079f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80079f4:	b111      	cbz	r1, 80079fc <_reclaim_reent+0x68>
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 f856 	bl	8007aa8 <_free_r>
 80079fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80079fe:	b111      	cbz	r1, 8007a06 <_reclaim_reent+0x72>
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 f851 	bl	8007aa8 <_free_r>
 8007a06:	6a23      	ldr	r3, [r4, #32]
 8007a08:	b1b3      	cbz	r3, 8007a38 <_reclaim_reent+0xa4>
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a10:	4718      	bx	r3
 8007a12:	5949      	ldr	r1, [r1, r5]
 8007a14:	b941      	cbnz	r1, 8007a28 <_reclaim_reent+0x94>
 8007a16:	3504      	adds	r5, #4
 8007a18:	69e3      	ldr	r3, [r4, #28]
 8007a1a:	2d80      	cmp	r5, #128	; 0x80
 8007a1c:	68d9      	ldr	r1, [r3, #12]
 8007a1e:	d1f8      	bne.n	8007a12 <_reclaim_reent+0x7e>
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 f841 	bl	8007aa8 <_free_r>
 8007a26:	e7c0      	b.n	80079aa <_reclaim_reent+0x16>
 8007a28:	680e      	ldr	r6, [r1, #0]
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f000 f83c 	bl	8007aa8 <_free_r>
 8007a30:	4631      	mov	r1, r6
 8007a32:	e7ef      	b.n	8007a14 <_reclaim_reent+0x80>
 8007a34:	2500      	movs	r5, #0
 8007a36:	e7ef      	b.n	8007a18 <_reclaim_reent+0x84>
 8007a38:	bd70      	pop	{r4, r5, r6, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000064 	.word	0x20000064

08007a40 <__libc_init_array>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4d0d      	ldr	r5, [pc, #52]	; (8007a78 <__libc_init_array+0x38>)
 8007a44:	4c0d      	ldr	r4, [pc, #52]	; (8007a7c <__libc_init_array+0x3c>)
 8007a46:	1b64      	subs	r4, r4, r5
 8007a48:	10a4      	asrs	r4, r4, #2
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	42a6      	cmp	r6, r4
 8007a4e:	d109      	bne.n	8007a64 <__libc_init_array+0x24>
 8007a50:	4d0b      	ldr	r5, [pc, #44]	; (8007a80 <__libc_init_array+0x40>)
 8007a52:	4c0c      	ldr	r4, [pc, #48]	; (8007a84 <__libc_init_array+0x44>)
 8007a54:	f000 f880 	bl	8007b58 <_init>
 8007a58:	1b64      	subs	r4, r4, r5
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	42a6      	cmp	r6, r4
 8007a60:	d105      	bne.n	8007a6e <__libc_init_array+0x2e>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a68:	4798      	blx	r3
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7ee      	b.n	8007a4c <__libc_init_array+0xc>
 8007a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a72:	4798      	blx	r3
 8007a74:	3601      	adds	r6, #1
 8007a76:	e7f2      	b.n	8007a5e <__libc_init_array+0x1e>
 8007a78:	08007c2c 	.word	0x08007c2c
 8007a7c:	08007c2c 	.word	0x08007c2c
 8007a80:	08007c2c 	.word	0x08007c2c
 8007a84:	08007c30 	.word	0x08007c30

08007a88 <__retarget_lock_acquire_recursive>:
 8007a88:	4770      	bx	lr

08007a8a <__retarget_lock_release_recursive>:
 8007a8a:	4770      	bx	lr

08007a8c <memcpy>:
 8007a8c:	440a      	add	r2, r1
 8007a8e:	4291      	cmp	r1, r2
 8007a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a94:	d100      	bne.n	8007a98 <memcpy+0xc>
 8007a96:	4770      	bx	lr
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aa2:	4291      	cmp	r1, r2
 8007aa4:	d1f9      	bne.n	8007a9a <memcpy+0xe>
 8007aa6:	bd10      	pop	{r4, pc}

08007aa8 <_free_r>:
 8007aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	d044      	beq.n	8007b38 <_free_r+0x90>
 8007aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab2:	9001      	str	r0, [sp, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8007aba:	bfb8      	it	lt
 8007abc:	18e4      	addlt	r4, r4, r3
 8007abe:	f000 f83f 	bl	8007b40 <__malloc_lock>
 8007ac2:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <_free_r+0x94>)
 8007ac4:	9801      	ldr	r0, [sp, #4]
 8007ac6:	6813      	ldr	r3, [r2, #0]
 8007ac8:	b933      	cbnz	r3, 8007ad8 <_free_r+0x30>
 8007aca:	6063      	str	r3, [r4, #4]
 8007acc:	6014      	str	r4, [r2, #0]
 8007ace:	b003      	add	sp, #12
 8007ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ad4:	f000 b83a 	b.w	8007b4c <__malloc_unlock>
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d908      	bls.n	8007aee <_free_r+0x46>
 8007adc:	6825      	ldr	r5, [r4, #0]
 8007ade:	1961      	adds	r1, r4, r5
 8007ae0:	428b      	cmp	r3, r1
 8007ae2:	bf01      	itttt	eq
 8007ae4:	6819      	ldreq	r1, [r3, #0]
 8007ae6:	685b      	ldreq	r3, [r3, #4]
 8007ae8:	1949      	addeq	r1, r1, r5
 8007aea:	6021      	streq	r1, [r4, #0]
 8007aec:	e7ed      	b.n	8007aca <_free_r+0x22>
 8007aee:	461a      	mov	r2, r3
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	b10b      	cbz	r3, 8007af8 <_free_r+0x50>
 8007af4:	42a3      	cmp	r3, r4
 8007af6:	d9fa      	bls.n	8007aee <_free_r+0x46>
 8007af8:	6811      	ldr	r1, [r2, #0]
 8007afa:	1855      	adds	r5, r2, r1
 8007afc:	42a5      	cmp	r5, r4
 8007afe:	d10b      	bne.n	8007b18 <_free_r+0x70>
 8007b00:	6824      	ldr	r4, [r4, #0]
 8007b02:	4421      	add	r1, r4
 8007b04:	1854      	adds	r4, r2, r1
 8007b06:	42a3      	cmp	r3, r4
 8007b08:	6011      	str	r1, [r2, #0]
 8007b0a:	d1e0      	bne.n	8007ace <_free_r+0x26>
 8007b0c:	681c      	ldr	r4, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	6053      	str	r3, [r2, #4]
 8007b12:	440c      	add	r4, r1
 8007b14:	6014      	str	r4, [r2, #0]
 8007b16:	e7da      	b.n	8007ace <_free_r+0x26>
 8007b18:	d902      	bls.n	8007b20 <_free_r+0x78>
 8007b1a:	230c      	movs	r3, #12
 8007b1c:	6003      	str	r3, [r0, #0]
 8007b1e:	e7d6      	b.n	8007ace <_free_r+0x26>
 8007b20:	6825      	ldr	r5, [r4, #0]
 8007b22:	1961      	adds	r1, r4, r5
 8007b24:	428b      	cmp	r3, r1
 8007b26:	bf04      	itt	eq
 8007b28:	6819      	ldreq	r1, [r3, #0]
 8007b2a:	685b      	ldreq	r3, [r3, #4]
 8007b2c:	6063      	str	r3, [r4, #4]
 8007b2e:	bf04      	itt	eq
 8007b30:	1949      	addeq	r1, r1, r5
 8007b32:	6021      	streq	r1, [r4, #0]
 8007b34:	6054      	str	r4, [r2, #4]
 8007b36:	e7ca      	b.n	8007ace <_free_r+0x26>
 8007b38:	b003      	add	sp, #12
 8007b3a:	bd30      	pop	{r4, r5, pc}
 8007b3c:	20004570 	.word	0x20004570

08007b40 <__malloc_lock>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__malloc_lock+0x8>)
 8007b42:	f7ff bfa1 	b.w	8007a88 <__retarget_lock_acquire_recursive>
 8007b46:	bf00      	nop
 8007b48:	2000456c 	.word	0x2000456c

08007b4c <__malloc_unlock>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__malloc_unlock+0x8>)
 8007b4e:	f7ff bf9c 	b.w	8007a8a <__retarget_lock_release_recursive>
 8007b52:	bf00      	nop
 8007b54:	2000456c 	.word	0x2000456c

08007b58 <_init>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	bf00      	nop
 8007b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5e:	bc08      	pop	{r3}
 8007b60:	469e      	mov	lr, r3
 8007b62:	4770      	bx	lr

08007b64 <_fini>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	bf00      	nop
 8007b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6a:	bc08      	pop	{r3}
 8007b6c:	469e      	mov	lr, r3
 8007b6e:	4770      	bx	lr
