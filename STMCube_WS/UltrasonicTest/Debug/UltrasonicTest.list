
UltrasonicTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080049a0  080049a0  000059a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f8  080049f8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a00  08004a00  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a00  08004a00  00005a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a04  08004a04  00005a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08004a14  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004a14  00006160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de81  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218f  00000000  00000000  00013ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00016050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ce  00000000  00000000  00016ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217b5  00000000  00000000  000176ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102ef  00000000  00000000  00038e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd26e  00000000  00000000  00049152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001163c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  00116404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001198f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004988 	.word	0x08004988

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004988 	.word	0x08004988

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b96a 	b.w	8000cd0 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d14e      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a20:	4694      	mov	ip, r2
 8000a22:	458c      	cmp	ip, r1
 8000a24:	4686      	mov	lr, r0
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	d962      	bls.n	8000af2 <__udivmoddi4+0xde>
 8000a2c:	b14a      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a2e:	f1c2 0320 	rsb	r3, r2, #32
 8000a32:	4091      	lsls	r1, r2
 8000a34:	fa20 f303 	lsr.w	r3, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a46:	fa1f f68c 	uxth.w	r6, ip
 8000a4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a52:	fb07 1114 	mls	r1, r7, r4, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb04 f106 	mul.w	r1, r4, r6
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a6a:	f080 8112 	bcs.w	8000c92 <__udivmoddi4+0x27e>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 810f 	bls.w	8000c92 <__udivmoddi4+0x27e>
 8000a74:	3c02      	subs	r4, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a59      	subs	r1, r3, r1
 8000a7a:	fa1f f38e 	uxth.w	r3, lr
 8000a7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a82:	fb07 1110 	mls	r1, r7, r0, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb00 f606 	mul.w	r6, r0, r6
 8000a8e:	429e      	cmp	r6, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x94>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a9a:	f080 80fc 	bcs.w	8000c96 <__udivmoddi4+0x282>
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	f240 80f9 	bls.w	8000c96 <__udivmoddi4+0x282>
 8000aa4:	4463      	add	r3, ip
 8000aa6:	3802      	subs	r0, #2
 8000aa8:	1b9b      	subs	r3, r3, r6
 8000aaa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aae:	2100      	movs	r1, #0
 8000ab0:	b11d      	cbz	r5, 8000aba <__udivmoddi4+0xa6>
 8000ab2:	40d3      	lsrs	r3, r2
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d905      	bls.n	8000ace <__udivmoddi4+0xba>
 8000ac2:	b10d      	cbz	r5, 8000ac8 <__udivmoddi4+0xb4>
 8000ac4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4608      	mov	r0, r1
 8000acc:	e7f5      	b.n	8000aba <__udivmoddi4+0xa6>
 8000ace:	fab3 f183 	clz	r1, r3
 8000ad2:	2900      	cmp	r1, #0
 8000ad4:	d146      	bne.n	8000b64 <__udivmoddi4+0x150>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d302      	bcc.n	8000ae0 <__udivmoddi4+0xcc>
 8000ada:	4290      	cmp	r0, r2
 8000adc:	f0c0 80f0 	bcc.w	8000cc0 <__udivmoddi4+0x2ac>
 8000ae0:	1a86      	subs	r6, r0, r2
 8000ae2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d0e6      	beq.n	8000aba <__udivmoddi4+0xa6>
 8000aec:	e9c5 6300 	strd	r6, r3, [r5]
 8000af0:	e7e3      	b.n	8000aba <__udivmoddi4+0xa6>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	f040 8090 	bne.w	8000c18 <__udivmoddi4+0x204>
 8000af8:	eba1 040c 	sub.w	r4, r1, ip
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	fa1f f78c 	uxth.w	r7, ip
 8000b04:	2101      	movs	r1, #1
 8000b06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b16:	fb07 f006 	mul.w	r0, r7, r6
 8000b1a:	4298      	cmp	r0, r3
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0x11c>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x11a>
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	f200 80cd 	bhi.w	8000cc8 <__udivmoddi4+0x2b4>
 8000b2e:	4626      	mov	r6, r4
 8000b30:	1a1c      	subs	r4, r3, r0
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b42:	fb00 f707 	mul.w	r7, r0, r7
 8000b46:	429f      	cmp	r7, r3
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x148>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b52:	d202      	bcs.n	8000b5a <__udivmoddi4+0x146>
 8000b54:	429f      	cmp	r7, r3
 8000b56:	f200 80b0 	bhi.w	8000cba <__udivmoddi4+0x2a6>
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	1bdb      	subs	r3, r3, r7
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	e7a5      	b.n	8000ab0 <__udivmoddi4+0x9c>
 8000b64:	f1c1 0620 	rsb	r6, r1, #32
 8000b68:	408b      	lsls	r3, r1
 8000b6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6e:	431f      	orrs	r7, r3
 8000b70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b74:	fa04 f301 	lsl.w	r3, r4, r1
 8000b78:	ea43 030c 	orr.w	r3, r3, ip
 8000b7c:	40f4      	lsrs	r4, r6
 8000b7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b82:	0c38      	lsrs	r0, r7, #16
 8000b84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b88:	fbb4 fef0 	udiv	lr, r4, r0
 8000b8c:	fa1f fc87 	uxth.w	ip, r7
 8000b90:	fb00 441e 	mls	r4, r0, lr, r4
 8000b94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b98:	fb0e f90c 	mul.w	r9, lr, ip
 8000b9c:	45a1      	cmp	r9, r4
 8000b9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ba2:	d90a      	bls.n	8000bba <__udivmoddi4+0x1a6>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000baa:	f080 8084 	bcs.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bae:	45a1      	cmp	r9, r4
 8000bb0:	f240 8081 	bls.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb8:	443c      	add	r4, r7
 8000bba:	eba4 0409 	sub.w	r4, r4, r9
 8000bbe:	fa1f f983 	uxth.w	r9, r3
 8000bc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	d907      	bls.n	8000be6 <__udivmoddi4+0x1d2>
 8000bd6:	193c      	adds	r4, r7, r4
 8000bd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bdc:	d267      	bcs.n	8000cae <__udivmoddi4+0x29a>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0x29a>
 8000be2:	3b02      	subs	r3, #2
 8000be4:	443c      	add	r4, r7
 8000be6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bea:	fba0 9302 	umull	r9, r3, r0, r2
 8000bee:	eba4 040c 	sub.w	r4, r4, ip
 8000bf2:	429c      	cmp	r4, r3
 8000bf4:	46ce      	mov	lr, r9
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	d351      	bcc.n	8000c9e <__udivmoddi4+0x28a>
 8000bfa:	d04e      	beq.n	8000c9a <__udivmoddi4+0x286>
 8000bfc:	b155      	cbz	r5, 8000c14 <__udivmoddi4+0x200>
 8000bfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000c02:	eb64 040c 	sbc.w	r4, r4, ip
 8000c06:	fa04 f606 	lsl.w	r6, r4, r6
 8000c0a:	40cb      	lsrs	r3, r1
 8000c0c:	431e      	orrs	r6, r3
 8000c0e:	40cc      	lsrs	r4, r1
 8000c10:	e9c5 6400 	strd	r6, r4, [r5]
 8000c14:	2100      	movs	r1, #0
 8000c16:	e750      	b.n	8000aba <__udivmoddi4+0xa6>
 8000c18:	f1c2 0320 	rsb	r3, r2, #32
 8000c1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	fa24 f303 	lsr.w	r3, r4, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	430c      	orrs	r4, r1
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c34:	fa1f f78c 	uxth.w	r7, ip
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c40:	0c23      	lsrs	r3, r4, #16
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f107 	mul.w	r1, r0, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x24c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c56:	d22c      	bcs.n	8000cb2 <__udivmoddi4+0x29e>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d92a      	bls.n	8000cb2 <__udivmoddi4+0x29e>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c68:	fb08 3311 	mls	r3, r8, r1, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb01 f307 	mul.w	r3, r1, r7
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x276>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c80:	d213      	bcs.n	8000caa <__udivmoddi4+0x296>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d911      	bls.n	8000caa <__udivmoddi4+0x296>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4464      	add	r4, ip
 8000c8a:	1ae4      	subs	r4, r4, r3
 8000c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c90:	e739      	b.n	8000b06 <__udivmoddi4+0xf2>
 8000c92:	4604      	mov	r4, r0
 8000c94:	e6f0      	b.n	8000a78 <__udivmoddi4+0x64>
 8000c96:	4608      	mov	r0, r1
 8000c98:	e706      	b.n	8000aa8 <__udivmoddi4+0x94>
 8000c9a:	45c8      	cmp	r8, r9
 8000c9c:	d2ae      	bcs.n	8000bfc <__udivmoddi4+0x1e8>
 8000c9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ca2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7a8      	b.n	8000bfc <__udivmoddi4+0x1e8>
 8000caa:	4631      	mov	r1, r6
 8000cac:	e7ed      	b.n	8000c8a <__udivmoddi4+0x276>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	e799      	b.n	8000be6 <__udivmoddi4+0x1d2>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e7d4      	b.n	8000c60 <__udivmoddi4+0x24c>
 8000cb6:	46d6      	mov	lr, sl
 8000cb8:	e77f      	b.n	8000bba <__udivmoddi4+0x1a6>
 8000cba:	4463      	add	r3, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	e74d      	b.n	8000b5c <__udivmoddi4+0x148>
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e70f      	b.n	8000ae8 <__udivmoddi4+0xd4>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	e730      	b.n	8000b30 <__udivmoddi4+0x11c>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_idiv0>:
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <UltrasonicInit>:




void UltrasonicInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <UltrasonicInit+0x38>)
 8000cdc:	f002 fb0e 	bl	80032fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	480a      	ldr	r0, [pc, #40]	@ (8000d0c <UltrasonicInit+0x38>)
 8000ce4:	f002 fb0a 	bl	80032fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000ce8:	2108      	movs	r1, #8
 8000cea:	4808      	ldr	r0, [pc, #32]	@ (8000d0c <UltrasonicInit+0x38>)
 8000cec:	f002 fb06 	bl	80032fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000cf0:	210c      	movs	r1, #12
 8000cf2:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <UltrasonicInit+0x38>)
 8000cf4:	f002 fb02 	bl	80032fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <UltrasonicInit+0x3c>)
 8000cfc:	f002 fafe 	bl	80032fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000d00:	2104      	movs	r1, #4
 8000d02:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <UltrasonicInit+0x3c>)
 8000d04:	f002 fafa 	bl	80032fc <HAL_TIM_IC_Start_IT>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000003c 	.word	0x2000003c
 8000d10:	20000084 	.word	0x20000084

08000d14 <delay>:


void delay (uint16_t time)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <delay+0x30>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000d26:	bf00      	nop
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <delay+0x30>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3f9      	bcc.n	8000d28 <delay+0x14>
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000003c 	.word	0x2000003c

08000d48 <HAL_TIM_IC_CaptureCallback>:


// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a92      	ldr	r2, [pc, #584]	@ (8000fa0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	f040 814e 	bne.w	8000ff8 <HAL_TIM_IC_CaptureCallback+0x2b0>
		// This interrupt is from TIM1

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7f1b      	ldrb	r3, [r3, #28]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d14c      	bne.n	8000dfe <HAL_TIM_IC_CaptureCallback+0xb6>
		{
			g_edgeDetect++;
 8000d64:	4b8f      	ldr	r3, [pc, #572]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000d70:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8000d72:	4b8c      	ldr	r3, [pc, #560]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d11c      	bne.n	8000db6 <HAL_TIM_IC_CaptureCallback+0x6e>
			{
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000d7c:	4b8a      	ldr	r3, [pc, #552]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24

				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d84:	4b88      	ldr	r3, [pc, #544]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a1a      	ldr	r2, [r3, #32]
 8000d8a:	4b87      	ldr	r3, [pc, #540]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 020a 	bic.w	r2, r2, #10
 8000d92:	621a      	str	r2, [r3, #32]
 8000d94:	4b84      	ldr	r3, [pc, #528]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6a1a      	ldr	r2, [r3, #32]
 8000d9a:	4b83      	ldr	r3, [pc, #524]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0202 	orr.w	r2, r2, #2
 8000da2:	621a      	str	r2, [r3, #32]

				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000da4:	4b80      	ldr	r3, [pc, #512]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0202 	orr.w	r2, r2, #2
 8000db2:	60da      	str	r2, [r3, #12]


			}
		}
	}
}
 8000db4:	e1c5      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 8000db6:	4b7b      	ldr	r3, [pc, #492]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	f040 81c0 	bne.w	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);  // read second value
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4878      	ldr	r0, [pc, #480]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000dc6:	f002 fe15 	bl	80039f4 <HAL_TIM_ReadCapturedValue>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a77      	ldr	r2, [pc, #476]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x264>)
 8000dce:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000dd0:	4b75      	ldr	r3, [pc, #468]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a1a      	ldr	r2, [r3, #32]
 8000dd6:	4b74      	ldr	r3, [pc, #464]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 020a 	bic.w	r2, r2, #10
 8000dde:	621a      	str	r2, [r3, #32]
 8000de0:	4b71      	ldr	r3, [pc, #452]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b70      	ldr	r3, [pc, #448]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6a12      	ldr	r2, [r2, #32]
 8000dea:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000dec:	4b6e      	ldr	r3, [pc, #440]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	4b6d      	ldr	r3, [pc, #436]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0202 	bic.w	r2, r2, #2
 8000dfa:	60da      	str	r2, [r3, #12]
}
 8000dfc:	e1a1      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7f1b      	ldrb	r3, [r3, #28]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d14c      	bne.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x158>
			g_edgeDetect++;
 8000e06:	4b67      	ldr	r3, [pc, #412]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b64      	ldr	r3, [pc, #400]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000e12:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8000e14:	4b63      	ldr	r3, [pc, #396]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d11c      	bne.n	8000e58 <HAL_TIM_IC_CaptureCallback+0x110>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000e1e:	4b62      	ldr	r3, [pc, #392]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e26:	4b60      	ldr	r3, [pc, #384]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a1a      	ldr	r2, [r3, #32]
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000e34:	621a      	str	r2, [r3, #32]
 8000e36:	4b5c      	ldr	r3, [pc, #368]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0220 	orr.w	r2, r2, #32
 8000e44:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8000e46:	4b58      	ldr	r3, [pc, #352]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	4b56      	ldr	r3, [pc, #344]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0204 	orr.w	r2, r2, #4
 8000e54:	60da      	str	r2, [r3, #12]
}
 8000e56:	e174      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 8000e58:	4b52      	ldr	r3, [pc, #328]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	f040 816f 	bne.w	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);  // read second value
 8000e64:	2104      	movs	r1, #4
 8000e66:	4850      	ldr	r0, [pc, #320]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e68:	f002 fdc4 	bl	80039f4 <HAL_TIM_ReadCapturedValue>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a4f      	ldr	r2, [pc, #316]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x264>)
 8000e70:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e72:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6a1a      	ldr	r2, [r3, #32]
 8000e78:	4b4b      	ldr	r3, [pc, #300]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000e80:	621a      	str	r2, [r3, #32]
 8000e82:	4b49      	ldr	r3, [pc, #292]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b48      	ldr	r3, [pc, #288]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a12      	ldr	r2, [r2, #32]
 8000e8c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8000e8e:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	4b44      	ldr	r3, [pc, #272]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0204 	bic.w	r2, r2, #4
 8000e9c:	60da      	str	r2, [r3, #12]
}
 8000e9e:	e150      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7f1b      	ldrb	r3, [r3, #28]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d14c      	bne.n	8000f42 <HAL_TIM_IC_CaptureCallback+0x1fa>
			g_edgeDetect++;
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000eb4:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11c      	bne.n	8000efa <HAL_TIM_IC_CaptureCallback+0x1b2>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000ec0:	4b39      	ldr	r3, [pc, #228]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ec8:	4b37      	ldr	r3, [pc, #220]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000ed6:	621a      	str	r2, [r3, #32]
 8000ed8:	4b33      	ldr	r3, [pc, #204]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6a1a      	ldr	r2, [r3, #32]
 8000ede:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ee6:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0208 	orr.w	r2, r2, #8
 8000ef6:	60da      	str	r2, [r3, #12]
}
 8000ef8:	e123      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	f040 811e 	bne.w	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);  // read second value
 8000f06:	2108      	movs	r1, #8
 8000f08:	4827      	ldr	r0, [pc, #156]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f0a:	f002 fd73 	bl	80039f4 <HAL_TIM_ReadCapturedValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a26      	ldr	r2, [pc, #152]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x264>)
 8000f12:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f14:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a1a      	ldr	r2, [r3, #32]
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000f22:	621a      	str	r2, [r3, #32]
 8000f24:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6a12      	ldr	r2, [r2, #32]
 8000f2e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0208 	bic.w	r2, r2, #8
 8000f3e:	60da      	str	r2, [r3, #12]
}
 8000f40:	e0ff      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7f1b      	ldrb	r3, [r3, #28]
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	f040 80fb 	bne.w	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
			g_edgeDetect++;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3301      	adds	r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000f58:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d125      	bne.n	8000fb0 <HAL_TIM_IC_CaptureCallback+0x268>
				__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a1a      	ldr	r2, [r3, #32]
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000f7a:	621a      	str	r2, [r3, #32]
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6a1a      	ldr	r2, [r3, #32]
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000f8a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0210 	orr.w	r2, r2, #16
 8000f9a:	60da      	str	r2, [r3, #12]
}
 8000f9c:	e0d1      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
 8000f9e:	bf00      	nop
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	20000038 	.word	0x20000038
 8000fa8:	2000003c 	.word	0x2000003c
 8000fac:	20000034 	.word	0x20000034
			else if (g_edgeDetect==2)   // if the first is already captured
 8000fb0:	4b66      	ldr	r3, [pc, #408]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	f040 80c3 	bne.w	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);  // read second value
 8000fbc:	210c      	movs	r1, #12
 8000fbe:	4864      	ldr	r0, [pc, #400]	@ (8001150 <HAL_TIM_IC_CaptureCallback+0x408>)
 8000fc0:	f002 fd18 	bl	80039f4 <HAL_TIM_ReadCapturedValue>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a63      	ldr	r2, [pc, #396]	@ (8001154 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8000fc8:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fca:	4b61      	ldr	r3, [pc, #388]	@ (8001150 <HAL_TIM_IC_CaptureCallback+0x408>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a1a      	ldr	r2, [r3, #32]
 8000fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001150 <HAL_TIM_IC_CaptureCallback+0x408>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000fd8:	621a      	str	r2, [r3, #32]
 8000fda:	4b5d      	ldr	r3, [pc, #372]	@ (8001150 <HAL_TIM_IC_CaptureCallback+0x408>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b5c      	ldr	r3, [pc, #368]	@ (8001150 <HAL_TIM_IC_CaptureCallback+0x408>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6a12      	ldr	r2, [r2, #32]
 8000fe4:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8001150 <HAL_TIM_IC_CaptureCallback+0x408>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	4b58      	ldr	r3, [pc, #352]	@ (8001150 <HAL_TIM_IC_CaptureCallback+0x408>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0210 	bic.w	r2, r2, #16
 8000ff4:	60da      	str	r2, [r3, #12]
}
 8000ff6:	e0a4      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
	else if (htim->Instance == TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001000:	f040 809f 	bne.w	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7f1b      	ldrb	r3, [r3, #28]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d14b      	bne.n	80010a4 <HAL_TIM_IC_CaptureCallback+0x35c>
			g_edgeDetect++;
 800100c:	4b4f      	ldr	r3, [pc, #316]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3301      	adds	r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b4d      	ldr	r3, [pc, #308]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 8001018:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 800101a:	4b4c      	ldr	r3, [pc, #304]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d11c      	bne.n	800105e <HAL_TIM_IC_CaptureCallback+0x316>
				__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8001024:	4b4c      	ldr	r3, [pc, #304]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800102c:	4b4a      	ldr	r3, [pc, #296]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6a1a      	ldr	r2, [r3, #32]
 8001032:	4b49      	ldr	r3, [pc, #292]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 020a 	bic.w	r2, r2, #10
 800103a:	621a      	str	r2, [r3, #32]
 800103c:	4b46      	ldr	r3, [pc, #280]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	4b45      	ldr	r3, [pc, #276]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0202 	orr.w	r2, r2, #2
 800104a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800104c:	4b42      	ldr	r3, [pc, #264]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	4b41      	ldr	r3, [pc, #260]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0202 	orr.w	r2, r2, #2
 800105a:	60da      	str	r2, [r3, #12]
}
 800105c:	e071      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d16c      	bne.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);  // read second value
 8001068:	2100      	movs	r1, #0
 800106a:	483b      	ldr	r0, [pc, #236]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800106c:	f002 fcc2 	bl	80039f4 <HAL_TIM_ReadCapturedValue>
 8001070:	4603      	mov	r3, r0
 8001072:	4a38      	ldr	r2, [pc, #224]	@ (8001154 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8001074:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001076:	4b38      	ldr	r3, [pc, #224]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 020a 	bic.w	r2, r2, #10
 8001084:	621a      	str	r2, [r3, #32]
 8001086:	4b34      	ldr	r3, [pc, #208]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b33      	ldr	r3, [pc, #204]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6a12      	ldr	r2, [r2, #32]
 8001090:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001092:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	4b2f      	ldr	r3, [pc, #188]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0202 	bic.w	r2, r2, #2
 80010a0:	60da      	str	r2, [r3, #12]
}
 80010a2:	e04e      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7f1b      	ldrb	r3, [r3, #28]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d14a      	bne.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
			g_edgeDetect++;
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 80010b8:	701a      	strb	r2, [r3, #0]
			if (g_edgeDetect==1) // if the first value is not captured
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d11c      	bne.n	80010fe <HAL_TIM_IC_CaptureCallback+0x3b6>
				__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80010cc:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a1a      	ldr	r2, [r3, #32]
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80010da:	621a      	str	r2, [r3, #32]
 80010dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6a1a      	ldr	r2, [r3, #32]
 80010e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0220 	orr.w	r2, r2, #32
 80010ea:	621a      	str	r2, [r3, #32]
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0204 	orr.w	r2, r2, #4
 80010fa:	60da      	str	r2, [r3, #12]
}
 80010fc:	e021      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
			else if (g_edgeDetect==2)   // if the first is already captured
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <HAL_TIM_IC_CaptureCallback+0x404>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d11c      	bne.n	8001142 <HAL_TIM_IC_CaptureCallback+0x3fa>
				g_TimeOfEcho = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);  // read second value
 8001108:	2104      	movs	r1, #4
 800110a:	4813      	ldr	r0, [pc, #76]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800110c:	f002 fc72 	bl	80039f4 <HAL_TIM_ReadCapturedValue>
 8001110:	4603      	mov	r3, r0
 8001112:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8001114:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001124:	621a      	str	r2, [r3, #32]
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a12      	ldr	r2, [r2, #32]
 8001130:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x410>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0204 	bic.w	r2, r2, #4
 8001140:	60da      	str	r2, [r3, #12]
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000038 	.word	0x20000038
 8001150:	2000003c 	.word	0x2000003c
 8001154:	20000034 	.word	0x20000034
 8001158:	20000084 	.word	0x20000084

0800115c <UltrasonicTrigger>:


void UltrasonicTrigger(ULTRASONIC_t Value)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	switch(Value)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b05      	cmp	r3, #5
 800116a:	f200 80ab 	bhi.w	80012c4 <UltrasonicTrigger+0x168>
 800116e:	a201      	add	r2, pc, #4	@ (adr r2, 8001174 <UltrasonicTrigger+0x18>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	0800118d 	.word	0x0800118d
 8001178:	080011c1 	.word	0x080011c1
 800117c:	080011f5 	.word	0x080011f5
 8001180:	08001229 	.word	0x08001229
 8001184:	0800125d 	.word	0x0800125d
 8001188:	08001291 	.word	0x08001291
	{
	case USF:
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800118c:	4b4f      	ldr	r3, [pc, #316]	@ (80012cc <UltrasonicTrigger+0x170>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	4b4e      	ldr	r3, [pc, #312]	@ (80012cc <UltrasonicTrigger+0x170>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0202 	orr.w	r2, r2, #2
 800119a:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	484b      	ldr	r0, [pc, #300]	@ (80012d0 <UltrasonicTrigger+0x174>)
 80011a2:	f001 fa01 	bl	80025a8 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 80011a6:	200a      	movs	r0, #10
 80011a8:	f7ff fdb4 	bl	8000d14 <delay>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80011ac:	4b47      	ldr	r3, [pc, #284]	@ (80012cc <UltrasonicTrigger+0x170>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011b4:	2200      	movs	r2, #0
 80011b6:	2101      	movs	r1, #1
 80011b8:	4845      	ldr	r0, [pc, #276]	@ (80012d0 <UltrasonicTrigger+0x174>)
 80011ba:	f001 f9f5 	bl	80025a8 <HAL_GPIO_WritePin>

		break;
 80011be:	e081      	b.n	80012c4 <UltrasonicTrigger+0x168>

	case USB:
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 80011c0:	4b42      	ldr	r3, [pc, #264]	@ (80012cc <UltrasonicTrigger+0x170>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <UltrasonicTrigger+0x170>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0204 	orr.w	r2, r2, #4
 80011ce:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80011d0:	2201      	movs	r2, #1
 80011d2:	2102      	movs	r1, #2
 80011d4:	483e      	ldr	r0, [pc, #248]	@ (80012d0 <UltrasonicTrigger+0x174>)
 80011d6:	f001 f9e7 	bl	80025a8 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 80011da:	200a      	movs	r0, #10
 80011dc:	f7ff fd9a 	bl	8000d14 <delay>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80011e0:	4b3a      	ldr	r3, [pc, #232]	@ (80012cc <UltrasonicTrigger+0x170>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011e8:	2200      	movs	r2, #0
 80011ea:	2102      	movs	r1, #2
 80011ec:	4838      	ldr	r0, [pc, #224]	@ (80012d0 <UltrasonicTrigger+0x174>)
 80011ee:	f001 f9db 	bl	80025a8 <HAL_GPIO_WritePin>

		break;
 80011f2:	e067      	b.n	80012c4 <UltrasonicTrigger+0x168>

	case USFR:
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 80011f4:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <UltrasonicTrigger+0x170>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	4b34      	ldr	r3, [pc, #208]	@ (80012cc <UltrasonicTrigger+0x170>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0208 	orr.w	r2, r2, #8
 8001202:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001204:	2201      	movs	r2, #1
 8001206:	2104      	movs	r1, #4
 8001208:	4831      	ldr	r0, [pc, #196]	@ (80012d0 <UltrasonicTrigger+0x174>)
 800120a:	f001 f9cd 	bl	80025a8 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 800120e:	200a      	movs	r0, #10
 8001210:	f7ff fd80 	bl	8000d14 <delay>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001214:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <UltrasonicTrigger+0x170>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_RESET);  // pull the TRIG pin low
 800121c:	2200      	movs	r2, #0
 800121e:	2104      	movs	r1, #4
 8001220:	482b      	ldr	r0, [pc, #172]	@ (80012d0 <UltrasonicTrigger+0x174>)
 8001222:	f001 f9c1 	bl	80025a8 <HAL_GPIO_WritePin>

		break;
 8001226:	e04d      	b.n	80012c4 <UltrasonicTrigger+0x168>

	case USBR:
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 8001228:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <UltrasonicTrigger+0x170>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <UltrasonicTrigger+0x170>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0210 	orr.w	r2, r2, #16
 8001236:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_4, TRIG_PIN_4, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001238:	2201      	movs	r2, #1
 800123a:	2108      	movs	r1, #8
 800123c:	4824      	ldr	r0, [pc, #144]	@ (80012d0 <UltrasonicTrigger+0x174>)
 800123e:	f001 f9b3 	bl	80025a8 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 8001242:	200a      	movs	r0, #10
 8001244:	f7ff fd66 	bl	8000d14 <delay>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001248:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <UltrasonicTrigger+0x170>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_GPIO_WritePin(TRIG_PORT_4, TRIG_PIN_4, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001250:	2200      	movs	r2, #0
 8001252:	2108      	movs	r1, #8
 8001254:	481e      	ldr	r0, [pc, #120]	@ (80012d0 <UltrasonicTrigger+0x174>)
 8001256:	f001 f9a7 	bl	80025a8 <HAL_GPIO_WritePin>

		break;
 800125a:	e033      	b.n	80012c4 <UltrasonicTrigger+0x168>

	case USFL:
		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <UltrasonicTrigger+0x178>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <UltrasonicTrigger+0x178>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0202 	orr.w	r2, r2, #2
 800126a:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_5, TRIG_PIN_5, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800126c:	2201      	movs	r2, #1
 800126e:	2180      	movs	r1, #128	@ 0x80
 8001270:	4819      	ldr	r0, [pc, #100]	@ (80012d8 <UltrasonicTrigger+0x17c>)
 8001272:	f001 f999 	bl	80025a8 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 8001276:	200a      	movs	r0, #10
 8001278:	f7ff fd4c 	bl	8000d14 <delay>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <UltrasonicTrigger+0x178>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_GPIO_WritePin(TRIG_PORT_5, TRIG_PIN_5, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001284:	2200      	movs	r2, #0
 8001286:	2180      	movs	r1, #128	@ 0x80
 8001288:	4813      	ldr	r0, [pc, #76]	@ (80012d8 <UltrasonicTrigger+0x17c>)
 800128a:	f001 f98d 	bl	80025a8 <HAL_GPIO_WritePin>

		break;
 800128e:	e019      	b.n	80012c4 <UltrasonicTrigger+0x168>

	case USBL:
		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <UltrasonicTrigger+0x178>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <UltrasonicTrigger+0x178>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0204 	orr.w	r2, r2, #4
 800129e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(TRIG_PORT_6, TRIG_PIN_6, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80012a0:	2201      	movs	r2, #1
 80012a2:	2110      	movs	r1, #16
 80012a4:	480a      	ldr	r0, [pc, #40]	@ (80012d0 <UltrasonicTrigger+0x174>)
 80012a6:	f001 f97f 	bl	80025a8 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 80012aa:	200a      	movs	r0, #10
 80012ac:	f7ff fd32 	bl	8000d14 <delay>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <UltrasonicTrigger+0x178>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_GPIO_WritePin(TRIG_PORT_6, TRIG_PIN_6, GPIO_PIN_RESET);  // pull the TRIG pin low
 80012b8:	2200      	movs	r2, #0
 80012ba:	2110      	movs	r1, #16
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <UltrasonicTrigger+0x174>)
 80012be:	f001 f973 	bl	80025a8 <HAL_GPIO_WritePin>

		break;
 80012c2:	bf00      	nop
	}
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000003c 	.word	0x2000003c
 80012d0:	40020800 	.word	0x40020800
 80012d4:	20000084 	.word	0x20000084
 80012d8:	40020000 	.word	0x40020000
 80012dc:	00000000 	.word	0x00000000

080012e0 <Ultrasonic_Distance>:



void Ultrasonic_Distance(ULTRASONIC_t Value , uint16_t * DisUltrasonic)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]

	uint8_t _2_edgeCatched = 1 ;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]

	UltrasonicTrigger(Value);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff32 	bl	800115c <UltrasonicTrigger>

	/*  wait until catch riging and failing edge for Echo */
	if((Value <= USBR) && (Value >= USF))
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	f200 8084 	bhi.w	8001408 <Ultrasonic_Distance+0x128>
	{
		while(g_edgeDetect != 2)
 8001300:	e07b      	b.n	80013fa <Ultrasonic_Distance+0x11a>
		{
			if(__HAL_TIM_GET_COUNTER(&htim1) > 20000)
 8001302:	4b7f      	ldr	r3, [pc, #508]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800130c:	4293      	cmp	r3, r2
 800130e:	d974      	bls.n	80013fa <Ultrasonic_Distance+0x11a>
			{
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001310:	4b7b      	ldr	r3, [pc, #492]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
				_2_edgeCatched = 0 ;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
				g_edgeDetect = 0 ;
 800131c:	4b79      	ldr	r3, [pc, #484]	@ (8001504 <Ultrasonic_Distance+0x224>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
				switch(Value)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b03      	cmp	r3, #3
 8001326:	f200 80c1 	bhi.w	80014ac <Ultrasonic_Distance+0x1cc>
 800132a:	a201      	add	r2, pc, #4	@ (adr r2, 8001330 <Ultrasonic_Distance+0x50>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001341 	.word	0x08001341
 8001334:	0800136f 	.word	0x0800136f
 8001338:	0800139d 	.word	0x0800139d
 800133c:	080013cb 	.word	0x080013cb
				{
				case USF :
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001340:	4b6f      	ldr	r3, [pc, #444]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	4b6e      	ldr	r3, [pc, #440]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020a 	bic.w	r2, r2, #10
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	4b6b      	ldr	r3, [pc, #428]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b6a      	ldr	r3, [pc, #424]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a12      	ldr	r2, [r2, #32]
 800135a:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800135c:	4b68      	ldr	r3, [pc, #416]	@ (8001500 <Ultrasonic_Distance+0x220>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	4b67      	ldr	r3, [pc, #412]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0202 	bic.w	r2, r2, #2
 800136a:	60da      	str	r2, [r3, #12]
					break ;
 800136c:	e044      	b.n	80013f8 <Ultrasonic_Distance+0x118>
				case USB :
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800136e:	4b64      	ldr	r3, [pc, #400]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a1a      	ldr	r2, [r3, #32]
 8001374:	4b62      	ldr	r3, [pc, #392]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800137c:	621a      	str	r2, [r3, #32]
 800137e:	4b60      	ldr	r3, [pc, #384]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b5f      	ldr	r3, [pc, #380]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a12      	ldr	r2, [r2, #32]
 8001388:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 800138a:	4b5d      	ldr	r3, [pc, #372]	@ (8001500 <Ultrasonic_Distance+0x220>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	4b5b      	ldr	r3, [pc, #364]	@ (8001500 <Ultrasonic_Distance+0x220>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0204 	bic.w	r2, r2, #4
 8001398:	60da      	str	r2, [r3, #12]
					break ;
 800139a:	e02d      	b.n	80013f8 <Ultrasonic_Distance+0x118>
				case USFR :
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800139c:	4b58      	ldr	r3, [pc, #352]	@ (8001500 <Ultrasonic_Distance+0x220>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6a1a      	ldr	r2, [r3, #32]
 80013a2:	4b57      	ldr	r3, [pc, #348]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80013aa:	621a      	str	r2, [r3, #32]
 80013ac:	4b54      	ldr	r3, [pc, #336]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b53      	ldr	r3, [pc, #332]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a12      	ldr	r2, [r2, #32]
 80013b6:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 80013b8:	4b51      	ldr	r3, [pc, #324]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	4b50      	ldr	r3, [pc, #320]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0208 	bic.w	r2, r2, #8
 80013c6:	60da      	str	r2, [r3, #12]
					break ;
 80013c8:	e016      	b.n	80013f8 <Ultrasonic_Distance+0x118>
				case USBR :
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80013ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a1a      	ldr	r2, [r3, #32]
 80013d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80013d8:	621a      	str	r2, [r3, #32]
 80013da:	4b49      	ldr	r3, [pc, #292]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b48      	ldr	r3, [pc, #288]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6a12      	ldr	r2, [r2, #32]
 80013e4:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 80013e6:	4b46      	ldr	r3, [pc, #280]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	4b44      	ldr	r3, [pc, #272]	@ (8001500 <Ultrasonic_Distance+0x220>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0210 	bic.w	r2, r2, #16
 80013f4:	60da      	str	r2, [r3, #12]
					break ;
 80013f6:	bf00      	nop
				}
				break;
 80013f8:	e058      	b.n	80014ac <Ultrasonic_Distance+0x1cc>
		while(g_edgeDetect != 2)
 80013fa:	4b42      	ldr	r3, [pc, #264]	@ (8001504 <Ultrasonic_Distance+0x224>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	f47f af7e 	bne.w	8001302 <Ultrasonic_Distance+0x22>
 8001406:	e052      	b.n	80014ae <Ultrasonic_Distance+0x1ce>
			}

		}
	}
	else if((Value == USBL) || (Value == USFL))
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d048      	beq.n	80014a0 <Ultrasonic_Distance+0x1c0>
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b04      	cmp	r3, #4
 8001412:	d14c      	bne.n	80014ae <Ultrasonic_Distance+0x1ce>
	{
		while(g_edgeDetect != 2)
 8001414:	e044      	b.n	80014a0 <Ultrasonic_Distance+0x1c0>
		{
			if(__HAL_TIM_GET_COUNTER(&htim2) > 20000)
 8001416:	4b3c      	ldr	r3, [pc, #240]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001420:	4293      	cmp	r3, r2
 8001422:	d93d      	bls.n	80014a0 <Ultrasonic_Distance+0x1c0>
			{
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001424:	4b38      	ldr	r3, [pc, #224]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
				_2_edgeCatched = 0 ;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
				g_edgeDetect = 0 ;
 8001430:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <Ultrasonic_Distance+0x224>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
				switch(Value)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d002      	beq.n	8001442 <Ultrasonic_Distance+0x162>
 800143c:	2b05      	cmp	r3, #5
 800143e:	d017      	beq.n	8001470 <Ultrasonic_Distance+0x190>
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
					__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
					break ;
				}

				break;
 8001440:	e035      	b.n	80014ae <Ultrasonic_Distance+0x1ce>
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <Ultrasonic_Distance+0x228>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 020a 	bic.w	r2, r2, #10
 8001450:	621a      	str	r2, [r3, #32]
 8001452:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a12      	ldr	r2, [r2, #32]
 800145c:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0202 	bic.w	r2, r2, #2
 800146c:	60da      	str	r2, [r3, #12]
					break ;
 800146e:	e016      	b.n	800149e <Ultrasonic_Distance+0x1be>
					__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001470:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800147e:	621a      	str	r2, [r3, #32]
 8001480:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6a12      	ldr	r2, [r2, #32]
 800148a:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 800148c:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <Ultrasonic_Distance+0x228>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <Ultrasonic_Distance+0x228>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0204 	bic.w	r2, r2, #4
 800149a:	60da      	str	r2, [r3, #12]
					break ;
 800149c:	bf00      	nop
				break;
 800149e:	e006      	b.n	80014ae <Ultrasonic_Distance+0x1ce>
		while(g_edgeDetect != 2)
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <Ultrasonic_Distance+0x224>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d1b5      	bne.n	8001416 <Ultrasonic_Distance+0x136>
 80014aa:	e000      	b.n	80014ae <Ultrasonic_Distance+0x1ce>
				break;
 80014ac:	bf00      	nop
		}
	}


	/*  Make it equal zero to be able to perform same operation*/
    g_edgeDetect = 0 ;
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <Ultrasonic_Distance+0x224>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
    if(_2_edgeCatched == 1)
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d114      	bne.n	80014e4 <Ultrasonic_Distance+0x204>
    {
    	*DisUltrasonic = (uint32_t)g_TimeOfEcho / 57.5;
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <Ultrasonic_Distance+0x22c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ffe4 	bl	800048c <__aeabi_ui2d>
 80014c4:	a30c      	add	r3, pc, #48	@ (adr r3, 80014f8 <Ultrasonic_Distance+0x218>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f983 	bl	80007d4 <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fa65 	bl	80009a4 <__aeabi_d2uiz>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	801a      	strh	r2, [r3, #0]
    }




}
 80014e2:	e003      	b.n	80014ec <Ultrasonic_Distance+0x20c>
    	*DisUltrasonic = 400;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80014ea:	801a      	strh	r2, [r3, #0]
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	f3af 8000 	nop.w
 80014f8:	00000000 	.word	0x00000000
 80014fc:	404cc000 	.word	0x404cc000
 8001500:	2000003c 	.word	0x2000003c
 8001504:	20000038 	.word	0x20000038
 8001508:	20000084 	.word	0x20000084
 800150c:	20000034 	.word	0x20000034

08001510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <MX_GPIO_Init+0xf8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a36      	ldr	r2, [pc, #216]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a2f      	ldr	r2, [pc, #188]	@ (8001608 <MX_GPIO_Init+0xf8>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a28      	ldr	r2, [pc, #160]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a21      	ldr	r2, [pc, #132]	@ (8001608 <MX_GPIO_Init+0xf8>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <MX_GPIO_Init+0xf8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001596:	2200      	movs	r2, #0
 8001598:	211f      	movs	r1, #31
 800159a:	481c      	ldr	r0, [pc, #112]	@ (800160c <MX_GPIO_Init+0xfc>)
 800159c:	f001 f804 	bl	80025a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	21a0      	movs	r1, #160	@ 0xa0
 80015a4:	481a      	ldr	r0, [pc, #104]	@ (8001610 <MX_GPIO_Init+0x100>)
 80015a6:	f000 ffff 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4812      	ldr	r0, [pc, #72]	@ (800160c <MX_GPIO_Init+0xfc>)
 80015c2:	f000 fe5d 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015c6:	231f      	movs	r3, #31
 80015c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <MX_GPIO_Init+0xfc>)
 80015de:	f000 fe4f 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 80015e2:	23a0      	movs	r3, #160	@ 0xa0
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_GPIO_Init+0x100>)
 80015fa:	f000 fe41 	bl	8002280 <HAL_GPIO_Init>

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	@ 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40020800 	.word	0x40020800
 8001610:	40020000 	.word	0x40020000

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 fcad 	bl	8001f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f913 	bl	8001848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f7ff ff75 	bl	8001510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001626:	f000 fb8b 	bl	8001d40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800162a:	f000 f9f1 	bl	8001a10 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800162e:	f000 fbb1 	bl	8001d94 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001632:	f000 fa81 	bl	8001b38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*  ⚠�?used to set ICU interrupt   */
  UltrasonicInit();
 8001636:	f7ff fb4d 	bl	8000cd4 <UltrasonicInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t it = 0 ; it < 6; it++)
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	e0de      	b.n	80017fe <main+0x1ea>
	  {

	    Ultrasonic_Distance(it,&Ultrasonic_Read[it]);
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4a74      	ldr	r2, [pc, #464]	@ (8001818 <main+0x204>)
 8001646:	441a      	add	r2, r3
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe47 	bl	80012e0 <Ultrasonic_Distance>
	    HAL_UART_Transmit(&huart3,(uint8_t * )"Ultrasonic",10,1000);
 8001652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001656:	220a      	movs	r2, #10
 8001658:	4970      	ldr	r1, [pc, #448]	@ (800181c <main+0x208>)
 800165a:	4871      	ldr	r0, [pc, #452]	@ (8001820 <main+0x20c>)
 800165c:	f002 fdac 	bl	80041b8 <HAL_UART_Transmit>
	    switch(it)
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d83e      	bhi.n	80016e4 <main+0xd0>
 8001666:	a201      	add	r2, pc, #4	@ (adr r2, 800166c <main+0x58>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	08001685 	.word	0x08001685
 8001670:	08001695 	.word	0x08001695
 8001674:	080016a5 	.word	0x080016a5
 8001678:	080016b5 	.word	0x080016b5
 800167c:	080016c5 	.word	0x080016c5
 8001680:	080016d5 	.word	0x080016d5
	    {
	    case USF :
	    	HAL_UART_Transmit(&huart3,(uint8_t * )"1: ",3,1000);
 8001684:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001688:	2203      	movs	r2, #3
 800168a:	4966      	ldr	r1, [pc, #408]	@ (8001824 <main+0x210>)
 800168c:	4864      	ldr	r0, [pc, #400]	@ (8001820 <main+0x20c>)
 800168e:	f002 fd93 	bl	80041b8 <HAL_UART_Transmit>
	    	break;
 8001692:	e027      	b.n	80016e4 <main+0xd0>
	    case USB :
	    	HAL_UART_Transmit(&huart3,(uint8_t * )"2: ",3,1000);
 8001694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001698:	2203      	movs	r2, #3
 800169a:	4963      	ldr	r1, [pc, #396]	@ (8001828 <main+0x214>)
 800169c:	4860      	ldr	r0, [pc, #384]	@ (8001820 <main+0x20c>)
 800169e:	f002 fd8b 	bl	80041b8 <HAL_UART_Transmit>
			break;
 80016a2:	e01f      	b.n	80016e4 <main+0xd0>
	    case USFR :
	    	HAL_UART_Transmit(&huart3,(uint8_t * )"3: ",3,1000);
 80016a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a8:	2203      	movs	r2, #3
 80016aa:	4960      	ldr	r1, [pc, #384]	@ (800182c <main+0x218>)
 80016ac:	485c      	ldr	r0, [pc, #368]	@ (8001820 <main+0x20c>)
 80016ae:	f002 fd83 	bl	80041b8 <HAL_UART_Transmit>
			break;
 80016b2:	e017      	b.n	80016e4 <main+0xd0>
	    case USBR :
	    	HAL_UART_Transmit(&huart3,(uint8_t * )"4: ",3,1000);
 80016b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b8:	2203      	movs	r2, #3
 80016ba:	495d      	ldr	r1, [pc, #372]	@ (8001830 <main+0x21c>)
 80016bc:	4858      	ldr	r0, [pc, #352]	@ (8001820 <main+0x20c>)
 80016be:	f002 fd7b 	bl	80041b8 <HAL_UART_Transmit>
			break;
 80016c2:	e00f      	b.n	80016e4 <main+0xd0>
	    case USFL :
	    	HAL_UART_Transmit(&huart3,(uint8_t * )"5: ",3,1000);
 80016c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c8:	2203      	movs	r2, #3
 80016ca:	495a      	ldr	r1, [pc, #360]	@ (8001834 <main+0x220>)
 80016cc:	4854      	ldr	r0, [pc, #336]	@ (8001820 <main+0x20c>)
 80016ce:	f002 fd73 	bl	80041b8 <HAL_UART_Transmit>
			break;
 80016d2:	e007      	b.n	80016e4 <main+0xd0>
	    case USBL:
	    	HAL_UART_Transmit(&huart3,(uint8_t * )"6: ",3,1000);
 80016d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d8:	2203      	movs	r2, #3
 80016da:	4957      	ldr	r1, [pc, #348]	@ (8001838 <main+0x224>)
 80016dc:	4850      	ldr	r0, [pc, #320]	@ (8001820 <main+0x20c>)
 80016de:	f002 fd6b 	bl	80041b8 <HAL_UART_Transmit>
			break;
 80016e2:	bf00      	nop
	    }

		uint16_t Num  = Ultrasonic_Read[it];
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001818 <main+0x204>)
 80016e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ec:	81bb      	strh	r3, [r7, #12]
		uint16_t reversed_Num = 0 ;
 80016ee:	2300      	movs	r3, #0
 80016f0:	817b      	strh	r3, [r7, #10]
		uint8_t I2S[6] = {};
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	2300      	movs	r3, #0
 80016f8:	80bb      	strh	r3, [r7, #4]
		uint8_t Count_Num = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	727b      	strb	r3, [r7, #9]
		uint8_t ten_multiple = 0 ;
 80016fe:	2300      	movs	r3, #0
 8001700:	723b      	strb	r3, [r7, #8]
		uint8_t firstZeros = 0 ;
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
		while(Num > 0)
 8001706:	e02f      	b.n	8001768 <main+0x154>
		{
		  reversed_Num *= 10 ;
 8001708:	897b      	ldrh	r3, [r7, #10]
 800170a:	461a      	mov	r2, r3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	817b      	strh	r3, [r7, #10]
		  if(firstZeros == 0)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d112      	bne.n	8001740 <main+0x12c>
		  {
			  if( (Num %10 ) == 0)
 800171a:	89ba      	ldrh	r2, [r7, #12]
 800171c:	4b47      	ldr	r3, [pc, #284]	@ (800183c <main+0x228>)
 800171e:	fba3 1302 	umull	r1, r3, r3, r2
 8001722:	08d9      	lsrs	r1, r3, #3
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d103      	bne.n	800173c <main+0x128>
			  {
				  ten_multiple++;
 8001734:	7a3b      	ldrb	r3, [r7, #8]
 8001736:	3301      	adds	r3, #1
 8001738:	723b      	strb	r3, [r7, #8]
 800173a:	e001      	b.n	8001740 <main+0x12c>
			  }
			  else
			  {
				  firstZeros = 1 ;
 800173c:	2301      	movs	r3, #1
 800173e:	71fb      	strb	r3, [r7, #7]
			  }
		  }
		  reversed_Num += Num %10 ;
 8001740:	89ba      	ldrh	r2, [r7, #12]
 8001742:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <main+0x228>)
 8001744:	fba3 1302 	umull	r1, r3, r3, r2
 8001748:	08d9      	lsrs	r1, r3, #3
 800174a:	460b      	mov	r3, r1
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	b29a      	uxth	r2, r3
 8001756:	897b      	ldrh	r3, [r7, #10]
 8001758:	4413      	add	r3, r2
 800175a:	817b      	strh	r3, [r7, #10]
		  Num /= 10;
 800175c:	89bb      	ldrh	r3, [r7, #12]
 800175e:	4a37      	ldr	r2, [pc, #220]	@ (800183c <main+0x228>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	81bb      	strh	r3, [r7, #12]
		while(Num > 0)
 8001768:	89bb      	ldrh	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1cc      	bne.n	8001708 <main+0xf4>
		}
		while(reversed_Num > 0)
 800176e:	e01b      	b.n	80017a8 <main+0x194>
		{
		  I2S[Count_Num] = (reversed_Num % 10) + '0';
 8001770:	897a      	ldrh	r2, [r7, #10]
 8001772:	4b32      	ldr	r3, [pc, #200]	@ (800183c <main+0x228>)
 8001774:	fba3 1302 	umull	r1, r3, r3, r2
 8001778:	08d9      	lsrs	r1, r3, #3
 800177a:	460b      	mov	r3, r1
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	b29b      	uxth	r3, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	7a7b      	ldrb	r3, [r7, #9]
 800178a:	3230      	adds	r2, #48	@ 0x30
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	3310      	adds	r3, #16
 8001790:	443b      	add	r3, r7
 8001792:	f803 2c10 	strb.w	r2, [r3, #-16]
		  reversed_Num /= 10;
 8001796:	897b      	ldrh	r3, [r7, #10]
 8001798:	4a28      	ldr	r2, [pc, #160]	@ (800183c <main+0x228>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	817b      	strh	r3, [r7, #10]
		  Count_Num++;
 80017a2:	7a7b      	ldrb	r3, [r7, #9]
 80017a4:	3301      	adds	r3, #1
 80017a6:	727b      	strb	r3, [r7, #9]
		while(reversed_Num > 0)
 80017a8:	897b      	ldrh	r3, [r7, #10]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1e0      	bne.n	8001770 <main+0x15c>
		}
		while(ten_multiple)
 80017ae:	e00b      	b.n	80017c8 <main+0x1b4>
		{
			I2S[Count_Num] = '0';
 80017b0:	7a7b      	ldrb	r3, [r7, #9]
 80017b2:	3310      	adds	r3, #16
 80017b4:	443b      	add	r3, r7
 80017b6:	2230      	movs	r2, #48	@ 0x30
 80017b8:	f803 2c10 	strb.w	r2, [r3, #-16]
		    Count_Num++;
 80017bc:	7a7b      	ldrb	r3, [r7, #9]
 80017be:	3301      	adds	r3, #1
 80017c0:	727b      	strb	r3, [r7, #9]
		    ten_multiple--;
 80017c2:	7a3b      	ldrb	r3, [r7, #8]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	723b      	strb	r3, [r7, #8]
		while(ten_multiple)
 80017c8:	7a3b      	ldrb	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <main+0x19c>
		}
		I2S[Count_Num] = '\0';
 80017ce:	7a7b      	ldrb	r3, [r7, #9]
 80017d0:	3310      	adds	r3, #16
 80017d2:	443b      	add	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	f803 2c10 	strb.w	r2, [r3, #-16]

		HAL_UART_Transmit(&huart3,(uint8_t * )I2S,Count_Num,1000);
 80017da:	7a7b      	ldrb	r3, [r7, #9]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4639      	mov	r1, r7
 80017e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e4:	480e      	ldr	r0, [pc, #56]	@ (8001820 <main+0x20c>)
 80017e6:	f002 fce7 	bl	80041b8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,(uint8_t * )"\r ",1,1000);
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	2201      	movs	r2, #1
 80017f0:	4913      	ldr	r1, [pc, #76]	@ (8001840 <main+0x22c>)
 80017f2:	480b      	ldr	r0, [pc, #44]	@ (8001820 <main+0x20c>)
 80017f4:	f002 fce0 	bl	80041b8 <HAL_UART_Transmit>
	  for(uint8_t it = 0 ; it < 6; it++)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	3301      	adds	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b05      	cmp	r3, #5
 8001802:	f67f af1d 	bls.w	8001640 <main+0x2c>
	  }


		HAL_UART_Transmit(&huart3,(uint8_t * )"-------------------\r",20,1000);
 8001806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180a:	2214      	movs	r2, #20
 800180c:	490d      	ldr	r1, [pc, #52]	@ (8001844 <main+0x230>)
 800180e:	4804      	ldr	r0, [pc, #16]	@ (8001820 <main+0x20c>)
 8001810:	f002 fcd2 	bl	80041b8 <HAL_UART_Transmit>
	  for(uint8_t it = 0 ; it < 6; it++)
 8001814:	e711      	b.n	800163a <main+0x26>
 8001816:	bf00      	nop
 8001818:	20000028 	.word	0x20000028
 800181c:	080049a0 	.word	0x080049a0
 8001820:	20000114 	.word	0x20000114
 8001824:	080049ac 	.word	0x080049ac
 8001828:	080049b0 	.word	0x080049b0
 800182c:	080049b4 	.word	0x080049b4
 8001830:	080049b8 	.word	0x080049b8
 8001834:	080049bc 	.word	0x080049bc
 8001838:	080049c0 	.word	0x080049c0
 800183c:	cccccccd 	.word	0xcccccccd
 8001840:	080049c4 	.word	0x080049c4
 8001844:	080049c8 	.word	0x080049c8

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b094      	sub	sp, #80	@ 0x50
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	2234      	movs	r2, #52	@ 0x34
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f003 f86a 	bl	8004930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <SystemClock_Config+0xb8>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <SystemClock_Config+0xb8>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187a:	6413      	str	r3, [r2, #64]	@ 0x40
 800187c:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <SystemClock_Config+0xb8>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <SystemClock_Config+0xbc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001894:	4a1b      	ldr	r2, [pc, #108]	@ (8001904 <SystemClock_Config+0xbc>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <SystemClock_Config+0xbc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 f9d8 	bl	8002c70 <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018c6:	f000 f81f 	bl	8001908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ca:	230f      	movs	r3, #15
 80018cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fe78 	bl	80025dc <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80018f2:	f000 f809 	bl	8001908 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	@ 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <Error_Handler+0x8>

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_MspInit+0x4c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001928:	6453      	str	r3, [r2, #68]	@ 0x44
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	@ 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001952:	2007      	movs	r0, #7
 8001954:	f000 fc52 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <NMI_Handler+0x4>

0800196c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <MemManage_Handler+0x4>

0800197c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <UsageFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 fb2f 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM1_CC_IRQHandler+0x10>)
 80019ca:	f001 fdbf 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000003c 	.word	0x2000003c

080019d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <TIM2_IRQHandler+0x10>)
 80019de:	f001 fdb5 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000084 	.word	0x20000084

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	@ 0x28
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0318 	add.w	r3, r7, #24
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b34 <MX_TIM1_Init+0x124>)
 8001a3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001a40:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a42:	2208      	movs	r2, #8
 8001a44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8001a4c:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	4b36      	ldr	r3, [pc, #216]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a5a:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a66:	4832      	ldr	r0, [pc, #200]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a68:	f001 fba0 	bl	80031ac <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001a72:	f7ff ff49 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4619      	mov	r1, r3
 8001a82:	482b      	ldr	r0, [pc, #172]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a84:	f001 feee 	bl	8003864 <HAL_TIM_ConfigClockSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a8e:	f7ff ff3b 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a92:	4827      	ldr	r0, [pc, #156]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001a94:	f001 fbd9 	bl	800324a <HAL_TIM_IC_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a9e:	f7ff ff33 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	481f      	ldr	r0, [pc, #124]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001ab2:	f002 faa1 	bl	8003ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001abc:	f7ff ff24 	bl	8001908 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4816      	ldr	r0, [pc, #88]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001ad8:	f001 fe28 	bl	800372c <HAL_TIM_IC_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001ae2:	f7ff ff11 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2204      	movs	r2, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4810      	ldr	r0, [pc, #64]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001aee:	f001 fe1d 	bl	800372c <HAL_TIM_IC_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001af8:	f7ff ff06 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001afc:	463b      	mov	r3, r7
 8001afe:	2208      	movs	r2, #8
 8001b00:	4619      	mov	r1, r3
 8001b02:	480b      	ldr	r0, [pc, #44]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001b04:	f001 fe12 	bl	800372c <HAL_TIM_IC_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001b0e:	f7ff fefb 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	220c      	movs	r2, #12
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_TIM1_Init+0x120>)
 8001b1a:	f001 fe07 	bl	800372c <HAL_TIM_IC_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001b24:	f7ff fef0 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	@ 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000003c 	.word	0x2000003c
 8001b34:	40010000 	.word	0x40010000

08001b38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0318 	add.w	r3, r7, #24
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b56:	463b      	mov	r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b62:	4b31      	ldr	r3, [pc, #196]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001b64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff -1;
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001b78:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001b7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b8a:	4827      	ldr	r0, [pc, #156]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001b8c:	f001 fb0e 	bl	80031ac <HAL_TIM_Base_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b96:	f7ff feb7 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4820      	ldr	r0, [pc, #128]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001ba8:	f001 fe5c 	bl	8003864 <HAL_TIM_ConfigClockSource>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bb2:	f7ff fea9 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bb6:	481c      	ldr	r0, [pc, #112]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001bb8:	f001 fb47 	bl	800324a <HAL_TIM_IC_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bc2:	f7ff fea1 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4814      	ldr	r0, [pc, #80]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001bd6:	f002 fa0f 	bl	8003ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001be0:	f7ff fe92 	bl	8001908 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001be8:	2301      	movs	r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001bfc:	f001 fd96 	bl	800372c <HAL_TIM_IC_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001c06:	f7ff fe7f 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_TIM2_Init+0xf0>)
 8001c12:	f001 fd8b 	bl	800372c <HAL_TIM_IC_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001c1c:	f7ff fe74 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	@ 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000084 	.word	0x20000084

08001c2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	@ 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a3a      	ldr	r2, [pc, #232]	@ (8001d34 <HAL_TIM_Base_MspInit+0x108>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d135      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	4b39      	ldr	r3, [pc, #228]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4a38      	ldr	r2, [pc, #224]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5e:	4b36      	ldr	r3, [pc, #216]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	4b32      	ldr	r3, [pc, #200]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a31      	ldr	r2, [pc, #196]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c86:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4826      	ldr	r0, [pc, #152]	@ (8001d3c <HAL_TIM_Base_MspInit+0x110>)
 8001ca4:	f000 faec 	bl	8002280 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	201b      	movs	r0, #27
 8001cae:	f000 fab0 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cb2:	201b      	movs	r0, #27
 8001cb4:	f000 fac9 	bl	800224a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cb8:	e038      	b.n	8001d2c <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc2:	d133      	bne.n	8001d2c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd4:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4a13      	ldr	r2, [pc, #76]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_TIM_Base_MspInit+0x10c>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	4809      	ldr	r0, [pc, #36]	@ (8001d3c <HAL_TIM_Base_MspInit+0x110>)
 8001d18:	f000 fab2 	bl	8002280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	201c      	movs	r0, #28
 8001d22:	f000 fa76 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d26:	201c      	movs	r0, #28
 8001d28:	f000 fa8f 	bl	800224a <HAL_NVIC_EnableIRQ>
}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	@ 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <MX_USART2_UART_Init+0x50>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d78:	f002 f9ce 	bl	8004118 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d82:	f7ff fdc1 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200000cc 	.word	0x200000cc
 8001d90:	40004400 	.word	0x40004400

08001d94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <MX_USART3_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001da0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001da4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_USART3_UART_Init+0x4c>)
 8001dcc:	f002 f9a4 	bl	8004118 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f7ff fd97 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000114 	.word	0x20000114
 8001de4:	40004800 	.word	0x40004800

08001de8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	@ 0x30
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a41      	ldr	r2, [pc, #260]	@ (8001f0c <HAL_UART_MspInit+0x124>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12c      	bne.n	8001e64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	4b40      	ldr	r3, [pc, #256]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	4a3f      	ldr	r2, [pc, #252]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a38      	ldr	r2, [pc, #224]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e42:	230c      	movs	r3, #12
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e52:	2307      	movs	r3, #7
 8001e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	482d      	ldr	r0, [pc, #180]	@ (8001f14 <HAL_UART_MspInit+0x12c>)
 8001e5e:	f000 fa0f 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e62:	e04f      	b.n	8001f04 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2b      	ldr	r2, [pc, #172]	@ (8001f18 <HAL_UART_MspInit+0x130>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d14a      	bne.n	8001f04 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	4a26      	ldr	r2, [pc, #152]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a18      	ldr	r2, [pc, #96]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <HAL_UART_MspInit+0x128>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	480f      	ldr	r0, [pc, #60]	@ (8001f1c <HAL_UART_MspInit+0x134>)
 8001ede:	f000 f9cf 	bl	8002280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4808      	ldr	r0, [pc, #32]	@ (8001f20 <HAL_UART_MspInit+0x138>)
 8001f00:	f000 f9be 	bl	8002280 <HAL_GPIO_Init>
}
 8001f04:	bf00      	nop
 8001f06:	3730      	adds	r7, #48	@ 0x30
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40004800 	.word	0x40004800
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020400 	.word	0x40020400

08001f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f28:	f7ff fd60 	bl	80019ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f2c:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f2e:	490d      	ldr	r1, [pc, #52]	@ (8001f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f30:	4a0d      	ldr	r2, [pc, #52]	@ (8001f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f44:	4c0a      	ldr	r4, [pc, #40]	@ (8001f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f002 fcf5 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7ff fb5d 	bl	8001614 <main>
  bx  lr    
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f68:	08004a08 	.word	0x08004a08
  ldr r2, =_sbss
 8001f6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f70:	20000160 	.word	0x20000160

08001f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_Init+0x40>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <HAL_Init+0x40>)
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_Init+0x40>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 f92b 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f808 	bl	8001fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fcb2 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc4:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <HAL_InitTick+0x54>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_InitTick+0x58>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f943 	bl	8002266 <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f000 f90b 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	@ (8002018 <HAL_InitTick+0x5c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000000 	.word	0x20000000
 8002014:	20000008 	.word	0x20000008
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008
 8002040:	2000015c 	.word	0x2000015c

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000015c 	.word	0x2000015c

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	@ (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	@ (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	@ (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	@ 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff29 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff3e 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff8e 	bl	8002150 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff31 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	@ 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e165      	b.n	8002568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 8154 	bne.w	8002562 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80ae 	beq.w	8002562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b5d      	ldr	r3, [pc, #372]	@ (8002580 <HAL_GPIO_Init+0x300>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	4a5c      	ldr	r2, [pc, #368]	@ (8002580 <HAL_GPIO_Init+0x300>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002414:	6453      	str	r3, [r2, #68]	@ 0x44
 8002416:	4b5a      	ldr	r3, [pc, #360]	@ (8002580 <HAL_GPIO_Init+0x300>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a58      	ldr	r2, [pc, #352]	@ (8002584 <HAL_GPIO_Init+0x304>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4f      	ldr	r2, [pc, #316]	@ (8002588 <HAL_GPIO_Init+0x308>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d025      	beq.n	800249a <HAL_GPIO_Init+0x21a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4e      	ldr	r2, [pc, #312]	@ (800258c <HAL_GPIO_Init+0x30c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <HAL_GPIO_Init+0x216>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4d      	ldr	r2, [pc, #308]	@ (8002590 <HAL_GPIO_Init+0x310>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <HAL_GPIO_Init+0x212>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4c      	ldr	r2, [pc, #304]	@ (8002594 <HAL_GPIO_Init+0x314>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x20e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4b      	ldr	r2, [pc, #300]	@ (8002598 <HAL_GPIO_Init+0x318>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x20a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4a      	ldr	r2, [pc, #296]	@ (800259c <HAL_GPIO_Init+0x31c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x206>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a49      	ldr	r2, [pc, #292]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x202>
 800247e:	2306      	movs	r3, #6
 8002480:	e00c      	b.n	800249c <HAL_GPIO_Init+0x21c>
 8002482:	2307      	movs	r3, #7
 8002484:	e00a      	b.n	800249c <HAL_GPIO_Init+0x21c>
 8002486:	2305      	movs	r3, #5
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x21c>
 800248a:	2304      	movs	r3, #4
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x21c>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x21c>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x21c>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x21c>
 800249a:	2300      	movs	r3, #0
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ac:	4935      	ldr	r1, [pc, #212]	@ (8002584 <HAL_GPIO_Init+0x304>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ba:	4b3a      	ldr	r3, [pc, #232]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024de:	4a31      	ldr	r2, [pc, #196]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e4:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002508:	4a26      	ldr	r2, [pc, #152]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250e:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002532:	4a1c      	ldr	r2, [pc, #112]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255c:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	f67f ae96 	bls.w	800229c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3724      	adds	r7, #36	@ 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40021400 	.word	0x40021400
 80025a0:	40021800 	.word	0x40021800
 80025a4:	40013c00 	.word	0x40013c00

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c4:	e003      	b.n	80025ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0cc      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b68      	ldr	r3, [pc, #416]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d90c      	bls.n	8002618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b65      	ldr	r3, [pc, #404]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800263a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d044      	beq.n	80026fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d119      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d003      	beq.n	800269a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002696:	2b03      	cmp	r3, #3
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	4b3f      	ldr	r3, [pc, #252]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e067      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ba:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 0203 	bic.w	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4934      	ldr	r1, [pc, #208]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026cc:	f7ff fcba 	bl	8002044 <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7ff fcb6 	bl	8002044 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e04f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 020c 	and.w	r2, r3, #12
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1eb      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026fc:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d20c      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f855 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	@ (800279c <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fc1a 	bl	8001fbc <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00
 8002798:	40023800 	.word	0x40023800
 800279c:	080049e0 	.word	0x080049e0
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000000 	.word	0x20000000

080027c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027c4:	f7ff fff0 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0a9b      	lsrs	r3, r3, #10
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4903      	ldr	r1, [pc, #12]	@ (80027e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	080049f0 	.word	0x080049f0

080027e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027ec:	f7ff ffdc 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0b5b      	lsrs	r3, r3, #13
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4903      	ldr	r1, [pc, #12]	@ (800280c <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	080049f0 	.word	0x080049f0

08002810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002814:	b0ae      	sub	sp, #184	@ 0xb8
 8002816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002836:	4bcb      	ldr	r3, [pc, #812]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b0c      	cmp	r3, #12
 8002840:	f200 8206 	bhi.w	8002c50 <HAL_RCC_GetSysClockFreq+0x440>
 8002844:	a201      	add	r2, pc, #4	@ (adr r2, 800284c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002881 	.word	0x08002881
 8002850:	08002c51 	.word	0x08002c51
 8002854:	08002c51 	.word	0x08002c51
 8002858:	08002c51 	.word	0x08002c51
 800285c:	08002889 	.word	0x08002889
 8002860:	08002c51 	.word	0x08002c51
 8002864:	08002c51 	.word	0x08002c51
 8002868:	08002c51 	.word	0x08002c51
 800286c:	08002891 	.word	0x08002891
 8002870:	08002c51 	.word	0x08002c51
 8002874:	08002c51 	.word	0x08002c51
 8002878:	08002c51 	.word	0x08002c51
 800287c:	08002a81 	.word	0x08002a81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4bb9      	ldr	r3, [pc, #740]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x358>)
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002886:	e1e7      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002888:	4bb8      	ldr	r3, [pc, #736]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x35c>)
 800288a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800288e:	e1e3      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002890:	4bb4      	ldr	r3, [pc, #720]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289c:	4bb1      	ldr	r3, [pc, #708]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d071      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a8:	4bae      	ldr	r3, [pc, #696]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ce:	4622      	mov	r2, r4
 80028d0:	462b      	mov	r3, r5
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	0159      	lsls	r1, r3, #5
 80028dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e0:	0150      	lsls	r0, r2, #5
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4621      	mov	r1, r4
 80028e8:	1a51      	subs	r1, r2, r1
 80028ea:	6439      	str	r1, [r7, #64]	@ 0x40
 80028ec:	4629      	mov	r1, r5
 80028ee:	eb63 0301 	sbc.w	r3, r3, r1
 80028f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002900:	4649      	mov	r1, r9
 8002902:	018b      	lsls	r3, r1, #6
 8002904:	4641      	mov	r1, r8
 8002906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800290a:	4641      	mov	r1, r8
 800290c:	018a      	lsls	r2, r1, #6
 800290e:	4641      	mov	r1, r8
 8002910:	1a51      	subs	r1, r2, r1
 8002912:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002914:	4649      	mov	r1, r9
 8002916:	eb63 0301 	sbc.w	r3, r3, r1
 800291a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002928:	4649      	mov	r1, r9
 800292a:	00cb      	lsls	r3, r1, #3
 800292c:	4641      	mov	r1, r8
 800292e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002932:	4641      	mov	r1, r8
 8002934:	00ca      	lsls	r2, r1, #3
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	4603      	mov	r3, r0
 800293c:	4622      	mov	r2, r4
 800293e:	189b      	adds	r3, r3, r2
 8002940:	633b      	str	r3, [r7, #48]	@ 0x30
 8002942:	462b      	mov	r3, r5
 8002944:	460a      	mov	r2, r1
 8002946:	eb42 0303 	adc.w	r3, r2, r3
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002958:	4629      	mov	r1, r5
 800295a:	024b      	lsls	r3, r1, #9
 800295c:	4621      	mov	r1, r4
 800295e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002962:	4621      	mov	r1, r4
 8002964:	024a      	lsls	r2, r1, #9
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800296e:	2200      	movs	r2, #0
 8002970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002974:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002978:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800297c:	f7fe f832 	bl	80009e4 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800298a:	e067      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298c:	4b75      	ldr	r3, [pc, #468]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002998:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800299c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029a6:	2300      	movs	r3, #0
 80029a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029ae:	4622      	mov	r2, r4
 80029b0:	462b      	mov	r3, r5
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	0159      	lsls	r1, r3, #5
 80029bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c0:	0150      	lsls	r0, r2, #5
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4621      	mov	r1, r4
 80029c8:	1a51      	subs	r1, r2, r1
 80029ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029cc:	4629      	mov	r1, r5
 80029ce:	eb63 0301 	sbc.w	r3, r3, r1
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029e0:	4649      	mov	r1, r9
 80029e2:	018b      	lsls	r3, r1, #6
 80029e4:	4641      	mov	r1, r8
 80029e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ea:	4641      	mov	r1, r8
 80029ec:	018a      	lsls	r2, r1, #6
 80029ee:	4641      	mov	r1, r8
 80029f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80029f4:	4649      	mov	r1, r9
 80029f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a0e:	4692      	mov	sl, r2
 8002a10:	469b      	mov	fp, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	eb1a 0303 	adds.w	r3, sl, r3
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	028b      	lsls	r3, r1, #10
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a38:	4621      	mov	r1, r4
 8002a3a:	028a      	lsls	r2, r1, #10
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a44:	2200      	movs	r2, #0
 8002a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a48:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a4e:	f7fd ffc9 	bl	80009e4 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4613      	mov	r3, r2
 8002a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a5c:	4b41      	ldr	r3, [pc, #260]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a7e:	e0eb      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a80:	4b38      	ldr	r3, [pc, #224]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8c:	4b35      	ldr	r3, [pc, #212]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d06b      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a98:	4b32      	ldr	r3, [pc, #200]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aac:	2300      	movs	r3, #0
 8002aae:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ab0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	462b      	mov	r3, r5
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	0159      	lsls	r1, r3, #5
 8002ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac6:	0150      	lsls	r0, r2, #5
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4621      	mov	r1, r4
 8002ace:	1a51      	subs	r1, r2, r1
 8002ad0:	61b9      	str	r1, [r7, #24]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ae6:	4659      	mov	r1, fp
 8002ae8:	018b      	lsls	r3, r1, #6
 8002aea:	4651      	mov	r1, sl
 8002aec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002af0:	4651      	mov	r1, sl
 8002af2:	018a      	lsls	r2, r1, #6
 8002af4:	4651      	mov	r1, sl
 8002af6:	ebb2 0801 	subs.w	r8, r2, r1
 8002afa:	4659      	mov	r1, fp
 8002afc:	eb63 0901 	sbc.w	r9, r3, r1
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b14:	4690      	mov	r8, r2
 8002b16:	4699      	mov	r9, r3
 8002b18:	4623      	mov	r3, r4
 8002b1a:	eb18 0303 	adds.w	r3, r8, r3
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	462b      	mov	r3, r5
 8002b22:	eb49 0303 	adc.w	r3, r9, r3
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b34:	4629      	mov	r1, r5
 8002b36:	024b      	lsls	r3, r1, #9
 8002b38:	4621      	mov	r1, r4
 8002b3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b3e:	4621      	mov	r1, r4
 8002b40:	024a      	lsls	r2, r1, #9
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b54:	f7fd ff46 	bl	80009e4 <__aeabi_uldivmod>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b62:	e065      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x420>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b70:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	2200      	movs	r2, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b80:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b82:	2300      	movs	r3, #0
 8002b84:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b8a:	4642      	mov	r2, r8
 8002b8c:	464b      	mov	r3, r9
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	0159      	lsls	r1, r3, #5
 8002b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9c:	0150      	lsls	r0, r2, #5
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	1a51      	subs	r1, r2, r1
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	4649      	mov	r1, r9
 8002baa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	018b      	lsls	r3, r1, #6
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	018a      	lsls	r2, r1, #6
 8002bca:	4651      	mov	r1, sl
 8002bcc:	1a54      	subs	r4, r2, r1
 8002bce:	4659      	mov	r1, fp
 8002bd0:	eb63 0501 	sbc.w	r5, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	00eb      	lsls	r3, r5, #3
 8002bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be2:	00e2      	lsls	r2, r4, #3
 8002be4:	4614      	mov	r4, r2
 8002be6:	461d      	mov	r5, r3
 8002be8:	4643      	mov	r3, r8
 8002bea:	18e3      	adds	r3, r4, r3
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	464b      	mov	r3, r9
 8002bf0:	eb45 0303 	adc.w	r3, r5, r3
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c02:	4629      	mov	r1, r5
 8002c04:	028b      	lsls	r3, r1, #10
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	028a      	lsls	r2, r1, #10
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c18:	2200      	movs	r2, #0
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c1c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c22:	f7fd fedf 	bl	80009e4 <__aeabi_uldivmod>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c30:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0f1b      	lsrs	r3, r3, #28
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c4e:	e003      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	37b8      	adds	r7, #184	@ 0xb8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400

08002c70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e28d      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8083 	beq.w	8002d96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c90:	4b94      	ldr	r3, [pc, #592]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d019      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c9c:	4b91      	ldr	r3, [pc, #580]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca8:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b84      	ldr	r3, [pc, #528]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x124>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e25a      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x90>
 8002cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xcc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0xb4>
 8002d0a:	4b76      	ldr	r3, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b73      	ldr	r3, [pc, #460]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a72      	ldr	r2, [pc, #456]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xcc>
 8002d24:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6b      	ldr	r2, [pc, #428]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7ff f97e 	bl	8002044 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7ff f97a 	bl	8002044 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e21f      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b61      	ldr	r3, [pc, #388]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xdc>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7ff f96a 	bl	8002044 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7ff f966 	bl	8002044 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e20b      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b57      	ldr	r3, [pc, #348]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x104>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06f      	beq.n	8002e82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002da2:	4b50      	ldr	r3, [pc, #320]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d017      	beq.n	8002dde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dae:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b44      	ldr	r3, [pc, #272]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b41      	ldr	r3, [pc, #260]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x186>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1d3      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4937      	ldr	r1, [pc, #220]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_OscConfig+0x278>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7ff f913 	bl	8002044 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e22:	f7ff f90f 	bl	8002044 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1b4      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4925      	ldr	r1, [pc, #148]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x278>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7ff f8f2 	bl	8002044 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7ff f8ee 	bl	8002044 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e193      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d036      	beq.n	8002efc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_RCC_OscConfig+0x27c>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7ff f8d2 	bl	8002044 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7ff f8ce 	bl	8002044 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e173      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x234>
 8002ec2:	e01b      	b.n	8002efc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7ff f8bb 	bl	8002044 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e00e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7ff f8b7 	bl	8002044 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d907      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e15c      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ea      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8097 	beq.w	8003038 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b83      	ldr	r3, [pc, #524]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a7e      	ldr	r2, [pc, #504]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b79      	ldr	r3, [pc, #484]	@ (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a75      	ldr	r2, [pc, #468]	@ (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7ff f877 	bl	8002044 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7ff f873 	bl	8002044 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e118      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x31e>
 8002f80:	4b66      	ldr	r3, [pc, #408]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	4a65      	ldr	r2, [pc, #404]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x358>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x340>
 8002f96:	4b61      	ldr	r3, [pc, #388]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a60      	ldr	r2, [pc, #384]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	4a5d      	ldr	r2, [pc, #372]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x358>
 8002fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a59      	ldr	r2, [pc, #356]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbc:	4b57      	ldr	r3, [pc, #348]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a56      	ldr	r2, [pc, #344]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7ff f838 	bl	8002044 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7ff f834 	bl	8002044 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0d7      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	4b4b      	ldr	r3, [pc, #300]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0ee      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x368>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7ff f822 	bl	8002044 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7ff f81e 	bl	8002044 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0c1      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	4b40      	ldr	r3, [pc, #256]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ee      	bne.n	8003004 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b3b      	ldr	r3, [pc, #236]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	4a3a      	ldr	r2, [pc, #232]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80ad 	beq.w	800319c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003042:	4b36      	ldr	r3, [pc, #216]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d060      	beq.n	8003110 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d145      	bne.n	80030e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b33      	ldr	r3, [pc, #204]	@ (8003124 <HAL_RCC_OscConfig+0x4b4>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fff2 	bl	8002044 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe ffee 	bl	8002044 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e093      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b29      	ldr	r3, [pc, #164]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	071b      	lsls	r3, r3, #28
 80030ae:	491b      	ldr	r1, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x4b4>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe ffc3 	bl	8002044 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe ffbf 	bl	8002044 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e064      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x452>
 80030e0:	e05c      	b.n	800319c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <HAL_RCC_OscConfig+0x4b4>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe ffac 	bl	8002044 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe ffa8 	bl	8002044 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e04d      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_RCC_OscConfig+0x4ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x480>
 800310e:	e045      	b.n	800319c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e040      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003128:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <HAL_RCC_OscConfig+0x538>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d030      	beq.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d129      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d122      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800315e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003160:	4293      	cmp	r3, r2
 8003162:	d119      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	3b01      	subs	r3, #1
 8003172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d10f      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e041      	b.n	8003242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe fd2a 	bl	8001c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 fc6e 	bl	8003acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e041      	b.n	80032e0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f839 	bl	80032e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f000 fc1f 	bl	8003acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start_IT+0x1e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e013      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x46>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_IT+0x2e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e00b      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x46>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d104      	bne.n	800333a <HAL_TIM_IC_Start_IT+0x3e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e003      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x46>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_TIM_IC_Start_IT+0x58>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e013      	b.n	800337c <HAL_TIM_IC_Start_IT+0x80>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d104      	bne.n	8003364 <HAL_TIM_IC_Start_IT+0x68>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e00b      	b.n	800337c <HAL_TIM_IC_Start_IT+0x80>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d104      	bne.n	8003374 <HAL_TIM_IC_Start_IT+0x78>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e003      	b.n	800337c <HAL_TIM_IC_Start_IT+0x80>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800337a:	b2db      	uxtb	r3, r3
 800337c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800337e:	7bbb      	ldrb	r3, [r7, #14]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d102      	bne.n	800338a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003384:	7b7b      	ldrb	r3, [r7, #13]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d001      	beq.n	800338e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0cc      	b.n	8003528 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_TIM_IC_Start_IT+0xa2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800339c:	e013      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0xca>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_IC_Start_IT+0xb2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ac:	e00b      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0xca>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d104      	bne.n	80033be <HAL_TIM_IC_Start_IT+0xc2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033bc:	e003      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0xca>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_IC_Start_IT+0xda>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d4:	e013      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x102>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_IC_Start_IT+0xea>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033e4:	e00b      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x102>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_IC_Start_IT+0xfa>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033f4:	e003      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x102>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d841      	bhi.n	8003488 <HAL_TIM_IC_Start_IT+0x18c>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <HAL_TIM_IC_Start_IT+0x110>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003441 	.word	0x08003441
 8003410:	08003489 	.word	0x08003489
 8003414:	08003489 	.word	0x08003489
 8003418:	08003489 	.word	0x08003489
 800341c:	08003453 	.word	0x08003453
 8003420:	08003489 	.word	0x08003489
 8003424:	08003489 	.word	0x08003489
 8003428:	08003489 	.word	0x08003489
 800342c:	08003465 	.word	0x08003465
 8003430:	08003489 	.word	0x08003489
 8003434:	08003489 	.word	0x08003489
 8003438:	08003489 	.word	0x08003489
 800343c:	08003477 	.word	0x08003477
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0202 	orr.w	r2, r2, #2
 800344e:	60da      	str	r2, [r3, #12]
      break;
 8003450:	e01d      	b.n	800348e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0204 	orr.w	r2, r2, #4
 8003460:	60da      	str	r2, [r3, #12]
      break;
 8003462:	e014      	b.n	800348e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0208 	orr.w	r2, r2, #8
 8003472:	60da      	str	r2, [r3, #12]
      break;
 8003474:	e00b      	b.n	800348e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0210 	orr.w	r2, r2, #16
 8003484:	60da      	str	r2, [r3, #12]
      break;
 8003486:	e002      	b.n	800348e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      break;
 800348c:	bf00      	nop
  }

  if (status == HAL_OK)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d148      	bne.n	8003526 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	6839      	ldr	r1, [r7, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fd85 	bl	8003fac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a22      	ldr	r2, [pc, #136]	@ (8003530 <HAL_TIM_IC_Start_IT+0x234>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b4:	d01d      	beq.n	80034f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003534 <HAL_TIM_IC_Start_IT+0x238>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003538 <HAL_TIM_IC_Start_IT+0x23c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <HAL_TIM_IC_Start_IT+0x240>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	@ (8003540 <HAL_TIM_IC_Start_IT+0x244>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a18      	ldr	r2, [pc, #96]	@ (8003544 <HAL_TIM_IC_Start_IT+0x248>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIM_IC_Start_IT+0x1f6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a16      	ldr	r2, [pc, #88]	@ (8003548 <HAL_TIM_IC_Start_IT+0x24c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d111      	bne.n	8003516 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d010      	beq.n	8003526 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003514:	e007      	b.n	8003526 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40010000 	.word	0x40010000
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00
 8003540:	40010400 	.word	0x40010400
 8003544:	40014000 	.word	0x40014000
 8003548:	40001800 	.word	0x40001800

0800354c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d020      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0202 	mvn.w	r2, #2
 8003580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fbd6 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa76 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fa7d 	bl	8003aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d020      	beq.n	80035fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0204 	mvn.w	r2, #4
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fbb0 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa50 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa57 	bl	8003aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d020      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0208 	mvn.w	r2, #8
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2204      	movs	r2, #4
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fb8a 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa2a 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fa31 	bl	8003aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0210 	mvn.w	r2, #16
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2208      	movs	r2, #8
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd fb64 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa04 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fa0b 	bl	8003aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00c      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0201 	mvn.w	r2, #1
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9e2 	bl	8003a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00c      	beq.n	80036dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fd14 	bl	8004104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9dc 	bl	8003ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0220 	mvn.w	r2, #32
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fce6 	bl	80040f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003746:	2302      	movs	r3, #2
 8003748:	e088      	b.n	800385c <HAL_TIM_IC_ConfigChannel+0x130>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003768:	f000 fa5c 	bl	8003c24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 020c 	bic.w	r2, r2, #12
 800377a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6999      	ldr	r1, [r3, #24]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	619a      	str	r2, [r3, #24]
 800378e:	e060      	b.n	8003852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b04      	cmp	r3, #4
 8003794:	d11c      	bne.n	80037d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80037a6:	f000 fae0 	bl	8003d6a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6999      	ldr	r1, [r3, #24]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	021a      	lsls	r2, r3, #8
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	619a      	str	r2, [r3, #24]
 80037ce:	e040      	b.n	8003852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d11b      	bne.n	800380e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037e6:	f000 fb2d 	bl	8003e44 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 020c 	bic.w	r2, r2, #12
 80037f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69d9      	ldr	r1, [r3, #28]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	61da      	str	r2, [r3, #28]
 800380c:	e021      	b.n	8003852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0c      	cmp	r3, #12
 8003812:	d11c      	bne.n	800384e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003824:	f000 fb4a 	bl	8003ebc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003836:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69d9      	ldr	r1, [r3, #28]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	021a      	lsls	r2, r3, #8
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	61da      	str	r2, [r3, #28]
 800384c:	e001      	b.n	8003852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800385a:	7dfb      	ldrb	r3, [r7, #23]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIM_ConfigClockSource+0x1c>
 800387c:	2302      	movs	r3, #2
 800387e:	e0b4      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x186>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800389e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b8:	d03e      	beq.n	8003938 <HAL_TIM_ConfigClockSource+0xd4>
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038be:	f200 8087 	bhi.w	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c6:	f000 8086 	beq.w	80039d6 <HAL_TIM_ConfigClockSource+0x172>
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ce:	d87f      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b70      	cmp	r3, #112	@ 0x70
 80038d2:	d01a      	beq.n	800390a <HAL_TIM_ConfigClockSource+0xa6>
 80038d4:	2b70      	cmp	r3, #112	@ 0x70
 80038d6:	d87b      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b60      	cmp	r3, #96	@ 0x60
 80038da:	d050      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x11a>
 80038dc:	2b60      	cmp	r3, #96	@ 0x60
 80038de:	d877      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b50      	cmp	r3, #80	@ 0x50
 80038e2:	d03c      	beq.n	800395e <HAL_TIM_ConfigClockSource+0xfa>
 80038e4:	2b50      	cmp	r3, #80	@ 0x50
 80038e6:	d873      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	d058      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x13a>
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	d86f      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b30      	cmp	r3, #48	@ 0x30
 80038f2:	d064      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 80038f4:	2b30      	cmp	r3, #48	@ 0x30
 80038f6:	d86b      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d060      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d867      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05c      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 8003904:	2b10      	cmp	r3, #16
 8003906:	d05a      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 8003908:	e062      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800391a:	f000 fb27 	bl	8003f6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800392c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	609a      	str	r2, [r3, #8]
      break;
 8003936:	e04f      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003948:	f000 fb10 	bl	8003f6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800395a:	609a      	str	r2, [r3, #8]
      break;
 800395c:	e03c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	461a      	mov	r2, r3
 800396c:	f000 f9ce 	bl	8003d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2150      	movs	r1, #80	@ 0x50
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fadd 	bl	8003f36 <TIM_ITRx_SetConfig>
      break;
 800397c:	e02c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800398a:	461a      	mov	r2, r3
 800398c:	f000 fa2a 	bl	8003de4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2160      	movs	r1, #96	@ 0x60
 8003996:	4618      	mov	r0, r3
 8003998:	f000 facd 	bl	8003f36 <TIM_ITRx_SetConfig>
      break;
 800399c:	e01c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	461a      	mov	r2, r3
 80039ac:	f000 f9ae 	bl	8003d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fabd 	bl	8003f36 <TIM_ITRx_SetConfig>
      break;
 80039bc:	e00c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f000 fab4 	bl	8003f36 <TIM_ITRx_SetConfig>
      break;
 80039ce:	e003      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	e000      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d831      	bhi.n	8003a6c <HAL_TIM_ReadCapturedValue+0x78>
 8003a08:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003a6d 	.word	0x08003a6d
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	08003a6d 	.word	0x08003a6d
 8003a20:	08003a4f 	.word	0x08003a4f
 8003a24:	08003a6d 	.word	0x08003a6d
 8003a28:	08003a6d 	.word	0x08003a6d
 8003a2c:	08003a6d 	.word	0x08003a6d
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a6d 	.word	0x08003a6d
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003a6d 	.word	0x08003a6d
 8003a40:	08003a63 	.word	0x08003a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4a:	60fb      	str	r3, [r7, #12]

      break;
 8003a4c:	e00f      	b.n	8003a6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	60fb      	str	r3, [r7, #12]

      break;
 8003a56:	e00a      	b.n	8003a6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5e:	60fb      	str	r3, [r7, #12]

      break;
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	60fb      	str	r3, [r7, #12]

      break;
 8003a6a:	e000      	b.n	8003a6e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a6c:	bf00      	nop
  }

  return tmpreg;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a46      	ldr	r2, [pc, #280]	@ (8003bf8 <TIM_Base_SetConfig+0x12c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aea:	d00f      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a43      	ldr	r2, [pc, #268]	@ (8003bfc <TIM_Base_SetConfig+0x130>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00b      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a42      	ldr	r2, [pc, #264]	@ (8003c00 <TIM_Base_SetConfig+0x134>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a41      	ldr	r2, [pc, #260]	@ (8003c04 <TIM_Base_SetConfig+0x138>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a40      	ldr	r2, [pc, #256]	@ (8003c08 <TIM_Base_SetConfig+0x13c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d108      	bne.n	8003b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a35      	ldr	r2, [pc, #212]	@ (8003bf8 <TIM_Base_SetConfig+0x12c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02b      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2c:	d027      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a32      	ldr	r2, [pc, #200]	@ (8003bfc <TIM_Base_SetConfig+0x130>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d023      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a31      	ldr	r2, [pc, #196]	@ (8003c00 <TIM_Base_SetConfig+0x134>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01f      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a30      	ldr	r2, [pc, #192]	@ (8003c04 <TIM_Base_SetConfig+0x138>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01b      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2f      	ldr	r2, [pc, #188]	@ (8003c08 <TIM_Base_SetConfig+0x13c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d017      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2e      	ldr	r2, [pc, #184]	@ (8003c0c <TIM_Base_SetConfig+0x140>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2d      	ldr	r2, [pc, #180]	@ (8003c10 <TIM_Base_SetConfig+0x144>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00f      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	@ (8003c14 <TIM_Base_SetConfig+0x148>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	@ (8003c18 <TIM_Base_SetConfig+0x14c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	@ (8003c1c <TIM_Base_SetConfig+0x150>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a29      	ldr	r2, [pc, #164]	@ (8003c20 <TIM_Base_SetConfig+0x154>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d108      	bne.n	8003b90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a10      	ldr	r2, [pc, #64]	@ (8003bf8 <TIM_Base_SetConfig+0x12c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_Base_SetConfig+0xf8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a12      	ldr	r2, [pc, #72]	@ (8003c08 <TIM_Base_SetConfig+0x13c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d103      	bne.n	8003bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]
  }
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40010400 	.word	0x40010400
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40014400 	.word	0x40014400
 8003c14:	40014800 	.word	0x40014800
 8003c18:	40001800 	.word	0x40001800
 8003c1c:	40001c00 	.word	0x40001c00
 8003c20:	40002000 	.word	0x40002000

08003c24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f023 0201 	bic.w	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a28      	ldr	r2, [pc, #160]	@ (8003cf0 <TIM_TI1_SetConfig+0xcc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01b      	beq.n	8003c8a <TIM_TI1_SetConfig+0x66>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c58:	d017      	beq.n	8003c8a <TIM_TI1_SetConfig+0x66>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a25      	ldr	r2, [pc, #148]	@ (8003cf4 <TIM_TI1_SetConfig+0xd0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <TIM_TI1_SetConfig+0x66>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a24      	ldr	r2, [pc, #144]	@ (8003cf8 <TIM_TI1_SetConfig+0xd4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00f      	beq.n	8003c8a <TIM_TI1_SetConfig+0x66>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a23      	ldr	r2, [pc, #140]	@ (8003cfc <TIM_TI1_SetConfig+0xd8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_TI1_SetConfig+0x66>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a22      	ldr	r2, [pc, #136]	@ (8003d00 <TIM_TI1_SetConfig+0xdc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_TI1_SetConfig+0x66>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a21      	ldr	r2, [pc, #132]	@ (8003d04 <TIM_TI1_SetConfig+0xe0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_TI1_SetConfig+0x66>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a20      	ldr	r2, [pc, #128]	@ (8003d08 <TIM_TI1_SetConfig+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <TIM_TI1_SetConfig+0x6a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <TIM_TI1_SetConfig+0x6c>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e003      	b.n	8003cae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f023 030a 	bic.w	r3, r3, #10
 8003cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 030a 	and.w	r3, r3, #10
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40010400 	.word	0x40010400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40001800 	.word	0x40001800

08003d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 030a 	bic.w	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0210 	bic.w	r2, r3, #16
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	031b      	lsls	r3, r3, #12
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	621a      	str	r2, [r3, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0210 	bic.w	r2, r3, #16
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	031b      	lsls	r3, r3, #12
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f023 0303 	bic.w	r3, r3, #3
 8003e70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003efa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	031b      	lsls	r3, r3, #12
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003f0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	031b      	lsls	r3, r3, #12
 8003f14:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f043 0307 	orr.w	r3, r3, #7
 8003f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	609a      	str	r2, [r3, #8]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	021a      	lsls	r2, r3, #8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	609a      	str	r2, [r3, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a1a      	ldr	r2, [r3, #32]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	401a      	ands	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800400c:	2302      	movs	r3, #2
 800400e:	e05a      	b.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a21      	ldr	r2, [pc, #132]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d022      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405c:	d01d      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1d      	ldr	r2, [pc, #116]	@ (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d018      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1b      	ldr	r2, [pc, #108]	@ (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1a      	ldr	r2, [pc, #104]	@ (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a18      	ldr	r2, [pc, #96]	@ (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a17      	ldr	r2, [pc, #92]	@ (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a15      	ldr	r2, [pc, #84]	@ (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10c      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40001800 	.word	0x40001800

080040f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e042      	b.n	80041b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fe52 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	@ 0x24
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800415a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f973 	bl	8004448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	@ 0x28
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d175      	bne.n	80042c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_UART_Transmit+0x2c>
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e06e      	b.n	80042c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2221      	movs	r2, #33	@ 0x21
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041f6:	f7fd ff25 	bl	8002044 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	88fa      	ldrh	r2, [r7, #6]
 8004200:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004210:	d108      	bne.n	8004224 <HAL_UART_Transmit+0x6c>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	e003      	b.n	800422c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004228:	2300      	movs	r3, #0
 800422a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800422c:	e02e      	b.n	800428c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2200      	movs	r2, #0
 8004236:	2180      	movs	r1, #128	@ 0x80
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f848 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e03a      	b.n	80042c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	3302      	adds	r3, #2
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	e007      	b.n	800427e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	3301      	adds	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1cb      	bne.n	800422e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	2140      	movs	r1, #64	@ 0x40
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f814 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e006      	b.n	80042c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042de:	e03b      	b.n	8004358 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d037      	beq.n	8004358 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e8:	f7fd feac 	bl	8002044 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	6a3a      	ldr	r2, [r7, #32]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d302      	bcc.n	80042fe <UART_WaitOnFlagUntilTimeout+0x30>
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e03a      	b.n	8004378 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d023      	beq.n	8004358 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b80      	cmp	r3, #128	@ 0x80
 8004314:	d020      	beq.n	8004358 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d01d      	beq.n	8004358 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b08      	cmp	r3, #8
 8004328:	d116      	bne.n	8004358 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f81d 	bl	8004380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2208      	movs	r2, #8
 800434a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e00f      	b.n	8004378 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	429a      	cmp	r2, r3
 8004374:	d0b4      	beq.n	80042e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b095      	sub	sp, #84	@ 0x54
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80043aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3314      	adds	r3, #20
 80043c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d119      	bne.n	800442c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	60bb      	str	r3, [r7, #8]
   return(result);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f023 0310 	bic.w	r3, r3, #16
 800440e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004418:	61ba      	str	r2, [r7, #24]
 800441a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6979      	ldr	r1, [r7, #20]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	613b      	str	r3, [r7, #16]
   return(result);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e5      	bne.n	80043f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800443a:	bf00      	nop
 800443c:	3754      	adds	r7, #84	@ 0x54
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b0c0      	sub	sp, #256	@ 0x100
 800444e:	af00      	add	r7, sp, #0
 8004450:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	68d9      	ldr	r1, [r3, #12]
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	ea40 0301 	orr.w	r3, r0, r1
 8004470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	431a      	orrs	r2, r3
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	431a      	orrs	r2, r3
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044a0:	f021 010c 	bic.w	r1, r1, #12
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044ae:	430b      	orrs	r3, r1
 80044b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c2:	6999      	ldr	r1, [r3, #24]
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	ea40 0301 	orr.w	r3, r0, r1
 80044ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b8f      	ldr	r3, [pc, #572]	@ (8004714 <UART_SetConfig+0x2cc>)
 80044d8:	429a      	cmp	r2, r3
 80044da:	d005      	beq.n	80044e8 <UART_SetConfig+0xa0>
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004718 <UART_SetConfig+0x2d0>)
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d104      	bne.n	80044f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044e8:	f7fe f97e 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 80044ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044f0:	e003      	b.n	80044fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044f2:	f7fe f965 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 80044f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004504:	f040 810c 	bne.w	8004720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450c:	2200      	movs	r2, #0
 800450e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004512:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800451a:	4622      	mov	r2, r4
 800451c:	462b      	mov	r3, r5
 800451e:	1891      	adds	r1, r2, r2
 8004520:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004522:	415b      	adcs	r3, r3
 8004524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800452a:	4621      	mov	r1, r4
 800452c:	eb12 0801 	adds.w	r8, r2, r1
 8004530:	4629      	mov	r1, r5
 8004532:	eb43 0901 	adc.w	r9, r3, r1
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454a:	4690      	mov	r8, r2
 800454c:	4699      	mov	r9, r3
 800454e:	4623      	mov	r3, r4
 8004550:	eb18 0303 	adds.w	r3, r8, r3
 8004554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004558:	462b      	mov	r3, r5
 800455a:	eb49 0303 	adc.w	r3, r9, r3
 800455e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800456e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004576:	460b      	mov	r3, r1
 8004578:	18db      	adds	r3, r3, r3
 800457a:	653b      	str	r3, [r7, #80]	@ 0x50
 800457c:	4613      	mov	r3, r2
 800457e:	eb42 0303 	adc.w	r3, r2, r3
 8004582:	657b      	str	r3, [r7, #84]	@ 0x54
 8004584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800458c:	f7fc fa2a 	bl	80009e4 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4b61      	ldr	r3, [pc, #388]	@ (800471c <UART_SetConfig+0x2d4>)
 8004596:	fba3 2302 	umull	r2, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	011c      	lsls	r4, r3, #4
 800459e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045b8:	415b      	adcs	r3, r3
 80045ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045c0:	4641      	mov	r1, r8
 80045c2:	eb12 0a01 	adds.w	sl, r2, r1
 80045c6:	4649      	mov	r1, r9
 80045c8:	eb43 0b01 	adc.w	fp, r3, r1
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e0:	4692      	mov	sl, r2
 80045e2:	469b      	mov	fp, r3
 80045e4:	4643      	mov	r3, r8
 80045e6:	eb1a 0303 	adds.w	r3, sl, r3
 80045ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ee:	464b      	mov	r3, r9
 80045f0:	eb4b 0303 	adc.w	r3, fp, r3
 80045f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004604:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800460c:	460b      	mov	r3, r1
 800460e:	18db      	adds	r3, r3, r3
 8004610:	643b      	str	r3, [r7, #64]	@ 0x40
 8004612:	4613      	mov	r3, r2
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	647b      	str	r3, [r7, #68]	@ 0x44
 800461a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800461e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004622:	f7fc f9df 	bl	80009e4 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4611      	mov	r1, r2
 800462c:	4b3b      	ldr	r3, [pc, #236]	@ (800471c <UART_SetConfig+0x2d4>)
 800462e:	fba3 2301 	umull	r2, r3, r3, r1
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2264      	movs	r2, #100	@ 0x64
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	1acb      	subs	r3, r1, r3
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004642:	4b36      	ldr	r3, [pc, #216]	@ (800471c <UART_SetConfig+0x2d4>)
 8004644:	fba3 2302 	umull	r2, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004650:	441c      	add	r4, r3
 8004652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800465c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	1891      	adds	r1, r2, r2
 800466a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800466c:	415b      	adcs	r3, r3
 800466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004674:	4641      	mov	r1, r8
 8004676:	1851      	adds	r1, r2, r1
 8004678:	6339      	str	r1, [r7, #48]	@ 0x30
 800467a:	4649      	mov	r1, r9
 800467c:	414b      	adcs	r3, r1
 800467e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800468c:	4659      	mov	r1, fp
 800468e:	00cb      	lsls	r3, r1, #3
 8004690:	4651      	mov	r1, sl
 8004692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004696:	4651      	mov	r1, sl
 8004698:	00ca      	lsls	r2, r1, #3
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	4642      	mov	r2, r8
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046a8:	464b      	mov	r3, r9
 80046aa:	460a      	mov	r2, r1
 80046ac:	eb42 0303 	adc.w	r3, r2, r3
 80046b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046c8:	460b      	mov	r3, r1
 80046ca:	18db      	adds	r3, r3, r3
 80046cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ce:	4613      	mov	r3, r2
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046de:	f7fc f981 	bl	80009e4 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <UART_SetConfig+0x2d4>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	@ 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	3332      	adds	r3, #50	@ 0x32
 80046fa:	4a08      	ldr	r2, [pc, #32]	@ (800471c <UART_SetConfig+0x2d4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 0207 	and.w	r2, r3, #7
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4422      	add	r2, r4
 800470e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004710:	e106      	b.n	8004920 <UART_SetConfig+0x4d8>
 8004712:	bf00      	nop
 8004714:	40011000 	.word	0x40011000
 8004718:	40011400 	.word	0x40011400
 800471c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004724:	2200      	movs	r2, #0
 8004726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800472a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800472e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004732:	4642      	mov	r2, r8
 8004734:	464b      	mov	r3, r9
 8004736:	1891      	adds	r1, r2, r2
 8004738:	6239      	str	r1, [r7, #32]
 800473a:	415b      	adcs	r3, r3
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
 800473e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004742:	4641      	mov	r1, r8
 8004744:	1854      	adds	r4, r2, r1
 8004746:	4649      	mov	r1, r9
 8004748:	eb43 0501 	adc.w	r5, r3, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	00eb      	lsls	r3, r5, #3
 8004756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475a:	00e2      	lsls	r2, r4, #3
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	4643      	mov	r3, r8
 8004762:	18e3      	adds	r3, r4, r3
 8004764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004768:	464b      	mov	r3, r9
 800476a:	eb45 0303 	adc.w	r3, r5, r3
 800476e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800477e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800478e:	4629      	mov	r1, r5
 8004790:	008b      	lsls	r3, r1, #2
 8004792:	4621      	mov	r1, r4
 8004794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004798:	4621      	mov	r1, r4
 800479a:	008a      	lsls	r2, r1, #2
 800479c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047a0:	f7fc f920 	bl	80009e4 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4b60      	ldr	r3, [pc, #384]	@ (800492c <UART_SetConfig+0x4e4>)
 80047aa:	fba3 2302 	umull	r2, r3, r3, r2
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	011c      	lsls	r4, r3, #4
 80047b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047c4:	4642      	mov	r2, r8
 80047c6:	464b      	mov	r3, r9
 80047c8:	1891      	adds	r1, r2, r2
 80047ca:	61b9      	str	r1, [r7, #24]
 80047cc:	415b      	adcs	r3, r3
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d4:	4641      	mov	r1, r8
 80047d6:	1851      	adds	r1, r2, r1
 80047d8:	6139      	str	r1, [r7, #16]
 80047da:	4649      	mov	r1, r9
 80047dc:	414b      	adcs	r3, r1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ec:	4659      	mov	r1, fp
 80047ee:	00cb      	lsls	r3, r1, #3
 80047f0:	4651      	mov	r1, sl
 80047f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f6:	4651      	mov	r1, sl
 80047f8:	00ca      	lsls	r2, r1, #3
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	4642      	mov	r2, r8
 8004802:	189b      	adds	r3, r3, r2
 8004804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004808:	464b      	mov	r3, r9
 800480a:	460a      	mov	r2, r1
 800480c:	eb42 0303 	adc.w	r3, r2, r3
 8004810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800481e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800482c:	4649      	mov	r1, r9
 800482e:	008b      	lsls	r3, r1, #2
 8004830:	4641      	mov	r1, r8
 8004832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004836:	4641      	mov	r1, r8
 8004838:	008a      	lsls	r2, r1, #2
 800483a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800483e:	f7fc f8d1 	bl	80009e4 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4611      	mov	r1, r2
 8004848:	4b38      	ldr	r3, [pc, #224]	@ (800492c <UART_SetConfig+0x4e4>)
 800484a:	fba3 2301 	umull	r2, r3, r3, r1
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2264      	movs	r2, #100	@ 0x64
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	1acb      	subs	r3, r1, r3
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	3332      	adds	r3, #50	@ 0x32
 800485c:	4a33      	ldr	r2, [pc, #204]	@ (800492c <UART_SetConfig+0x4e4>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004868:	441c      	add	r4, r3
 800486a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800486e:	2200      	movs	r2, #0
 8004870:	673b      	str	r3, [r7, #112]	@ 0x70
 8004872:	677a      	str	r2, [r7, #116]	@ 0x74
 8004874:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	1891      	adds	r1, r2, r2
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	415b      	adcs	r3, r3
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004888:	4641      	mov	r1, r8
 800488a:	1851      	adds	r1, r2, r1
 800488c:	6039      	str	r1, [r7, #0]
 800488e:	4649      	mov	r1, r9
 8004890:	414b      	adcs	r3, r1
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048a0:	4659      	mov	r1, fp
 80048a2:	00cb      	lsls	r3, r1, #3
 80048a4:	4651      	mov	r1, sl
 80048a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048aa:	4651      	mov	r1, sl
 80048ac:	00ca      	lsls	r2, r1, #3
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	4642      	mov	r2, r8
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048ba:	464b      	mov	r3, r9
 80048bc:	460a      	mov	r2, r1
 80048be:	eb42 0303 	adc.w	r3, r2, r3
 80048c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048dc:	4649      	mov	r1, r9
 80048de:	008b      	lsls	r3, r1, #2
 80048e0:	4641      	mov	r1, r8
 80048e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e6:	4641      	mov	r1, r8
 80048e8:	008a      	lsls	r2, r1, #2
 80048ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048ee:	f7fc f879 	bl	80009e4 <__aeabi_uldivmod>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <UART_SetConfig+0x4e4>)
 80048f8:	fba3 1302 	umull	r1, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	2164      	movs	r1, #100	@ 0x64
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	3332      	adds	r3, #50	@ 0x32
 800490a:	4a08      	ldr	r2, [pc, #32]	@ (800492c <UART_SetConfig+0x4e4>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f003 020f 	and.w	r2, r3, #15
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4422      	add	r2, r4
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004926:	46bd      	mov	sp, r7
 8004928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492c:	51eb851f 	.word	0x51eb851f

08004930 <memset>:
 8004930:	4402      	add	r2, r0
 8004932:	4603      	mov	r3, r0
 8004934:	4293      	cmp	r3, r2
 8004936:	d100      	bne.n	800493a <memset+0xa>
 8004938:	4770      	bx	lr
 800493a:	f803 1b01 	strb.w	r1, [r3], #1
 800493e:	e7f9      	b.n	8004934 <memset+0x4>

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4d0d      	ldr	r5, [pc, #52]	@ (8004978 <__libc_init_array+0x38>)
 8004944:	4c0d      	ldr	r4, [pc, #52]	@ (800497c <__libc_init_array+0x3c>)
 8004946:	1b64      	subs	r4, r4, r5
 8004948:	10a4      	asrs	r4, r4, #2
 800494a:	2600      	movs	r6, #0
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	4d0b      	ldr	r5, [pc, #44]	@ (8004980 <__libc_init_array+0x40>)
 8004952:	4c0c      	ldr	r4, [pc, #48]	@ (8004984 <__libc_init_array+0x44>)
 8004954:	f000 f818 	bl	8004988 <_init>
 8004958:	1b64      	subs	r4, r4, r5
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	2600      	movs	r6, #0
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	08004a00 	.word	0x08004a00
 800497c:	08004a00 	.word	0x08004a00
 8004980:	08004a00 	.word	0x08004a00
 8004984:	08004a04 	.word	0x08004a04

08004988 <_init>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr

08004994 <_fini>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr
